%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: BCA_colorLogo_ill.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Administrator
%%CreationDate: 5/1/13
%%BoundingBox: 0 0 473 448
%%HiResBoundingBox: 0 0 472.3057 447.9800
%%CropBox: 0 0 472.3057 447.9800
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (Pantone 415U)
%%+ (Pantone 110U)
%%+ (Pantone 144U)
%%+ (Pantone 032U)
%%+ (Pantone 292U)
%%CMYKCustomColor: 0.1000 0.0500 0 0.1700 (Pantone 415U)
%%+ 0 0.1000 1 0.1500 (Pantone 110U)
%%+ 0 0.5000 1 0 (Pantone 144U)
%%+ 0 1 0.9000 0 (Pantone 032U)
%%+ 0.5000 0.2000 0 0 (Pantone 292U)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2013-05-01T14:43:39-04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-05-01T14:43:39-04:00</xmp:ModifyDate>
         <xmp:CreateDate>2013-05-01T14:43:38-04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>244</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA9AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYqknmPzx5Q8tR89d1e1080qsUsg9Vh/kxCsjfQuKvL9e/5yw/LyxJTSra91eQVo6R&#xA;i3iP+ylIk/5J4ppgmqf85heZJC36L8v2dsP2frUstx9/p/V8VpjV1/zlJ+bEx/d3Fnbb9IrZT2/4&#xA;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&#xA;2KuxV2KuxV2KuxV2Kv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F77F1174072068118DBB987311C6F47B</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F1174072068118DBB987311C6F47B</stRef:documentID>
            <stRef:originalDocumentID>uuid:AC05A2C502D211DB84A2A95FCA299DD2</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:InstanceID>xmp.iid:01801174072068118083CAE8D42D5A5C</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:01801174072068118083CAE8D42D5A5C</xmpMM:DocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118DBB987311C6F47B</stEvt:instanceID>
                  <stEvt:when>2011-03-02T09:07:39-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01801174072068118083CAE8D42D5A5C</stEvt:instanceID>
                  <stEvt:when>2013-05-01T14:43:39-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:AC05A2C502D211DB84A2A95FCA299DD2</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>8.500000</stDim:w>
            <stDim:h>11.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>Pantone 110U</rdf:li>
               <rdf:li>Pantone 144U</rdf:li>
               <rdf:li>Pantone 292U</rdf:li>
               <rdf:li>Pantone 415U</rdf:li>
               <rdf:li>Pantone 032U</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=100 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=0</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>0</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=100</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>255</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=25</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>63</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=50</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>127</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=75</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>191</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=100</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>255</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=75 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=25 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=25 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=0 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=13 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>12.500000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=25 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=38 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>37.500000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=13 M=25 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>12.500000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=38 M=75 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>37.500000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=25 Y=13 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>12.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=38 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>37.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=13 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>12.500000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=25 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=38 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>37.500000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=13 M=0 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>12.500000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=0 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=38 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>37.500000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=0 Y=13 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>12.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=38 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>37.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=13 Y=13 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>12.500000</xmpG:magenta>
                           <xmpG:yellow>12.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=25 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=38 Y=38 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>37.500000</xmpG:magenta>
                           <xmpG:yellow>37.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=50 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=13 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>12.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=75 Y=38 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>37.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=13 M=25 Y=13 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>12.500000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>12.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=50 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=38 M=75 Y=38 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>37.500000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>37.500000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=13 M=25 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>12.500000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=50 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=38 M=75 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>37.500000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=13 M=13 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>12.500000</xmpG:cyan>
                           <xmpG:magenta>12.500000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=38 M=38 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>37.500000</xmpG:cyan>
                           <xmpG:magenta>37.500000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=13 Y=25 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>12.500000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=25 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=38 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>37.500000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>New Color Swatch 1</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>101</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Pantone 292U</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>20.000000</xmpG:magenta>
                           <xmpG:yellow>0.003100</xmpG:yellow>
                           <xmpG:black>0.003100</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Pantone 109U</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Pantone 110U</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>14.999999</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Pantone 434U</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>5.000000</xmpG:cyan>
                           <xmpG:magenta>5.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>5.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Pantone 415U</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>10.000000</xmpG:cyan>
                           <xmpG:magenta>5.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>17.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Pantone 032U</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Pantone 144U</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -447.98 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 447.98 li
472.306 447.98 li
472.306 0 li
cp
clp
471.306 445.936 mo
1 445.936 li
1 1 li
471.306 1 li
471.306 445.936 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
2 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
471.306 445.936 mo
1 445.936 li
1 1 li
471.306 1 li
471.306 445.936 li
cp
@
454.971 226.252 mo
454.971 348.709 355.7 447.98 233.243 447.98 cv
110.787 447.98 11.5156 348.709 11.5156 226.252 cv
11.5156 103.796 110.787 4.5249 233.243 4.5249 cv
355.7 4.5249 454.971 103.796 454.971 226.252 cv
cp
f
232.908 18.6831 mo
118.271 18.6831 25.3389 111.615 25.3389 226.252 cv
25.3389 340.89 118.271 433.822 232.908 433.822 cv
347.546 433.822 440.478 340.89 440.478 226.252 cv
440.478 111.615 347.546 18.6831 232.908 18.6831 cv
cp
71.4023 226.655 mo
71.4023 137.459 143.719 64.3442 232.914 64.3442 cv
322.11 64.3442 394.414 137.459 394.414 226.655 cv
394.414 315.85 322.104 388.161 232.908 388.161 cv
143.713 388.161 71.4023 315.85 71.4023 226.655 cv
cp
0 0 0 1 cmyk
f
47.3818 274.73 mo
48.0723 274.51 li
48.3613 275.297 48.6426 275.829 48.916 276.106 cv
49.376 276.571 49.999 276.678 50.7861 276.427 cv
63.9355 272.242 li
64.7051 271.997 65.1484 271.583 65.2646 270.999 cv
65.3271 270.646 65.2578 270.014 65.0557 269.104 cv
65.7461 268.884 li
68.9658 278.999 li
68.2764 279.218 li
67.9531 278.357 67.6533 277.783 67.377 277.496 cv
66.9141 277.021 66.2881 276.91 65.502 277.161 cv
59.876 278.951 li
62.1436 286.074 li
67.7695 284.283 li
68.5566 284.032 69.002 283.595 69.1055 282.973 cv
69.168 282.588 69.082 281.936 68.8477 281.014 cv
69.5371 280.794 li
72.7764 290.967 li
72.0859 291.187 li
71.7451 290.331 71.4395 289.769 71.1689 289.501 cv
70.7246 289.053 70.1133 288.954 69.335 289.202 cv
56.1855 293.387 li
55.3896 293.641 54.9443 294.109 54.8506 294.793 cv
54.79 295.187 54.875 295.787 55.1025 296.593 cv
54.4121 296.813 li
51.1738 286.64 li
51.8633 286.42 li
52.1631 287.268 52.4619 287.842 52.7627 288.143 cv
53.2217 288.608 53.8408 288.716 54.6201 288.468 cv
60.8828 286.475 li
58.6152 279.352 li
52.3525 281.346 li
51.5469 281.602 51.0996 282.077 51.0088 282.771 cv
50.9609 283.171 51.0557 283.79 51.292 284.625 cv
50.6025 284.845 li
47.3818 274.73 li
cp
0 0 0 0 cmyk
f
1 lw
47.3818 274.73 mo
48.0723 274.51 li
48.3613 275.297 48.6426 275.829 48.916 276.106 cv
49.376 276.571 49.999 276.678 50.7861 276.427 cv
63.9355 272.242 li
64.7051 271.997 65.1484 271.583 65.2646 270.999 cv
65.3271 270.646 65.2578 270.014 65.0557 269.104 cv
65.7461 268.884 li
68.9658 278.999 li
68.2764 279.218 li
67.9531 278.357 67.6533 277.783 67.377 277.496 cv
66.9141 277.021 66.2881 276.91 65.502 277.161 cv
59.876 278.951 li
62.1436 286.074 li
67.7695 284.283 li
68.5566 284.032 69.002 283.595 69.1055 282.973 cv
69.168 282.588 69.082 281.936 68.8477 281.014 cv
69.5371 280.794 li
72.7764 290.967 li
72.0859 291.187 li
71.7451 290.331 71.4395 289.769 71.1689 289.501 cv
70.7246 289.053 70.1133 288.954 69.335 289.202 cv
56.1855 293.387 li
55.3896 293.641 54.9443 294.109 54.8506 294.793 cv
54.79 295.187 54.875 295.787 55.1025 296.593 cv
54.4121 296.813 li
51.1738 286.64 li
51.8633 286.42 li
52.1631 287.268 52.4619 287.842 52.7627 288.143 cv
53.2217 288.608 53.8408 288.716 54.6201 288.468 cv
60.8828 286.475 li
58.6152 279.352 li
52.3525 281.346 li
51.5469 281.602 51.0996 282.077 51.0088 282.771 cv
50.9609 283.171 51.0557 283.79 51.292 284.625 cv
50.6025 284.845 li
47.3818 274.73 li
cp
@
58.959 306.867 mo
59.6113 306.552 li
59.3086 305.905 59.126 305.397 59.0635 305.031 cv
58.9688 304.408 59.1055 304.007 59.4736 303.831 cv
59.7744 303.685 60.3145 303.578 61.0957 303.507 cv
61.4619 303.478 62.2559 303.424 63.4756 303.346 cv
66.5352 309.693 li
65.3252 311.161 li
65.0576 311.482 64.8252 311.748 64.627 311.957 cv
64.2881 312.301 64.0186 312.522 63.8184 312.619 cv
63.375 312.833 63.0283 312.821 62.7803 312.583 cv
62.5322 312.345 62.1689 311.775 61.6924 310.872 cv
61.04 311.186 li
65.4502 320.333 li
66.1025 320.019 li
65.7754 319.383 65.7471 318.785 66.0176 318.224 cv
66.2881 317.663 67.0088 316.663 68.1816 315.225 cv
78.6387 302.414 li
78.2598 301.627 li
61.1719 302.127 li
59.8203 302.167 58.917 302.131 58.4629 302.022 cv
57.7441 301.858 57.2002 301.446 56.8311 300.785 cv
56.1787 301.099 li
58.959 306.867 li
cp
71.874 302.971 mo
71.9873 303.206 li
67.3447 308.776 li
64.6982 303.284 li
71.874 302.971 li
cp
f
58.959 306.867 mo
59.6113 306.552 li
59.3086 305.905 59.126 305.397 59.0635 305.031 cv
58.9688 304.408 59.1055 304.007 59.4736 303.831 cv
59.7744 303.685 60.3145 303.578 61.0957 303.507 cv
61.4619 303.478 62.2559 303.424 63.4756 303.346 cv
66.5352 309.693 li
65.3252 311.161 li
65.0576 311.482 64.8252 311.748 64.627 311.957 cv
64.2881 312.301 64.0186 312.522 63.8184 312.619 cv
63.375 312.833 63.0283 312.821 62.7803 312.583 cv
62.5322 312.345 62.1689 311.775 61.6924 310.872 cv
61.04 311.186 li
65.4502 320.333 li
66.1025 320.019 li
65.7754 319.383 65.7471 318.785 66.0176 318.224 cv
66.2881 317.663 67.0088 316.663 68.1816 315.225 cv
78.6387 302.414 li
78.2598 301.627 li
61.1719 302.127 li
59.8203 302.167 58.917 302.131 58.4629 302.022 cv
57.7441 301.858 57.2002 301.446 56.8311 300.785 cv
56.1787 301.099 li
58.959 306.867 li
cp
71.874 302.971 mo
71.9873 303.206 li
67.3447 308.776 li
64.6982 303.284 li
71.874 302.971 li
cp
@
90.4902 323.183 mo
91.2109 324.273 91.7568 325.498 92.1279 326.856 cv
92.498 328.215 92.7256 328.958 92.8105 329.086 cv
93.0303 329.418 93.3213 329.608 93.6865 329.654 cv
94.0518 329.701 94.3779 329.665 94.668 329.547 cv
95.1494 330.275 li
89.5869 333.956 li
89.1475 333.292 li
89.9385 331.862 90.4648 330.588 90.7275 329.472 cv
91.2012 327.396 90.9258 325.582 89.9004 324.033 cv
88.7393 322.278 87.2285 321.487 85.3672 321.66 cv
83.5049 321.832 81.417 322.684 79.1025 324.216 cv
77.3984 325.343 76.1416 326.487 75.3291 327.649 cv
73.8047 329.82 73.7695 332.004 75.2236 334.202 cv
76.1143 335.547 77.2822 336.574 78.7305 337.282 cv
79.5645 337.684 80.7139 338.05 82.1787 338.379 cv
82.1133 339.543 li
80.3994 339.208 79.0547 338.805 78.0771 338.338 cv
76.3359 337.506 74.9072 336.248 73.792 334.562 cv
72.085 331.981 71.3506 329.357 71.5889 326.689 cv
71.8506 323.737 73.2852 321.397 75.8945 319.671 cv
78.4805 317.96 81.1855 317.499 84.0117 318.287 cv
86.6621 319.03 88.8223 320.662 90.4902 323.183 cv
cp
f
90.4902 323.183 mo
91.2109 324.273 91.7568 325.498 92.1279 326.856 cv
92.498 328.215 92.7256 328.958 92.8105 329.086 cv
93.0303 329.418 93.3213 329.608 93.6865 329.654 cv
94.0518 329.701 94.3779 329.665 94.668 329.547 cv
95.1494 330.275 li
89.5869 333.956 li
89.1475 333.292 li
89.9385 331.862 90.4648 330.588 90.7275 329.472 cv
91.2012 327.396 90.9258 325.582 89.9004 324.033 cv
88.7393 322.278 87.2285 321.487 85.3672 321.66 cv
83.5049 321.832 81.417 322.684 79.1025 324.216 cv
77.3984 325.343 76.1416 326.487 75.3291 327.649 cv
73.8047 329.82 73.7695 332.004 75.2236 334.202 cv
76.1143 335.547 77.2822 336.574 78.7305 337.282 cv
79.5645 337.684 80.7139 338.05 82.1787 338.379 cv
82.1133 339.543 li
80.3994 339.208 79.0547 338.805 78.0771 338.338 cv
76.3359 337.506 74.9072 336.248 73.792 334.562 cv
72.085 331.981 71.3506 329.357 71.5889 326.689 cv
71.8506 323.737 73.2852 321.397 75.8945 319.671 cv
78.4805 317.96 81.1855 317.499 84.0117 318.287 cv
86.6621 319.03 88.8223 320.662 90.4902 323.183 cv
cp
@
82.4756 346.127 mo
83.0176 345.648 li
83.5996 346.264 84.0752 346.648 84.4443 346.798 cv
85.0654 347.053 85.6895 346.904 86.3154 346.35 cv
96.6543 337.21 li
97.2725 336.664 97.5078 336.087 97.3584 335.484 cv
97.2666 335.115 96.9375 334.567 96.3711 333.842 cv
96.9131 333.362 li
103.934 341.303 li
103.392 341.783 li
102.611 341.027 101.989 340.603 101.523 340.511 cv
101.058 340.418 100.418 340.732 99.6045 341.452 cv
95.0352 345.491 li
104.162 346.438 li
104.793 346.507 105.222 346.534 105.449 346.516 cv
105.676 346.5 105.887 346.406 106.081 346.233 cv
106.353 345.994 106.406 345.705 106.243 345.365 cv
106.078 345.026 105.673 344.448 105.025 343.63 cv
105.567 343.151 li
111.584 349.956 li
111.041 350.435 li
109.875 349.299 108.671 348.568 107.429 348.242 cv
106.187 347.916 103.545 347.555 99.5049 347.162 cv
97.7813 361.463 li
97.7422 361.77 97.7666 362.018 97.8535 362.208 cv
97.9404 362.396 98.1084 362.66 98.3584 362.999 cv
97.8154 363.478 li
90.8457 355.594 li
91.3877 355.115 li
92.0234 355.82 92.4805 356.281 92.7598 356.499 cv
93.0381 356.715 93.2754 356.738 93.4697 356.566 cv
93.5605 356.486 93.6396 356.34 93.708 356.13 cv
93.7754 355.92 93.8369 355.6 93.8916 355.171 cv
94.9678 346.614 li
93.8975 346.497 li
89.7148 350.195 li
89.0957 350.743 88.874 351.339 89.0508 351.988 cv
89.1484 352.365 89.4678 352.887 90.0078 353.554 cv
89.4658 354.034 li
82.4756 346.127 li
cp
f
82.4756 346.127 mo
83.0176 345.648 li
83.5996 346.264 84.0752 346.648 84.4443 346.798 cv
85.0654 347.053 85.6895 346.904 86.3154 346.35 cv
96.6543 337.21 li
97.2725 336.664 97.5078 336.087 97.3584 335.484 cv
97.2666 335.115 96.9375 334.567 96.3711 333.842 cv
96.9131 333.362 li
103.934 341.303 li
103.392 341.783 li
102.611 341.027 101.989 340.603 101.523 340.511 cv
101.058 340.418 100.418 340.732 99.6045 341.452 cv
95.0352 345.491 li
104.162 346.438 li
104.793 346.507 105.222 346.534 105.449 346.516 cv
105.676 346.5 105.887 346.406 106.081 346.233 cv
106.353 345.994 106.406 345.705 106.243 345.365 cv
106.078 345.026 105.673 344.448 105.025 343.63 cv
105.567 343.151 li
111.584 349.956 li
111.041 350.435 li
109.875 349.299 108.671 348.568 107.429 348.242 cv
106.187 347.916 103.545 347.555 99.5049 347.162 cv
97.7813 361.463 li
97.7422 361.77 97.7666 362.018 97.8535 362.208 cv
97.9404 362.396 98.1084 362.66 98.3584 362.999 cv
97.8154 363.478 li
90.8457 355.594 li
91.3877 355.115 li
92.0234 355.82 92.4805 356.281 92.7598 356.499 cv
93.0381 356.715 93.2754 356.738 93.4697 356.566 cv
93.5605 356.486 93.6396 356.34 93.708 356.13 cv
93.7754 355.92 93.8369 355.6 93.8916 355.171 cv
94.9678 346.614 li
93.8975 346.497 li
89.7148 350.195 li
89.0957 350.743 88.874 351.339 89.0508 351.988 cv
89.1484 352.365 89.4678 352.887 90.0078 353.554 cv
89.4658 354.034 li
82.4756 346.127 li
cp
@
114.824 378.391 mo
100.949 366.406 li
101.423 365.858 li
102.121 366.424 102.677 366.757 103.091 366.857 cv
103.725 367.013 104.31 366.782 104.844 366.163 cv
113.864 355.72 li
114.41 355.088 114.549 354.466 114.281 353.854 cv
114.134 353.494 113.731 353 113.074 352.37 cv
113.548 351.822 li
127.226 363.637 li
123.466 367.989 li
122.887 367.489 li
123.786 365.837 124.097 364.443 123.817 363.306 cv
123.537 362.169 122.443 360.776 120.535 359.127 cv
119.809 358.5 119.287 358.169 118.972 358.136 cv
118.657 358.103 118.323 358.291 117.972 358.698 cv
113.657 363.693 li
114.997 364.875 116.104 365.443 116.981 365.397 cv
117.858 365.35 118.952 364.826 120.263 363.824 cv
120.866 364.344 li
114.567 371.636 li
113.964 371.116 li
114.855 369.74 115.258 368.576 115.171 367.623 cv
115.083 366.669 114.362 365.609 113.011 364.441 cv
108.495 369.667 li
108.102 370.125 107.962 370.546 108.078 370.936 cv
108.194 371.324 108.654 371.866 109.458 372.56 cv
110.973 373.868 112.439 374.669 113.859 374.963 cv
115.278 375.256 116.993 374.99 119.004 374.163 cv
119.664 374.733 li
114.824 378.391 li
cp
f
114.824 378.391 mo
100.949 366.406 li
101.423 365.858 li
102.121 366.424 102.677 366.757 103.091 366.857 cv
103.725 367.013 104.31 366.782 104.844 366.163 cv
113.864 355.72 li
114.41 355.088 114.549 354.466 114.281 353.854 cv
114.134 353.494 113.731 353 113.074 352.37 cv
113.548 351.822 li
127.226 363.637 li
123.466 367.989 li
122.887 367.489 li
123.786 365.837 124.097 364.443 123.817 363.306 cv
123.537 362.169 122.443 360.776 120.535 359.127 cv
119.809 358.5 119.287 358.169 118.972 358.136 cv
118.657 358.103 118.323 358.291 117.972 358.698 cv
113.657 363.693 li
114.997 364.875 116.104 365.443 116.981 365.397 cv
117.858 365.35 118.952 364.826 120.263 363.824 cv
120.866 364.344 li
114.567 371.636 li
113.964 371.116 li
114.855 369.74 115.258 368.576 115.171 367.623 cv
115.083 366.669 114.362 365.609 113.011 364.441 cv
108.495 369.667 li
108.102 370.125 107.962 370.546 108.078 370.936 cv
108.194 371.324 108.654 371.866 109.458 372.56 cv
110.973 373.868 112.439 374.669 113.859 374.963 cv
115.278 375.256 116.993 374.99 119.004 374.163 cv
119.664 374.733 li
114.824 378.391 li
cp
@
119.413 382.061 mo
119.812 381.457 li
120.799 382.074 121.537 382.318 122.025 382.19 cv
122.514 382.061 122.959 381.691 123.362 381.079 cv
130.794 369.799 li
130.528 368.457 130.349 367.653 130.256 367.385 cv
130.162 367.119 129.967 366.859 129.669 366.607 cv
130.066 366.002 li
135.618 369.66 li
138.012 385.626 li
138.14 385.711 li
142.805 378.629 li
143.336 377.824 143.553 377.141 143.456 376.583 cv
143.359 376.024 142.849 375.39 141.922 374.68 cv
142.32 374.075 li
147.961 377.792 li
147.563 378.396 li
146.662 377.981 146.005 377.787 145.59 377.813 cv
145.175 377.839 144.727 378.217 144.247 378.946 cv
135.008 392.969 li
134.279 392.489 li
131.144 372.164 li
130.964 372.046 li
124.805 381.395 li
124.324 382.124 124.096 382.712 124.118 383.161 cv
124.146 383.879 124.688 384.615 125.746 385.367 cv
125.349 385.971 li
119.413 382.061 li
cp
f
119.413 382.061 mo
119.812 381.457 li
120.799 382.074 121.537 382.318 122.025 382.19 cv
122.514 382.061 122.959 381.691 123.362 381.079 cv
130.794 369.799 li
130.528 368.457 130.349 367.653 130.256 367.385 cv
130.162 367.119 129.967 366.859 129.669 366.607 cv
130.066 366.002 li
135.618 369.66 li
138.012 385.626 li
138.14 385.711 li
142.805 378.629 li
143.336 377.824 143.553 377.141 143.456 376.583 cv
143.359 376.024 142.849 375.39 141.922 374.68 cv
142.32 374.075 li
147.961 377.792 li
147.563 378.396 li
146.662 377.981 146.005 377.787 145.59 377.813 cv
145.175 377.839 144.727 378.217 144.247 378.946 cv
135.008 392.969 li
134.279 392.489 li
131.144 372.164 li
130.964 372.046 li
124.805 381.395 li
124.324 382.124 124.096 382.712 124.118 383.161 cv
124.146 383.879 124.688 384.615 125.746 385.367 cv
125.349 385.971 li
119.413 382.061 li
cp
@
141.514 396.53 mo
144.658 390.209 li
145.468 390.612 li
144.978 392.743 145.027 394.494 145.616 395.866 cv
146.205 397.237 147.158 398.25 148.476 398.906 cv
149.755 399.542 150.813 399.698 151.647 399.372 cv
152.482 399.046 153.063 398.555 153.391 397.899 cv
153.771 397.134 153.797 396.37 153.471 395.605 cv
153.253 395.103 152.703 394.317 151.822 393.246 cv
150.408 391.515 li
149.003 389.8 148.129 388.359 147.785 387.193 cv
147.441 386.026 147.562 384.857 148.145 383.685 cv
148.765 382.439 149.835 381.52 151.355 380.928 cv
152.876 380.337 154.651 380.546 156.681 381.556 cv
157.714 382.07 158.643 382.708 159.467 383.471 cv
160.29 384.234 160.771 384.649 160.908 384.717 cv
161.219 384.872 161.474 384.898 161.674 384.794 cv
161.872 384.692 162.075 384.526 162.28 384.296 cv
163.117 384.712 li
160.351 390.272 li
159.568 389.883 li
159.835 388.409 159.727 386.97 159.243 385.569 cv
158.761 384.167 157.843 383.129 156.489 382.457 cv
155.538 381.983 154.67 381.844 153.883 382.038 cv
153.097 382.233 152.535 382.667 152.2 383.339 cv
151.799 384.146 151.76 384.877 152.083 385.536 cv
152.392 386.198 153.232 387.363 154.604 389.031 cv
156.244 391.029 li
156.975 391.921 157.49 392.764 157.792 393.556 cv
158.354 395.04 158.293 396.47 157.606 397.85 cv
156.965 399.138 155.8 400.075 154.111 400.661 cv
152.423 401.247 150.345 400.924 147.876 399.696 cv
147.31 399.415 146.76 399.081 146.227 398.697 cv
145.693 398.312 145.193 397.878 144.726 397.398 cv
144.271 396.938 li
144.159 396.84 144.049 396.752 143.94 396.672 cv
143.832 396.592 143.736 396.532 143.654 396.491 cv
143.361 396.345 143.122 396.323 142.937 396.421 cv
142.75 396.521 142.546 396.691 142.322 396.932 cv
141.514 396.53 li
cp
f
141.514 396.53 mo
144.658 390.209 li
145.468 390.612 li
144.978 392.743 145.027 394.494 145.616 395.866 cv
146.205 397.237 147.158 398.25 148.476 398.906 cv
149.755 399.542 150.813 399.698 151.647 399.372 cv
152.482 399.046 153.063 398.555 153.391 397.899 cv
153.771 397.134 153.797 396.37 153.471 395.605 cv
153.253 395.103 152.703 394.317 151.822 393.246 cv
150.408 391.515 li
149.003 389.8 148.129 388.359 147.785 387.193 cv
147.441 386.026 147.562 384.857 148.145 383.685 cv
148.765 382.439 149.835 381.52 151.355 380.928 cv
152.876 380.337 154.651 380.546 156.681 381.556 cv
157.714 382.07 158.643 382.708 159.467 383.471 cv
160.29 384.234 160.771 384.649 160.908 384.717 cv
161.219 384.872 161.474 384.898 161.674 384.794 cv
161.872 384.692 162.075 384.526 162.28 384.296 cv
163.117 384.712 li
160.351 390.272 li
159.568 389.883 li
159.835 388.409 159.727 386.97 159.243 385.569 cv
158.761 384.167 157.843 383.129 156.489 382.457 cv
155.538 381.983 154.67 381.844 153.883 382.038 cv
153.097 382.233 152.535 382.667 152.2 383.339 cv
151.799 384.146 151.76 384.877 152.083 385.536 cv
152.392 386.198 153.232 387.363 154.604 389.031 cv
156.244 391.029 li
156.975 391.921 157.49 392.764 157.792 393.556 cv
158.354 395.04 158.293 396.47 157.606 397.85 cv
156.965 399.138 155.8 400.075 154.111 400.661 cv
152.423 401.247 150.345 400.924 147.876 399.696 cv
147.31 399.415 146.76 399.081 146.227 398.697 cv
145.693 398.312 145.193 397.878 144.726 397.398 cv
144.271 396.938 li
144.159 396.84 144.049 396.752 143.94 396.672 cv
143.832 396.592 143.736 396.532 143.654 396.491 cv
143.361 396.345 143.122 396.323 142.937 396.421 cv
142.75 396.521 142.546 396.691 142.322 396.932 cv
141.514 396.53 li
cp
@
165.776 407.169 mo
166.018 406.487 li
165.347 406.24 164.86 406.008 164.558 405.793 cv
164.051 405.417 163.866 405.037 164.003 404.651 cv
164.114 404.336 164.423 403.879 164.927 403.28 cv
165.167 403 165.692 402.404 166.503 401.489 cv
173.146 403.84 li
173.32 405.734 li
173.356 406.151 173.378 406.502 173.385 406.791 cv
173.387 407.274 173.351 407.621 173.276 407.831 cv
173.112 408.294 172.858 408.53 172.515 408.536 cv
172.172 408.542 171.512 408.393 170.537 408.087 cv
170.296 408.77 li
179.869 412.159 li
180.11 411.476 li
179.431 411.254 178.988 410.85 178.786 410.261 cv
178.583 409.671 178.391 408.455 178.21 406.608 cv
176.611 390.148 li
175.788 389.857 li
164.01 402.246 li
163.077 403.226 162.411 403.837 162.012 404.08 cv
161.387 404.469 160.71 404.559 159.982 404.351 cv
159.74 405.034 li
165.776 407.169 li
cp
172.201 395.308 mo
172.446 395.395 li
173.074 402.619 li
167.327 400.584 li
172.201 395.308 li
cp
f
165.776 407.169 mo
166.018 406.487 li
165.347 406.24 164.86 406.008 164.558 405.793 cv
164.051 405.417 163.866 405.037 164.003 404.651 cv
164.114 404.336 164.423 403.879 164.927 403.28 cv
165.167 403 165.692 402.404 166.503 401.489 cv
173.146 403.84 li
173.32 405.734 li
173.356 406.151 173.378 406.502 173.385 406.791 cv
173.387 407.274 173.351 407.621 173.276 407.831 cv
173.112 408.294 172.858 408.53 172.515 408.536 cv
172.172 408.542 171.512 408.393 170.537 408.087 cv
170.296 408.77 li
179.869 412.159 li
180.11 411.476 li
179.431 411.254 178.988 410.85 178.786 410.261 cv
178.583 409.671 178.391 408.455 178.21 406.608 cv
176.611 390.148 li
175.788 389.857 li
164.01 402.246 li
163.077 403.226 162.411 403.837 162.012 404.08 cv
161.387 404.469 160.71 404.559 159.982 404.351 cv
159.74 405.034 li
165.776 407.169 li
cp
172.201 395.308 mo
172.446 395.395 li
173.074 402.619 li
167.327 400.584 li
172.201 395.308 li
cp
@
199.667 396.538 mo
200.946 396.802 202.197 397.287 203.418 397.989 cv
204.639 398.692 205.324 399.058 205.475 399.089 cv
205.864 399.17 206.205 399.098 206.496 398.874 cv
206.788 398.65 206.994 398.394 207.116 398.106 cv
207.972 398.284 li
206.621 404.815 li
205.841 404.654 li
205.394 403.083 204.87 401.808 204.27 400.831 cv
203.142 399.024 201.667 397.932 199.848 397.556 cv
197.787 397.13 196.158 397.635 194.96 399.07 cv
193.761 400.504 192.881 402.582 192.318 405.299 cv
191.905 407.299 191.82 408.998 192.063 410.393 cv
192.513 413.008 194.028 414.583 196.608 415.116 cv
198.188 415.442 199.74 415.346 201.267 414.828 cv
202.143 414.525 203.215 413.975 204.485 413.175 cv
205.26 414.046 li
203.808 415.016 202.57 415.68 201.548 416.038 cv
199.727 416.675 197.826 416.79 195.847 416.38 cv
192.816 415.753 190.445 414.411 188.733 412.35 cv
186.838 410.072 186.206 407.401 186.84 404.337 cv
187.468 401.301 189.061 399.066 191.62 397.632 cv
194.024 396.292 196.707 395.926 199.667 396.538 cv
cp
f
199.667 396.538 mo
200.946 396.802 202.197 397.287 203.418 397.989 cv
204.639 398.692 205.324 399.058 205.475 399.089 cv
205.864 399.17 206.205 399.098 206.496 398.874 cv
206.788 398.65 206.994 398.394 207.116 398.106 cv
207.972 398.284 li
206.621 404.815 li
205.841 404.654 li
205.394 403.083 204.87 401.808 204.27 400.831 cv
203.142 399.024 201.667 397.932 199.848 397.556 cv
197.787 397.13 196.158 397.635 194.96 399.07 cv
193.761 400.504 192.881 402.582 192.318 405.299 cv
191.905 407.299 191.82 408.998 192.063 410.393 cv
192.513 413.008 194.028 414.583 196.608 415.116 cv
198.188 415.442 199.74 415.346 201.267 414.828 cv
202.143 414.525 203.215 413.975 204.485 413.175 cv
205.26 414.046 li
203.808 415.016 202.57 415.68 201.548 416.038 cv
199.727 416.675 197.826 416.79 195.847 416.38 cv
192.816 415.753 190.445 414.411 188.733 412.35 cv
186.838 410.072 186.206 407.401 186.84 404.337 cv
187.468 401.301 189.061 399.066 191.62 397.632 cv
194.024 396.292 196.707 395.926 199.667 396.538 cv
cp
@
210.191 418.46 mo
210.238 417.738 li
211.085 417.764 211.693 417.702 212.062 417.547 cv
212.681 417.29 213.018 416.744 213.071 415.91 cv
213.95 402.138 li
214.003 401.314 213.764 400.741 213.231 400.418 cv
212.906 400.221 212.287 400.065 211.373 399.951 cv
211.419 399.228 li
221.997 399.904 li
221.951 400.625 li
220.865 400.64 220.125 400.78 219.729 401.042 cv
219.334 401.306 219.103 401.979 219.033 403.063 cv
218.645 409.15 li
225.781 403.382 li
226.277 402.986 226.6 402.702 226.749 402.53 cv
226.898 402.358 226.981 402.143 226.997 401.883 cv
227.021 401.522 226.854 401.279 226.499 401.154 cv
226.144 401.029 225.448 400.905 224.412 400.784 cv
224.459 400.061 li
233.523 400.639 li
233.478 401.362 li
231.85 401.379 230.479 401.71 229.369 402.355 cv
228.259 403 226.133 404.609 222.991 407.18 cv
231.859 418.533 li
232.048 418.777 232.24 418.936 232.436 419.008 cv
232.63 419.082 232.935 419.15 233.351 419.213 cv
233.305 419.936 li
222.803 419.266 li
222.849 418.543 li
223.798 418.594 224.446 418.599 224.798 418.556 cv
225.147 418.513 225.332 418.363 225.349 418.103 cv
225.356 417.983 225.31 417.824 225.21 417.626 cv
225.109 417.429 224.927 417.16 224.663 416.817 cv
219.389 409.993 li
218.548 410.665 li
218.192 416.237 li
218.14 417.061 218.404 417.641 218.986 417.976 cv
219.321 418.174 219.916 418.319 220.77 418.411 cv
220.724 419.133 li
210.191 418.46 li
cp
f
210.191 418.46 mo
210.238 417.738 li
211.085 417.764 211.693 417.702 212.062 417.547 cv
212.681 417.29 213.018 416.744 213.071 415.91 cv
213.95 402.138 li
214.003 401.314 213.764 400.741 213.231 400.418 cv
212.906 400.221 212.287 400.065 211.373 399.951 cv
211.419 399.228 li
221.997 399.904 li
221.951 400.625 li
220.865 400.64 220.125 400.78 219.729 401.042 cv
219.334 401.306 219.103 401.979 219.033 403.063 cv
218.645 409.15 li
225.781 403.382 li
226.277 402.986 226.6 402.702 226.749 402.53 cv
226.898 402.358 226.981 402.143 226.997 401.883 cv
227.021 401.522 226.854 401.279 226.499 401.154 cv
226.144 401.029 225.448 400.905 224.412 400.784 cv
224.459 400.061 li
233.523 400.639 li
233.478 401.362 li
231.85 401.379 230.479 401.71 229.369 402.355 cv
228.259 403 226.133 404.609 222.991 407.18 cv
231.859 418.533 li
232.048 418.777 232.24 418.936 232.436 419.008 cv
232.63 419.082 232.935 419.15 233.351 419.213 cv
233.305 419.936 li
222.803 419.266 li
222.849 418.543 li
223.798 418.594 224.446 418.599 224.798 418.556 cv
225.147 418.513 225.332 418.363 225.349 418.103 cv
225.356 417.983 225.31 417.824 225.21 417.626 cv
225.109 417.429 224.927 417.16 224.663 416.817 cv
219.389 409.993 li
218.548 410.665 li
218.192 416.237 li
218.14 417.061 218.404 417.641 218.986 417.976 cv
219.321 418.174 219.916 418.319 220.77 418.411 cv
220.724 419.133 li
210.191 418.46 li
cp
@
241.206 424.606 mo
240.817 423.992 li
241.747 423.366 242.443 422.823 242.908 422.361 cv
243.729 421.562 244.129 420.82 244.105 420.133 cv
244.099 419.939 244.042 419.783 243.937 419.666 cv
243.82 419.558 243.66 419.507 243.456 419.514 cv
243.354 419.518 243.227 419.534 243.075 419.562 cv
242.923 419.59 242.815 419.606 242.755 419.608 cv
242.132 419.628 241.587 419.447 241.119 419.064 cv
240.651 418.68 240.406 418.15 240.384 417.472 cv
240.359 416.758 240.577 416.17 241.037 415.708 cv
241.497 415.248 242.109 415.003 242.875 414.978 cv
243.813 414.947 244.592 415.22 245.209 415.798 cv
245.826 416.376 246.151 417.167 246.186 418.168 cv
246.236 419.7 245.609 421.114 244.305 422.412 cv
243.593 423.104 242.56 423.835 241.206 424.606 cv
cp
f
241.206 424.606 mo
240.817 423.992 li
241.747 423.366 242.443 422.823 242.908 422.361 cv
243.729 421.562 244.129 420.82 244.105 420.133 cv
244.099 419.939 244.042 419.783 243.937 419.666 cv
243.82 419.558 243.66 419.507 243.456 419.514 cv
243.354 419.518 243.227 419.534 243.075 419.562 cv
242.923 419.59 242.815 419.606 242.755 419.608 cv
242.132 419.628 241.587 419.447 241.119 419.064 cv
240.651 418.68 240.406 418.15 240.384 417.472 cv
240.359 416.758 240.577 416.17 241.037 415.708 cv
241.497 415.248 242.109 415.003 242.875 414.978 cv
243.813 414.947 244.592 415.22 245.209 415.798 cv
245.826 416.376 246.151 417.167 246.186 418.168 cv
246.236 419.7 245.609 421.114 244.305 422.412 cv
243.593 423.104 242.56 423.835 241.206 424.606 cv
cp
@
257.892 418.418 mo
257.763 417.706 li
258.902 417.47 259.605 417.138 259.869 416.708 cv
260.134 416.278 260.2 415.702 260.069 414.98 cv
257.656 401.69 li
256.538 400.903 255.853 400.445 255.602 400.316 cv
255.35 400.187 255.028 400.134 254.639 400.158 cv
254.509 399.446 li
261.05 398.258 li
273.807 408.155 li
273.957 408.127 li
272.442 399.784 li
272.27 398.834 271.956 398.191 271.5 397.853 cv
271.045 397.516 270.236 397.411 269.076 397.537 cv
268.947 396.824 li
275.593 395.618 li
275.723 396.33 li
274.785 396.651 274.175 396.964 273.893 397.27 cv
273.611 397.577 273.549 398.159 273.704 399.017 cv
276.704 415.541 li
275.845 415.696 li
259.542 403.16 li
259.331 403.198 li
261.331 414.213 li
261.487 415.072 261.729 415.656 262.054 415.964 cv
262.57 416.464 263.471 416.623 264.755 416.436 cv
264.885 417.149 li
257.892 418.418 li
cp
f
257.892 418.418 mo
257.763 417.706 li
258.902 417.47 259.605 417.138 259.869 416.708 cv
260.134 416.278 260.2 415.702 260.069 414.98 cv
257.656 401.69 li
256.538 400.903 255.853 400.445 255.602 400.316 cv
255.35 400.187 255.028 400.134 254.639 400.158 cv
254.509 399.446 li
261.05 398.258 li
273.807 408.155 li
273.957 408.127 li
272.442 399.784 li
272.27 398.834 271.956 398.191 271.5 397.853 cv
271.045 397.516 270.236 397.411 269.076 397.537 cv
268.947 396.824 li
275.593 395.618 li
275.723 396.33 li
274.785 396.651 274.175 396.964 273.893 397.27 cv
273.611 397.577 273.549 398.159 273.704 399.017 cv
276.704 415.541 li
275.845 415.696 li
259.542 403.16 li
259.331 403.198 li
261.331 414.213 li
261.487 415.072 261.729 415.656 262.054 415.964 cv
262.57 416.464 263.471 416.623 264.755 416.436 cv
264.885 417.149 li
257.892 418.418 li
cp
@
300.785 407.85 mo
283.329 413.458 li
283.107 412.768 li
283.954 412.467 284.528 412.166 284.828 411.864 cv
285.292 411.404 285.398 410.785 285.148 410.006 cv
280.928 396.869 li
280.672 396.073 280.214 395.63 279.552 395.541 cv
279.167 395.479 278.535 395.565 277.656 395.798 cv
277.435 395.11 li
294.643 389.581 li
296.401 395.056 li
295.673 395.291 li
294.731 393.663 293.702 392.672 292.586 392.319 cv
291.47 391.965 289.711 392.174 287.31 392.946 cv
286.396 393.24 285.843 393.512 285.65 393.764 cv
285.457 394.016 285.443 394.399 285.608 394.912 cv
287.627 401.195 li
289.334 400.667 290.396 400.016 290.813 399.243 cv
291.229 398.471 291.352 397.264 291.178 395.623 cv
291.937 395.379 li
294.884 404.553 li
294.125 404.797 li
293.414 403.319 292.63 402.37 291.771 401.949 cv
290.911 401.528 289.631 401.59 287.93 402.136 cv
290.042 408.712 li
290.227 409.287 290.515 409.625 290.907 409.729 cv
291.3 409.832 292.001 409.721 293.013 409.396 cv
294.918 408.784 296.365 407.949 297.355 406.889 cv
298.345 405.831 299.01 404.227 299.35 402.081 cv
300.181 401.813 li
300.785 407.85 li
cp
f
300.785 407.85 mo
283.329 413.458 li
283.107 412.768 li
283.954 412.467 284.528 412.166 284.828 411.864 cv
285.292 411.404 285.398 410.785 285.148 410.006 cv
280.928 396.869 li
280.672 396.073 280.214 395.63 279.552 395.541 cv
279.167 395.479 278.535 395.565 277.656 395.798 cv
277.435 395.11 li
294.643 389.581 li
296.401 395.056 li
295.673 395.291 li
294.731 393.663 293.702 392.672 292.586 392.319 cv
291.47 391.965 289.711 392.174 287.31 392.946 cv
286.396 393.24 285.843 393.512 285.65 393.764 cv
285.457 394.016 285.443 394.399 285.608 394.912 cv
287.627 401.195 li
289.334 400.667 290.396 400.016 290.813 399.243 cv
291.229 398.471 291.352 397.264 291.178 395.623 cv
291.937 395.379 li
294.884 404.553 li
294.125 404.797 li
293.414 403.319 292.63 402.37 291.771 401.949 cv
290.911 401.528 289.631 401.59 287.93 402.136 cv
290.042 408.712 li
290.227 409.287 290.515 409.625 290.907 409.729 cv
291.3 409.832 292.001 409.721 293.013 409.396 cv
294.918 408.784 296.365 407.949 297.355 406.889 cv
298.345 405.831 299.01 404.227 299.35 402.081 cv
300.181 401.813 li
300.785 407.85 li
cp
@
298.123 388.743 mo
306.372 384.587 li
306.697 385.234 li
306.052 385.632 305.633 385.953 305.44 386.195 cv
305.248 386.437 305.257 386.766 305.465 387.18 cv
305.52 387.289 305.597 387.408 305.697 387.539 cv
305.798 387.67 305.915 387.801 306.049 387.93 cv
313.776 395.202 li
314.009 395.084 li
313.465 386.003 li
313.462 385.954 313.143 385.642 312.505 385.069 cv
311.868 384.496 311.453 384.154 311.26 384.043 cv
310.899 383.85 310.563 383.755 310.249 383.756 cv
309.936 383.758 309.44 383.905 308.763 384.194 cv
308.438 383.547 li
317.192 379.137 li
317.519 379.784 li
316.744 380.247 316.249 380.595 316.03 380.83 cv
315.811 381.065 315.789 381.356 315.964 381.705 cv
316.007 381.788 316.116 381.932 316.295 382.138 cv
316.473 382.345 316.739 382.62 317.094 382.959 cv
324.136 389.688 li
324.327 389.591 li
323.162 379.685 li
323.142 379.508 323.107 379.327 323.058 379.137 cv
323.009 378.949 322.933 378.751 322.827 378.544 cv
322.59 378.072 322.234 377.855 321.764 377.895 cv
321.476 377.915 320.991 378.077 320.309 378.378 cv
319.983 377.732 li
325.113 375.148 li
325.438 375.794 li
325.039 376.069 324.757 376.335 324.591 376.596 cv
324.31 377.06 324.214 377.664 324.303 378.409 cv
326.431 396.592 li
325.691 396.964 li
314.973 387.396 li
314.78 387.493 li
315.664 402.015 li
314.885 402.408 li
301.226 390.033 li
300.632 389.49 300.161 389.192 299.813 389.138 cv
299.467 389.084 299.007 389.16 298.436 389.364 cv
298.123 388.743 li
cp
f
298.123 388.743 mo
306.372 384.587 li
306.697 385.234 li
306.052 385.632 305.633 385.953 305.44 386.195 cv
305.248 386.437 305.257 386.766 305.465 387.18 cv
305.52 387.289 305.597 387.408 305.697 387.539 cv
305.798 387.67 305.915 387.801 306.049 387.93 cv
313.776 395.202 li
314.009 395.084 li
313.465 386.003 li
313.462 385.954 313.143 385.642 312.505 385.069 cv
311.868 384.496 311.453 384.154 311.26 384.043 cv
310.899 383.85 310.563 383.755 310.249 383.756 cv
309.936 383.758 309.44 383.905 308.763 384.194 cv
308.438 383.547 li
317.192 379.137 li
317.519 379.784 li
316.744 380.247 316.249 380.595 316.03 380.83 cv
315.811 381.065 315.789 381.356 315.964 381.705 cv
316.007 381.788 316.116 381.932 316.295 382.138 cv
316.473 382.345 316.739 382.62 317.094 382.959 cv
324.136 389.688 li
324.327 389.591 li
323.162 379.685 li
323.142 379.508 323.107 379.327 323.058 379.137 cv
323.009 378.949 322.933 378.751 322.827 378.544 cv
322.59 378.072 322.234 377.855 321.764 377.895 cv
321.476 377.915 320.991 378.077 320.309 378.378 cv
319.983 377.732 li
325.113 375.148 li
325.438 375.794 li
325.039 376.069 324.757 376.335 324.591 376.596 cv
324.31 377.06 324.214 377.664 324.303 378.409 cv
326.431 396.592 li
325.691 396.964 li
314.973 387.396 li
314.78 387.493 li
315.664 402.015 li
314.885 402.408 li
301.226 390.033 li
300.632 389.49 300.161 389.192 299.813 389.138 cv
299.467 389.084 299.007 389.16 298.436 389.364 cv
298.123 388.743 li
cp
@
336.677 366.569 mo
345.407 359.806 li
345.851 360.379 li
345.017 361.12 344.533 361.722 344.403 362.187 cv
344.272 362.653 344.543 363.318 345.214 364.184 cv
352.743 373.905 li
353.982 375.504 354.47 377.118 354.205 378.743 cv
353.938 380.382 352.936 381.875 351.2 383.219 cv
349.974 384.169 348.753 384.633 347.54 384.61 cv
346.327 384.586 345.454 384.229 344.92 383.54 cv
344.487 382.982 344.329 382.407 344.443 381.812 cv
344.559 381.218 344.858 380.734 345.343 380.359 cv
345.827 379.984 346.346 379.828 346.899 379.892 cv
347.453 379.957 347.895 380.202 348.225 380.627 cv
348.509 380.995 348.68 381.419 348.737 381.903 cv
348.796 382.386 348.848 382.658 348.894 382.716 cv
349.063 382.937 349.287 383.03 349.565 382.997 cv
349.843 382.963 350.119 382.841 350.395 382.628 cv
351.137 382.053 351.463 381.448 351.372 380.814 cv
351.304 380.444 351.032 379.95 350.555 379.333 cv
340.851 366.806 li
340.322 366.124 339.727 365.863 339.063 366.024 cv
338.662 366.124 338.015 366.496 337.12 367.142 cv
336.677 366.569 li
cp
f
336.677 366.569 mo
345.407 359.806 li
345.851 360.379 li
345.017 361.12 344.533 361.722 344.403 362.187 cv
344.272 362.653 344.543 363.318 345.214 364.184 cv
352.743 373.905 li
353.982 375.504 354.47 377.118 354.205 378.743 cv
353.938 380.382 352.936 381.875 351.2 383.219 cv
349.974 384.169 348.753 384.633 347.54 384.61 cv
346.327 384.586 345.454 384.229 344.92 383.54 cv
344.487 382.982 344.329 382.407 344.443 381.812 cv
344.559 381.218 344.858 380.734 345.343 380.359 cv
345.827 379.984 346.346 379.828 346.899 379.892 cv
347.453 379.957 347.895 380.202 348.225 380.627 cv
348.509 380.995 348.68 381.419 348.737 381.903 cv
348.796 382.386 348.848 382.658 348.894 382.716 cv
349.063 382.937 349.287 383.03 349.565 382.997 cv
349.843 382.963 350.119 382.841 350.395 382.628 cv
351.137 382.053 351.463 381.448 351.372 380.814 cv
351.304 380.444 351.032 379.95 350.555 379.333 cv
340.851 366.806 li
340.322 366.124 339.727 365.863 339.063 366.024 cv
338.662 366.124 338.015 366.496 337.12 367.142 cv
336.677 366.569 li
cp
@
373.648 359.654 mo
360.479 372.41 li
359.975 371.889 li
360.601 371.245 360.981 370.72 361.117 370.317 cv
361.329 369.699 361.15 369.096 360.582 368.509 cv
350.981 358.597 li
350.4 357.998 349.793 357.804 349.16 358.016 cv
348.788 358.131 348.26 358.488 347.574 359.086 cv
347.071 358.567 li
360.054 345.992 li
364.055 350.123 li
363.505 350.656 li
361.939 349.612 360.578 349.179 359.421 349.357 cv
358.264 349.535 356.779 350.5 354.968 352.255 cv
354.278 352.923 353.903 353.413 353.842 353.723 cv
353.78 354.035 353.938 354.383 354.313 354.771 cv
358.904 359.511 li
360.2 358.282 360.865 357.228 360.896 356.351 cv
360.928 355.474 360.503 354.337 359.622 352.943 cv
360.193 352.389 li
366.897 359.31 li
366.325 359.865 li
365.034 358.854 363.91 358.35 362.953 358.353 cv
361.996 358.356 360.876 358.979 359.592 360.222 cv
364.397 365.183 li
364.817 365.617 365.226 365.792 365.623 365.711 cv
366.021 365.63 366.601 365.22 367.363 364.481 cv
368.801 363.088 369.729 361.699 370.147 360.311 cv
370.566 358.923 370.453 357.191 369.808 355.116 cv
370.435 354.508 li
373.648 359.654 li
cp
f
373.648 359.654 mo
360.479 372.41 li
359.975 371.889 li
360.601 371.245 360.981 370.72 361.117 370.317 cv
361.329 369.699 361.15 369.096 360.582 368.509 cv
350.981 358.597 li
350.4 357.998 349.793 357.804 349.16 358.016 cv
348.788 358.131 348.26 358.488 347.574 359.086 cv
347.071 358.567 li
360.054 345.992 li
364.055 350.123 li
363.505 350.656 li
361.939 349.612 360.578 349.179 359.421 349.357 cv
358.264 349.535 356.779 350.5 354.968 352.255 cv
354.278 352.923 353.903 353.413 353.842 353.723 cv
353.78 354.035 353.938 354.383 354.313 354.771 cv
358.904 359.511 li
360.2 358.282 360.865 357.228 360.896 356.351 cv
360.928 355.474 360.503 354.337 359.622 352.943 cv
360.193 352.389 li
366.897 359.31 li
366.325 359.865 li
365.034 358.854 363.91 358.35 362.953 358.353 cv
361.996 358.356 360.876 358.979 359.592 360.222 cv
364.397 365.183 li
364.817 365.617 365.226 365.792 365.623 365.711 cv
366.021 365.63 366.601 365.22 367.363 364.481 cv
368.801 363.088 369.729 361.699 370.147 360.311 cv
370.566 358.923 370.453 357.191 369.808 355.116 cv
370.435 354.508 li
373.648 359.654 li
cp
@
384.306 347.115 mo
383.739 346.665 li
383.023 347.504 382.415 347.959 381.914 348.031 cv
381.413 348.102 380.77 347.826 379.985 347.202 cv
375.614 343.727 li
376.129 343.08 li
387.156 343.53 li
391.15 338.506 li
390.616 338.082 li
390.424 338.294 390.24 338.455 390.064 338.563 cv
389.89 338.672 389.66 338.725 389.378 338.722 cv
379.097 338.609 li
379.619 337.655 379.916 336.593 379.991 335.426 cv
380.075 333.888 379.511 332.637 378.297 331.672 cv
376.655 330.367 374.735 330.445 372.54 331.909 cv
371.421 332.676 370.209 333.878 368.906 335.516 cv
362.625 343.417 li
363.191 343.868 li
363.924 343.081 364.473 342.637 364.838 342.536 cv
365.386 342.384 366.092 342.652 366.956 343.339 cv
376.82 351.182 li
377.648 351.84 378.065 352.42 378.071 352.92 cv
378.076 353.421 377.767 354.101 377.143 354.96 cv
377.709 355.412 li
384.306 347.115 li
cp
369.217 338.639 mo
368.875 338.368 368.711 338.072 368.724 337.749 cv
368.737 337.426 369.004 336.938 369.525 336.283 cv
370.484 335.076 371.571 334.583 372.783 334.802 cv
373.494 334.937 374.282 335.349 375.147 336.037 cv
376.557 337.157 377.181 338.217 377.02 339.218 cv
376.859 340.219 376.15 341.531 374.896 343.155 cv
369.217 338.639 li
cp
f
384.306 347.115 mo
383.739 346.665 li
383.023 347.504 382.415 347.959 381.914 348.031 cv
381.413 348.102 380.77 347.826 379.985 347.202 cv
375.614 343.727 li
376.129 343.08 li
387.156 343.53 li
391.15 338.506 li
390.616 338.082 li
390.424 338.294 390.24 338.455 390.064 338.563 cv
389.89 338.672 389.66 338.725 389.378 338.722 cv
379.097 338.609 li
379.619 337.655 379.916 336.593 379.991 335.426 cv
380.075 333.888 379.511 332.637 378.297 331.672 cv
376.655 330.367 374.735 330.445 372.54 331.909 cv
371.421 332.676 370.209 333.878 368.906 335.516 cv
362.625 343.417 li
363.191 343.868 li
363.924 343.081 364.473 342.637 364.838 342.536 cv
365.386 342.384 366.092 342.652 366.956 343.339 cv
376.82 351.182 li
377.648 351.84 378.065 352.42 378.071 352.92 cv
378.076 353.421 377.767 354.101 377.143 354.96 cv
377.709 355.412 li
384.306 347.115 li
cp
369.217 338.639 mo
368.875 338.368 368.711 338.072 368.724 337.749 cv
368.737 337.426 369.004 336.938 369.525 336.283 cv
370.484 335.076 371.571 334.583 372.783 334.802 cv
373.494 334.937 374.282 335.349 375.147 336.037 cv
376.557 337.157 377.181 338.217 377.02 339.218 cv
376.859 340.219 376.15 341.531 374.896 343.155 cv
369.217 338.639 li
cp
@
394.085 334.696 mo
388.072 330.998 li
388.546 330.227 li
390.624 330.907 392.372 331.014 393.791 330.549 cv
395.21 330.086 396.305 329.228 397.075 327.975 cv
397.824 326.758 398.074 325.718 397.824 324.857 cv
397.574 323.997 397.138 323.374 396.513 322.99 cv
395.785 322.542 395.026 322.447 394.235 322.704 cv
393.716 322.875 392.884 323.353 391.737 324.134 cv
389.888 325.388 li
388.054 326.633 386.54 327.375 385.348 327.613 cv
384.155 327.85 383.001 327.626 381.887 326.941 cv
380.7 326.211 379.881 325.063 379.428 323.496 cv
378.976 321.928 379.343 320.179 380.53 318.248 cv
381.135 317.265 381.854 316.398 382.688 315.645 cv
383.521 314.893 383.978 314.452 384.058 314.322 cv
384.239 314.026 384.288 313.774 384.203 313.566 cv
384.119 313.358 383.972 313.141 383.761 312.917 cv
384.251 312.121 li
389.541 315.375 li
389.083 316.118 li
387.639 315.721 386.196 315.7 384.757 316.055 cv
383.317 316.411 382.202 317.232 381.41 318.519 cv
380.854 319.424 380.637 320.277 380.76 321.078 cv
380.883 321.879 381.265 322.476 381.905 322.871 cv
382.673 323.342 383.397 323.447 384.083 323.184 cv
384.77 322.936 386.005 322.204 387.789 320.986 cv
389.926 319.532 li
390.88 318.883 391.766 318.446 392.582 318.216 cv
394.109 317.789 395.529 317.979 396.842 318.787 cv
398.067 319.541 398.896 320.785 399.328 322.518 cv
399.76 324.253 399.253 326.294 397.809 328.642 cv
397.478 329.182 397.096 329.7 396.665 330.196 cv
396.234 330.692 395.759 331.152 395.237 331.574 cv
394.738 331.987 li
394.632 332.089 394.534 332.191 394.444 332.292 cv
394.355 332.393 394.286 332.482 394.238 332.56 cv
394.067 332.838 394.022 333.075 394.104 333.269 cv
394.187 333.463 394.338 333.682 394.559 333.926 cv
394.085 334.696 li
cp
f
394.085 334.696 mo
388.072 330.998 li
388.546 330.227 li
390.624 330.907 392.372 331.014 393.791 330.549 cv
395.21 330.086 396.305 329.228 397.075 327.975 cv
397.824 326.758 398.074 325.718 397.824 324.857 cv
397.574 323.997 397.138 323.374 396.513 322.99 cv
395.785 322.542 395.026 322.447 394.235 322.704 cv
393.716 322.875 392.884 323.353 391.737 324.134 cv
389.888 325.388 li
388.054 326.633 386.54 327.375 385.348 327.613 cv
384.155 327.85 383.001 327.626 381.887 326.941 cv
380.7 326.211 379.881 325.063 379.428 323.496 cv
378.976 321.928 379.343 320.179 380.53 318.248 cv
381.135 317.265 381.854 316.398 382.688 315.645 cv
383.521 314.893 383.978 314.452 384.058 314.322 cv
384.239 314.026 384.288 313.774 384.203 313.566 cv
384.119 313.358 383.972 313.141 383.761 312.917 cv
384.251 312.121 li
389.541 315.375 li
389.083 316.118 li
387.639 315.721 386.196 315.7 384.757 316.055 cv
383.317 316.411 382.202 317.232 381.41 318.519 cv
380.854 319.424 380.637 320.277 380.76 321.078 cv
380.883 321.879 381.265 322.476 381.905 322.871 cv
382.673 323.342 383.397 323.447 384.083 323.184 cv
384.77 322.936 386.005 322.204 387.789 320.986 cv
389.926 319.532 li
390.88 318.883 391.766 318.446 392.582 318.216 cv
394.109 317.789 395.529 317.979 396.842 318.787 cv
398.067 319.541 398.896 320.785 399.328 322.518 cv
399.76 324.253 399.253 326.294 397.809 328.642 cv
397.478 329.182 397.096 329.7 396.665 330.196 cv
396.234 330.692 395.759 331.152 395.237 331.574 cv
394.738 331.987 li
394.632 332.089 394.534 332.191 394.444 332.292 cv
394.355 332.393 394.286 332.482 394.238 332.56 cv
394.067 332.838 394.022 333.075 394.104 333.269 cv
394.187 333.463 394.338 333.682 394.559 333.926 cv
394.085 334.696 li
cp
@
411.815 300.78 mo
404.086 317.405 li
403.429 317.1 li
403.782 316.273 403.95 315.648 403.934 315.223 cv
403.909 314.57 403.527 314.071 402.786 313.727 cv
390.273 307.909 li
389.516 307.556 388.88 307.593 388.364 308.018 cv
388.058 308.258 387.692 308.781 387.267 309.585 cv
386.61 309.28 li
394.23 292.89 li
399.445 295.315 li
399.122 296.009 li
397.288 295.596 395.862 295.679 394.845 296.259 cv
393.828 296.839 392.788 298.273 391.725 300.56 cv
391.319 301.43 391.145 302.022 391.199 302.334 cv
391.253 302.647 391.524 302.917 392.013 303.143 cv
397.998 305.926 li
398.769 304.314 399.011 303.092 398.727 302.261 cv
398.442 301.431 397.639 300.522 396.315 299.536 cv
396.651 298.814 li
405.39 302.875 li
405.054 303.598 li
403.485 303.118 402.256 303.049 401.363 303.394 cv
400.471 303.74 399.647 304.722 398.895 306.342 cv
405.157 309.254 li
405.704 309.509 406.149 309.527 406.491 309.309 cv
406.833 309.091 407.228 308.5 407.676 307.537 cv
408.52 305.722 408.889 304.092 408.782 302.646 cv
408.677 301.201 407.951 299.625 406.604 297.917 cv
406.973 297.125 li
411.815 300.78 li
cp
f
411.815 300.78 mo
404.086 317.405 li
403.429 317.1 li
403.782 316.273 403.95 315.648 403.934 315.223 cv
403.909 314.57 403.527 314.071 402.786 313.727 cv
390.273 307.909 li
389.516 307.556 388.88 307.593 388.364 308.018 cv
388.058 308.258 387.692 308.781 387.267 309.585 cv
386.61 309.28 li
394.23 292.89 li
399.445 295.315 li
399.122 296.009 li
397.288 295.596 395.862 295.679 394.845 296.259 cv
393.828 296.839 392.788 298.273 391.725 300.56 cv
391.319 301.43 391.145 302.022 391.199 302.334 cv
391.253 302.647 391.524 302.917 392.013 303.143 cv
397.998 305.926 li
398.769 304.314 399.011 303.092 398.727 302.261 cv
398.442 301.431 397.639 300.522 396.315 299.536 cv
396.651 298.814 li
405.39 302.875 li
405.054 303.598 li
403.485 303.118 402.256 303.049 401.363 303.394 cv
400.471 303.74 399.647 304.722 398.895 306.342 cv
405.157 309.254 li
405.704 309.509 406.149 309.527 406.491 309.309 cv
406.833 309.091 407.228 308.5 407.676 307.537 cv
408.52 305.722 408.889 304.092 408.782 302.646 cv
408.677 301.201 407.951 299.625 406.604 297.917 cv
406.973 297.125 li
411.815 300.78 li
cp
@
395.693 289.617 mo
398.832 279.605 li
399.522 279.821 li
399.252 280.871 399.115 281.555 399.112 281.875 cv
399.109 282.196 399.25 282.4 399.532 282.489 cv
399.657 282.528 399.8 282.543 399.963 282.536 cv
400.126 282.528 400.429 282.487 400.87 282.411 cv
408.581 280.718 li
408.659 280.47 li
404.884 275.755 li
404.655 275.458 404.364 275.132 404.009 274.774 cv
403.469 274.231 403.044 273.911 402.734 273.813 cv
402.256 273.664 401.871 273.773 401.581 274.141 cv
401.386 274.391 401.106 274.988 400.741 275.933 cv
400.051 275.717 li
402.112 269.139 li
402.804 269.356 li
402.733 269.859 402.707 270.268 402.726 270.583 cv
402.78 270.998 402.942 271.379 403.212 271.731 cv
409.884 280.1 li
414.894 281.67 li
415.93 281.995 416.657 282.009 417.076 281.712 cv
417.495 281.417 417.886 280.736 418.248 279.672 cv
418.939 279.888 li
415.682 290.281 li
414.99 290.064 li
415.313 288.945 415.371 288.153 415.166 287.687 cv
414.962 287.222 414.364 286.833 413.372 286.523 cv
409.372 285.269 li
398.624 287.903 li
397.917 288.078 397.361 288.39 396.958 288.841 cv
396.697 289.145 396.506 289.475 396.384 289.833 cv
395.693 289.617 li
cp
f
395.693 289.617 mo
398.832 279.605 li
399.522 279.821 li
399.252 280.871 399.115 281.555 399.112 281.875 cv
399.109 282.196 399.25 282.4 399.532 282.489 cv
399.657 282.528 399.8 282.543 399.963 282.536 cv
400.126 282.528 400.429 282.487 400.87 282.411 cv
408.581 280.718 li
408.659 280.47 li
404.884 275.755 li
404.655 275.458 404.364 275.132 404.009 274.774 cv
403.469 274.231 403.044 273.911 402.734 273.813 cv
402.256 273.664 401.871 273.773 401.581 274.141 cv
401.386 274.391 401.106 274.988 400.741 275.933 cv
400.051 275.717 li
402.112 269.139 li
402.804 269.356 li
402.733 269.859 402.707 270.268 402.726 270.583 cv
402.78 270.998 402.942 271.379 403.212 271.731 cv
409.884 280.1 li
414.894 281.67 li
415.93 281.995 416.657 282.009 417.076 281.712 cv
417.495 281.417 417.886 280.736 418.248 279.672 cv
418.939 279.888 li
415.682 290.281 li
414.99 290.064 li
415.313 288.945 415.371 288.153 415.166 287.687 cv
414.962 287.222 414.364 286.833 413.372 286.523 cv
409.372 285.269 li
398.624 287.903 li
397.917 288.078 397.361 288.39 396.958 288.841 cv
396.697 289.145 396.506 289.475 396.384 289.833 cv
395.693 289.617 li
cp
@
230.261 358.911 mo
285.082 358.911 329.526 314.465 329.526 259.644 cv
329.526 204.822 285.082 160.378 230.261 160.378 cv
175.438 160.378 130.995 204.822 130.995 259.644 cv
130.995 314.465 175.438 358.911 230.261 358.911 cv
cp
/0 
<<
/Name (Pantone 292U)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .5 .2 3.1e-05 3.1e-05 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
2 lw
230.261 358.911 mo
285.082 358.911 329.526 314.465 329.526 259.644 cv
329.526 204.822 285.082 160.378 230.261 160.378 cv
175.438 160.378 130.995 204.822 130.995 259.644 cv
130.995 314.465 175.438 358.911 230.261 358.911 cv
cp
0 0 0 1 cmyk
@
231.838 358.752 mo
353.818 315.114 319.644 178.936 230.785 159.483 cv
@
229.735 159.483 mo
140.877 178.936 106.703 315.114 228.683 358.752 cv
@
230.785 159.483 mo
179.786 181.04 150.342 313.536 230.261 358.752 cv
@
230.261 358.752 mo
310.178 313.536 280.735 181.04 229.735 159.483 cv
230.261 358.752 li
cp
@
303.869 194.71 mo
274.952 218.37 205.023 227.309 147.712 205.226 cv
@
.3943 lw
306.499 322.474 mo
277.581 298.815 202.919 290.336 145.61 312.419 cv
@
2 lw
130.92 259.38 mo
329.14 259.38 li
@
184.517 138.189 mo
179.786 122.415 197.136 113.74 203.446 106.641 cv
213.698 99.5439 213.698 85.3481 213.698 85.3481 cv
223.163 101.91 228.683 121.627 223.163 135.822 cv
220.007 138.978 li
209.754 131.091 li
201.567 139.581 li
189.737 134.06 li
184.517 138.189 li
cp
/1 
<<
/Name (Pantone 032U)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .9 0 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
184.517 138.189 mo
179.786 122.415 197.136 113.74 203.446 106.641 cv
213.698 99.5439 213.698 85.3481 213.698 85.3481 cv
223.163 101.91 228.683 121.627 223.163 135.822 cv
220.007 138.978 li
209.754 131.091 li
201.567 139.581 li
189.737 134.06 li
184.517 138.189 li
cp
0 0 0 1 cmyk
@
216.853 90.8691 mo
220.796 82.1934 228.683 76.6729 232.627 71.1523 cv
231.838 81.4043 238.147 90.0801 238.147 90.0801 cv
246.822 111.374 246.033 126.358 237.357 137.4 cv
230.261 131.091 li
223.163 135.822 li
227.636 119.927 224.74 107.43 216.853 90.8691 cv
cp
/2 
<<
/Name (Pantone 144U)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 .5 1 0 ] 
>>
/CSD add_res
1 /2 /CSD get_res sepcs
1 sep
f
216.853 90.8691 mo
220.796 82.1934 228.683 76.6729 232.627 71.1523 cv
231.838 81.4043 238.147 90.0801 238.147 90.0801 cv
246.822 111.374 246.033 126.358 237.357 137.4 cv
230.261 131.091 li
223.163 135.822 li
227.636 119.927 224.74 107.43 216.853 90.8691 cv
cp
0 0 0 1 cmyk
@
235.781 85.3481 mo
253.131 94.0234 264.961 107.43 256.286 137.4 cv
249.977 131.091 li
239.724 138.978 li
237.357 137.4 li
247.61 122.415 246.166 110.888 235.781 85.3481 cv
cp
1 /1 /CSD get_res sepcs
1 sep
f
235.781 85.3481 mo
253.131 94.0234 264.961 107.43 256.286 137.4 cv
249.977 131.091 li
239.724 138.978 li
237.357 137.4 li
247.61 122.415 246.166 110.888 235.781 85.3481 cv
cp
0 0 0 1 cmyk
@
257.074 106.641 mo
272.061 110.586 278.368 127.147 276.004 139.767 cv
270.482 133.457 li
258.821 141.018 li
256.286 137.4 li
261.019 125.57 259.441 113.74 257.074 106.641 cv
cp
1 /2 /CSD get_res sepcs
1 sep
f
257.074 106.641 mo
272.061 110.586 278.368 127.147 276.004 139.767 cv
270.482 133.457 li
258.821 141.018 li
256.286 137.4 li
261.019 125.57 259.441 113.74 257.074 106.641 cv
cp
0 0 0 1 cmyk
@
201.869 195.761 mo
216.853 192.607 247.61 192.607 257.864 195.761 cv
264.174 198.916 262.596 202.071 255.498 202.071 cv
242.091 201.282 216.064 198.916 205.812 202.071 cv
198.713 204.438 196.348 198.128 201.869 195.761 cv
cp
f
229.735 371.574 mo
238.357 371.574 245.349 367.246 245.349 361.908 cv
245.349 356.57 238.357 352.241 229.735 352.241 cv
221.111 352.241 214.12 356.57 214.12 361.908 cv
214.12 367.246 221.111 371.574 229.735 371.574 cv
cp
/3 
<<
/Name (Pantone 110U)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 .1 1 .15 ] 
>>
/CSD add_res
1 /3 /CSD get_res sepcs
1 sep
f
229.735 371.574 mo
238.357 371.574 245.349 367.246 245.349 361.908 cv
245.349 356.57 238.357 352.241 229.735 352.241 cv
221.111 352.241 214.12 356.57 214.12 361.908 cv
214.12 367.246 221.111 371.574 229.735 371.574 cv
cp
0 0 0 1 cmyk
@
64.9912 179.516 mo
65.4771 179.4 65.8179 179.006 66.0132 178.332 cv
66.4111 176.958 66.3154 175.885 65.7256 175.113 cv
65.1357 174.341 64.1475 173.754 62.7607 173.353 cv
60.6904 172.753 59.1362 172.965 58.0977 173.989 cv
57.4658 174.607 56.936 175.714 56.5093 177.306 cv
63.8003 179.418 li
64.3154 179.557 64.7129 179.59 64.9912 179.516 cv
cp
55.7979 173.16 mo
55.3901 172.373 54.4385 171.763 52.9419 171.329 cv
51.8345 171.008 50.8438 170.939 49.9692 171.124 cv
49.0947 171.309 48.4912 171.976 48.1582 173.125 cv
47.9819 173.733 47.9609 174.186 48.0962 174.482 cv
48.2305 174.778 48.5625 175.004 49.0933 175.157 cv
55.6255 177.05 li
56.1484 175.244 56.2056 173.948 55.7979 173.16 cv
cp
63.6563 187.177 mo
63.8555 186.383 63.915 185.789 63.833 185.396 cv
63.6958 184.729 63.2007 184.272 62.3457 184.025 cv
48.2529 179.943 li
47.4043 179.697 46.7554 179.802 46.3066 180.257 cv
46.0337 180.526 45.752 181.076 45.4604 181.905 cv
44.7188 181.69 li
47.3247 172.695 li
47.8267 170.963 48.4429 169.579 49.1729 168.549 cv
50.5469 166.605 52.2236 165.92 54.2026 166.494 cv
55.4058 166.843 56.2329 167.558 56.6841 168.639 cv
57.1357 169.72 57.3081 170.8 57.2012 171.878 cv
57.4712 171.957 li
57.9932 170.938 58.6157 170.101 59.3394 169.447 cv
60.7578 168.174 62.3296 167.787 64.0562 168.287 cv
65.6685 168.755 66.7593 169.878 67.3296 171.654 cv
67.8994 173.432 67.8267 175.556 67.1104 178.028 cv
64.3979 187.392 li
63.6563 187.177 li
cp
0 0 0 0 cmyk
f
1.01 lw
64.9912 179.516 mo
65.4771 179.4 65.8179 179.006 66.0132 178.332 cv
66.4111 176.958 66.3154 175.885 65.7256 175.113 cv
65.1357 174.341 64.1475 173.754 62.7607 173.353 cv
60.6904 172.753 59.1362 172.965 58.0977 173.989 cv
57.4658 174.607 56.936 175.714 56.5093 177.306 cv
63.8003 179.418 li
64.3154 179.557 64.7129 179.59 64.9912 179.516 cv
cp
55.7979 173.16 mo
55.3901 172.373 54.4385 171.763 52.9419 171.329 cv
51.8345 171.008 50.8438 170.939 49.9692 171.124 cv
49.0947 171.309 48.4912 171.976 48.1582 173.125 cv
47.9819 173.733 47.9609 174.186 48.0962 174.482 cv
48.2305 174.778 48.5625 175.004 49.0933 175.157 cv
55.6255 177.05 li
56.1484 175.244 56.2056 173.948 55.7979 173.16 cv
cp
63.6563 187.177 mo
63.8555 186.383 63.915 185.789 63.833 185.396 cv
63.6958 184.729 63.2007 184.272 62.3457 184.025 cv
48.2529 179.943 li
47.4043 179.697 46.7554 179.802 46.3066 180.257 cv
46.0337 180.526 45.752 181.076 45.4604 181.905 cv
44.7188 181.69 li
47.3247 172.695 li
47.8267 170.963 48.4429 169.579 49.1729 168.549 cv
50.5469 166.605 52.2236 165.92 54.2026 166.494 cv
55.4058 166.843 56.2329 167.558 56.6841 168.639 cv
57.1357 169.72 57.3081 170.8 57.2012 171.878 cv
57.4712 171.957 li
57.9932 170.938 58.6157 170.101 59.3394 169.447 cv
60.7578 168.174 62.3296 167.787 64.0562 168.287 cv
65.6685 168.755 66.7593 169.878 67.3296 171.654 cv
67.8994 173.432 67.8267 175.556 67.1104 178.028 cv
64.3979 187.392 li
63.6563 187.177 li
cp
@
70.0811 167.988 mo
69.3706 167.688 li
69.6812 166.879 69.812 166.266 69.7637 165.85 cv
69.6929 165.209 69.2583 164.721 68.4609 164.384 cv
54.9365 158.67 li
54.1265 158.327 53.4692 158.365 52.9639 158.783 cv
52.6631 159.02 52.3188 159.532 51.9326 160.321 cv
51.2222 160.021 li
58.0166 143.939 li
63.6504 146.32 li
63.3643 146.999 li
61.4155 146.593 59.9307 146.676 58.9082 147.245 cv
57.8862 147.815 56.9004 149.223 55.9517 151.468 cv
55.5908 152.323 55.4502 152.903 55.5293 153.21 cv
55.6079 153.517 55.9111 153.782 56.438 154.003 cv
62.8965 156.732 li
63.5874 155.148 63.7549 153.949 63.3989 153.135 cv
63.0439 152.32 62.1416 151.43 60.6914 150.463 cv
60.9912 149.753 li
70.397 153.727 li
70.0972 154.437 li
68.4263 153.967 67.1372 153.902 66.2295 154.242 cv
65.3218 154.582 64.5317 155.548 63.8594 157.139 cv
70.6182 159.995 li
71.209 160.245 71.6748 160.263 72.0171 160.048 cv
72.3589 159.834 72.7295 159.255 73.1294 158.31 cv
73.8818 156.528 74.1499 154.929 73.9351 153.51 cv
73.7202 152.092 72.8467 150.545 71.3149 148.87 cv
71.6416 148.096 li
76.9688 151.687 li
70.0811 167.988 li
cp
f
70.0811 167.988 mo
69.3706 167.688 li
69.6812 166.879 69.812 166.266 69.7637 165.85 cv
69.6929 165.209 69.2583 164.721 68.4609 164.384 cv
54.9365 158.67 li
54.1265 158.327 53.4692 158.365 52.9639 158.783 cv
52.6631 159.02 52.3188 159.532 51.9326 160.321 cv
51.2222 160.021 li
58.0166 143.939 li
63.6504 146.32 li
63.3643 146.999 li
61.4155 146.593 59.9307 146.676 58.9082 147.245 cv
57.8862 147.815 56.9004 149.223 55.9517 151.468 cv
55.5908 152.323 55.4502 152.903 55.5293 153.21 cv
55.6079 153.517 55.9111 153.782 56.438 154.003 cv
62.8965 156.732 li
63.5874 155.148 63.7549 153.949 63.3989 153.135 cv
63.0439 152.32 62.1416 151.43 60.6914 150.463 cv
60.9912 149.753 li
70.397 153.727 li
70.0972 154.437 li
68.4263 153.967 67.1372 153.902 66.2295 154.242 cv
65.3218 154.582 64.5317 155.548 63.8594 157.139 cv
70.6182 159.995 li
71.209 160.245 71.6748 160.263 72.0171 160.048 cv
72.3589 159.834 72.7295 159.255 73.1294 158.31 cv
73.8818 156.528 74.1499 154.929 73.9351 153.51 cv
73.7202 152.092 72.8467 150.545 71.3149 148.87 cv
71.6416 148.096 li
76.9688 151.687 li
70.0811 167.988 li
cp
@
74.0771 133.485 mo
74.0449 132.482 73.1992 131.503 71.54 130.549 cv
70.5234 129.964 69.6377 129.642 68.8848 129.585 cv
67.605 129.497 66.5928 130.099 65.8496 131.39 cv
65.4463 132.091 65.2695 132.601 65.3193 132.92 cv
65.3691 133.239 65.5952 133.514 65.9971 133.745 cv
72.6797 137.59 li
73.6431 135.856 74.1084 134.488 74.0771 133.485 cv
cp
77.2988 148.984 mo
77.7671 148.073 77.9482 147.371 77.8438 146.879 cv
77.7397 146.388 77.2007 145.861 76.2251 145.3 cv
64.5942 138.61 li
63.5825 138.027 62.813 137.84 62.2861 138.048 cv
61.9346 138.187 61.4629 138.682 60.8706 139.534 cv
60.208 139.152 li
65.0684 130.703 li
66.0767 128.951 67.0767 127.638 68.0688 126.764 cv
70.0229 125.089 71.9663 124.808 73.8989 125.92 cv
75.3276 126.741 76.1353 127.939 76.3228 129.512 cv
76.4546 130.708 76.3359 131.825 75.9658 132.863 cv
86.6558 131.576 li
86.9448 131.548 87.1685 131.471 87.3267 131.344 cv
87.4854 131.217 87.6421 131.038 87.7979 130.807 cv
88.4292 131.17 li
85.2739 136.655 li
73.5396 138.066 li
73.5322 138.08 li
78.6768 141.039 li
79.6006 141.571 80.3105 141.775 80.8081 141.653 cv
81.3057 141.529 81.8364 141.018 82.4009 140.116 cv
83.0635 140.497 li
77.9619 149.366 li
77.2988 148.984 li
cp
f
74.0771 133.485 mo
74.0449 132.482 73.1992 131.503 71.54 130.549 cv
70.5234 129.964 69.6377 129.642 68.8848 129.585 cv
67.605 129.497 66.5928 130.099 65.8496 131.39 cv
65.4463 132.091 65.2695 132.601 65.3193 132.92 cv
65.3691 133.239 65.5952 133.514 65.9971 133.745 cv
72.6797 137.59 li
73.6431 135.856 74.1084 134.488 74.0771 133.485 cv
cp
77.2988 148.984 mo
77.7671 148.073 77.9482 147.371 77.8438 146.879 cv
77.7397 146.388 77.2007 145.861 76.2251 145.3 cv
64.5942 138.61 li
63.5825 138.027 62.813 137.84 62.2861 138.048 cv
61.9346 138.187 61.4629 138.682 60.8706 139.534 cv
60.208 139.152 li
65.0684 130.703 li
66.0767 128.951 67.0767 127.638 68.0688 126.764 cv
70.0229 125.089 71.9663 124.808 73.8989 125.92 cv
75.3276 126.741 76.1353 127.939 76.3228 129.512 cv
76.4546 130.708 76.3359 131.825 75.9658 132.863 cv
86.6558 131.576 li
86.9448 131.548 87.1685 131.471 87.3267 131.344 cv
87.4854 131.217 87.6421 131.038 87.7979 130.807 cv
88.4292 131.17 li
85.2739 136.655 li
73.5396 138.066 li
73.5322 138.08 li
78.6768 141.039 li
79.6006 141.571 80.3105 141.775 80.8081 141.653 cv
81.3057 141.529 81.8364 141.018 82.4009 140.116 cv
83.0635 140.497 li
77.9619 149.366 li
77.2988 148.984 li
cp
@
77.0347 116.806 mo
76.5742 113.918 77.2954 111.232 79.1973 108.749 cv
79.9585 107.753 80.9043 106.906 82.0337 106.205 cv
83.1631 105.504 83.8208 105.031 84.0068 104.789 cv
84.2051 104.53 84.2725 104.253 84.2104 103.957 cv
84.1484 103.66 83.9702 103.319 83.6758 102.932 cv
84.1841 102.269 li
89.8179 106.584 li
89.3462 107.199 li
87.6797 106.842 86.2622 106.695 85.0952 106.757 cv
82.9302 106.889 81.3018 107.667 80.21 109.093 cv
79.0225 110.644 78.8296 112.292 79.6313 114.037 cv
80.4341 115.781 82.0576 117.59 84.5024 119.462 cv
86.5088 120.999 88.5513 122.038 90.6294 122.578 cv
92.7085 123.119 94.4741 122.439 95.9282 120.542 cv
96.7153 119.514 97.0269 118.658 96.8647 117.974 cv
96.7769 117.583 96.4854 117.198 95.9893 116.818 cv
93.4395 114.866 li
92.7168 114.312 92.0708 114.171 91.5034 114.444 cv
91.1416 114.627 90.6147 115.154 89.9214 116.027 cv
89.3062 115.556 li
95.6143 107.317 li
96.23 107.789 li
95.6274 108.641 95.373 109.318 95.4673 109.818 cv
95.562 110.318 96.0239 110.886 96.853 111.521 cv
99.9297 113.876 li
99.8516 114.662 99.522 115.776 98.9399 117.219 cv
98.3579 118.662 97.5034 120.119 96.376 121.592 cv
94.3301 124.262 91.8535 125.751 88.9458 126.06 cv
86.2314 126.341 83.688 125.574 81.3135 123.756 cv
78.917 121.92 77.4902 119.604 77.0347 116.806 cv
cp
f
77.0347 116.806 mo
76.5742 113.918 77.2954 111.232 79.1973 108.749 cv
79.9585 107.753 80.9043 106.906 82.0337 106.205 cv
83.1631 105.504 83.8208 105.031 84.0068 104.789 cv
84.2051 104.53 84.2725 104.253 84.2104 103.957 cv
84.1484 103.66 83.9702 103.319 83.6758 102.932 cv
84.1841 102.269 li
89.8179 106.584 li
89.3462 107.199 li
87.6797 106.842 86.2622 106.695 85.0952 106.757 cv
82.9302 106.889 81.3018 107.667 80.21 109.093 cv
79.0225 110.644 78.8296 112.292 79.6313 114.037 cv
80.4341 115.781 82.0576 117.59 84.5024 119.462 cv
86.5088 120.999 88.5513 122.038 90.6294 122.578 cv
92.7085 123.119 94.4741 122.439 95.9282 120.542 cv
96.7153 119.514 97.0269 118.658 96.8647 117.974 cv
96.7769 117.583 96.4854 117.198 95.9893 116.818 cv
93.4395 114.866 li
92.7168 114.312 92.0708 114.171 91.5034 114.444 cv
91.1416 114.627 90.6147 115.154 89.9214 116.027 cv
89.3062 115.556 li
95.6143 107.317 li
96.23 107.789 li
95.6274 108.641 95.373 109.318 95.4673 109.818 cv
95.562 110.318 96.0239 110.886 96.853 111.521 cv
99.9297 113.876 li
99.8516 114.662 99.522 115.776 98.9399 117.219 cv
98.3579 118.662 97.5034 120.119 96.376 121.592 cv
94.3301 124.262 91.8535 125.751 88.9458 126.06 cv
86.2314 126.341 83.688 125.574 81.3135 123.756 cv
78.917 121.92 77.4902 119.604 77.0347 116.806 cv
cp
@
103.369 111.755 mo
102.817 111.209 li
103.403 110.574 103.751 110.053 103.86 109.648 cv
104.029 109.028 103.806 108.413 103.188 107.803 cv
92.7573 97.4946 li
92.1299 96.8755 91.5044 96.665 90.8809 96.8647 cv
90.5137 96.9722 90.0054 97.3193 89.3555 97.9077 cv
88.8027 97.3618 li
101.075 84.9419 li
105.415 89.2305 li
104.877 89.7749 li
103.22 88.6782 101.813 88.2041 100.655 88.3535 cv
99.4956 88.5034 98.0615 89.4434 96.3516 91.1738 cv
95.7012 91.832 95.356 92.3184 95.3164 92.6328 cv
95.2773 92.9468 95.4604 93.3047 95.8682 93.7065 cv
100.859 98.6392 li
102.093 97.4189 102.695 96.3633 102.667 95.4722 cv
102.641 94.5811 102.132 93.4165 101.141 91.9775 cv
101.679 91.4331 li
108.954 98.6221 li
108.416 99.1665 li
107.035 98.1089 105.858 97.5703 104.887 97.5503 cv
103.916 97.5313 102.82 98.1377 101.601 99.3716 cv
106.828 104.537 li
107.284 104.988 107.711 105.177 108.109 105.105 cv
108.507 105.033 109.067 104.631 109.789 103.9 cv
111.15 102.523 111.995 101.134 112.322 99.7358 cv
112.65 98.3364 112.413 96.5747 111.612 94.4492 cv
112.205 93.8491 li
115.828 99.146 li
103.369 111.755 li
cp
f
103.369 111.755 mo
102.817 111.209 li
103.403 110.574 103.751 110.053 103.86 109.648 cv
104.029 109.028 103.806 108.413 103.188 107.803 cv
92.7573 97.4946 li
92.1299 96.8755 91.5044 96.665 90.8809 96.8647 cv
90.5137 96.9722 90.0054 97.3193 89.3555 97.9077 cv
88.8027 97.3618 li
101.075 84.9419 li
105.415 89.2305 li
104.877 89.7749 li
103.22 88.6782 101.813 88.2041 100.655 88.3535 cv
99.4956 88.5034 98.0615 89.4434 96.3516 91.1738 cv
95.7012 91.832 95.356 92.3184 95.3164 92.6328 cv
95.2773 92.9468 95.4604 93.3047 95.8682 93.7065 cv
100.859 98.6392 li
102.093 97.4189 102.695 96.3633 102.667 95.4722 cv
102.641 94.5811 102.132 93.4165 101.141 91.9775 cv
101.679 91.4331 li
108.954 98.6221 li
108.416 99.1665 li
107.035 98.1089 105.858 97.5703 104.887 97.5503 cv
103.916 97.5313 102.82 98.1377 101.601 99.3716 cv
106.828 104.537 li
107.284 104.988 107.711 105.177 108.109 105.105 cv
108.507 105.033 109.067 104.631 109.789 103.9 cv
111.15 102.523 111.995 101.134 112.322 99.7358 cv
112.65 98.3364 112.413 96.5747 111.612 94.4492 cv
112.205 93.8491 li
115.828 99.146 li
103.369 111.755 li
cp
@
117.139 96.7554 mo
118 96.0356 118.434 95.4175 118.44 94.9019 cv
118.446 94.3867 118.207 93.8228 117.722 93.2109 cv
108.805 81.96 li
107.437 81.7222 106.611 81.5991 106.328 81.5903 cv
106.045 81.582 105.741 81.6743 105.417 81.8677 cv
104.942 81.2681 li
109.969 77.2852 li
125.998 80.7441 li
126.113 80.6519 li
120.584 73.6758 li
119.945 72.8687 119.342 72.4087 118.776 72.2949 cv
118.21 72.1816 117.46 72.437 116.528 73.063 cv
116.052 72.4634 li
121.149 68.4238 li
121.625 69.0234 li
120.982 69.7324 120.618 70.291 120.532 70.6973 cv
120.446 71.104 120.69 71.6694 121.264 72.3926 cv
132.357 86.3906 li
131.694 86.916 li
111.186 82.4907 li
111.023 82.6196 li
118.401 91.9277 li
118.981 92.6606 119.494 93.0996 119.937 93.2437 cv
120.644 93.4834 121.504 93.2324 122.521 92.4907 cv
122.996 93.0903 li
117.615 97.355 li
117.139 96.7554 li
cp
f
117.139 96.7554 mo
118 96.0356 118.434 95.4175 118.44 94.9019 cv
118.446 94.3867 118.207 93.8228 117.722 93.2109 cv
108.805 81.96 li
107.437 81.7222 106.611 81.5991 106.328 81.5903 cv
106.045 81.582 105.741 81.6743 105.417 81.8677 cv
104.942 81.2681 li
109.969 77.2852 li
125.998 80.7441 li
126.113 80.6519 li
120.584 73.6758 li
119.945 72.8687 119.342 72.4087 118.776 72.2949 cv
118.21 72.1816 117.46 72.437 116.528 73.063 cv
116.052 72.4634 li
121.149 68.4238 li
121.625 69.0234 li
120.982 69.7324 120.618 70.291 120.532 70.6973 cv
120.446 71.104 120.69 71.6694 121.264 72.3926 cv
132.357 86.3906 li
131.694 86.916 li
111.186 82.4907 li
111.023 82.6196 li
118.401 91.9277 li
118.981 92.6606 119.494 93.0996 119.937 93.2437 cv
120.644 93.4834 121.504 93.2324 122.521 92.4907 cv
122.996 93.0903 li
117.615 97.355 li
117.139 96.7554 li
cp
@
144.692 54.7305 mo
146.049 54.522 146.792 54.3823 146.922 54.3115 cv
147.26 54.127 147.46 53.8501 147.522 53.4814 cv
147.584 53.1123 147.563 52.772 147.461 52.46 cv
148.202 52.0547 li
151.599 58.2725 li
150.92 58.6436 li
149.543 57.6421 148.309 56.9341 147.218 56.5176 cv
145.189 55.7603 143.388 55.811 141.816 56.6694 cv
140.036 57.6421 139.191 59.1001 139.283 61.0435 cv
139.374 62.9873 140.125 65.252 141.538 67.8379 cv
142.578 69.7417 143.653 71.1865 144.765 72.1738 cv
146.843 74.0259 148.997 74.3428 151.228 73.1245 cv
152.594 72.3784 153.657 71.3037 154.417 69.9004 cv
154.851 69.0908 155.261 67.9512 155.648 66.4819 cv
156.797 66.7026 li
156.39 68.4268 155.935 69.7622 155.431 70.71 cv
154.534 72.3994 153.229 73.7124 151.516 74.6475 cv
148.894 76.0796 146.271 76.5015 143.646 75.9131 cv
140.743 75.2646 138.495 73.4824 136.903 70.5669 cv
135.325 67.6782 134.985 64.8257 135.884 62.0098 cv
136.731 59.3682 138.436 57.3481 140.996 55.9497 cv
142.103 55.3452 143.335 54.9385 144.692 54.7305 cv
cp
f
144.692 54.7305 mo
146.049 54.522 146.792 54.3823 146.922 54.3115 cv
147.26 54.127 147.46 53.8501 147.522 53.4814 cv
147.584 53.1123 147.563 52.772 147.461 52.46 cv
148.202 52.0547 li
151.599 58.2725 li
150.92 58.6436 li
149.543 57.6421 148.309 56.9341 147.218 56.5176 cv
145.189 55.7603 143.388 55.811 141.816 56.6694 cv
140.036 57.6421 139.191 59.1001 139.283 61.0435 cv
139.374 62.9873 140.125 65.252 141.538 67.8379 cv
142.578 69.7417 143.653 71.1865 144.765 72.1738 cv
146.843 74.0259 148.997 74.3428 151.228 73.1245 cv
152.594 72.3784 153.657 71.3037 154.417 69.9004 cv
154.851 69.0908 155.261 67.9512 155.648 66.4819 cv
156.797 66.7026 li
156.39 68.4268 155.935 69.7622 155.431 70.71 cv
154.534 72.3994 153.229 73.7124 151.516 74.6475 cv
148.894 76.0796 146.271 76.5015 143.646 75.9131 cv
140.743 75.2646 138.495 73.4824 136.903 70.5669 cv
135.325 67.6782 134.985 64.8257 135.884 62.0098 cv
136.731 59.3682 138.436 57.3481 140.996 55.9497 cv
142.103 55.3452 143.335 54.9385 144.692 54.7305 cv
cp
@
173.683 59.251 mo
173.582 57.7241 173.109 55.8647 172.266 53.6724 cv
171.105 50.6602 169.781 48.562 168.293 47.3794 cv
166.804 46.1968 165.289 45.9023 163.748 46.4956 cv
161.606 47.3203 160.63 49.1606 160.819 52.0181 cv
160.925 53.5322 161.396 55.3716 162.229 57.5366 cv
163.076 59.7383 163.973 61.4341 164.919 62.6245 cv
166.672 64.8374 168.618 65.5317 170.76 64.707 cv
172.883 63.8901 173.857 62.0708 173.683 59.251 cv
cp
171.563 45.5703 mo
174.232 46.71 176.14 48.7661 177.284 51.7402 cv
178.429 54.7134 178.394 57.5176 177.178 60.1523 cv
175.991 62.7236 173.976 64.5562 171.132 65.6514 cv
168.112 66.814 165.262 66.7539 162.581 65.4712 cv
160.074 64.2588 158.304 62.3086 157.269 59.6206 cv
156.128 56.6563 156.12 53.8638 157.245 51.2417 cv
158.379 48.5859 160.427 46.687 163.391 45.5459 cv
166.243 44.4478 168.968 44.4561 171.563 45.5703 cv
cp
f
173.683 59.251 mo
173.582 57.7241 173.109 55.8647 172.266 53.6724 cv
171.105 50.6602 169.781 48.562 168.293 47.3794 cv
166.804 46.1968 165.289 45.9023 163.748 46.4956 cv
161.606 47.3203 160.63 49.1606 160.819 52.0181 cv
160.925 53.5322 161.396 55.3716 162.229 57.5366 cv
163.076 59.7383 163.973 61.4341 164.919 62.6245 cv
166.672 64.8374 168.618 65.5317 170.76 64.707 cv
172.883 63.8901 173.857 62.0708 173.683 59.251 cv
cp
171.563 45.5703 mo
174.232 46.71 176.14 48.7661 177.284 51.7402 cv
178.429 54.7134 178.394 57.5176 177.178 60.1523 cv
175.991 62.7236 173.976 64.5562 171.132 65.6514 cv
168.112 66.814 165.262 66.7539 162.581 65.4712 cv
160.074 64.2588 158.304 62.3086 157.269 59.6206 cv
156.128 56.6563 156.12 53.8638 157.245 51.2417 cv
158.379 48.5859 160.427 46.687 163.391 45.5459 cv
166.243 44.4478 168.968 44.4561 171.563 45.5703 cv
cp
@
187.616 38.4771 mo
187.794 39.2188 li
186.664 39.5298 185.945 39.8892 185.639 40.2964 cv
185.331 40.7041 185.313 41.4722 185.583 42.6011 cv
187.947 52.4736 li
188.307 53.9731 188.762 55.0884 189.313 55.8198 cv
190.318 57.1846 191.733 57.6479 193.557 57.2109 cv
195.82 56.6689 197.15 55.4629 197.545 53.5928 cv
197.765 52.5659 197.677 51.2222 197.279 49.562 cv
195.121 40.5513 li
194.867 39.4907 194.499 38.8071 194.016 38.5005 cv
193.532 38.1938 192.716 38.1318 191.565 38.3149 cv
191.388 37.5732 li
197.858 36.0239 li
198.036 36.7656 li
197.139 37.1738 196.569 37.5464 196.33 37.8833 cv
196.091 38.2192 196.085 38.8633 196.313 39.8149 cv
198.57 49.2388 li
199.169 51.7422 199.028 53.8193 198.146 55.4702 cv
197.264 57.1226 195.527 58.2578 192.938 58.8779 cv
189.553 59.689 186.994 59.2305 185.263 57.5039 cv
184.344 56.5879 183.681 55.2798 183.273 53.5815 cv
180.912 43.7202 li
180.646 42.6094 180.333 41.9463 179.973 41.7295 cv
179.611 41.5122 178.904 41.4692 177.852 41.5996 cv
177.674 40.8579 li
187.616 38.4771 li
cp
f
187.616 38.4771 mo
187.794 39.2188 li
186.664 39.5298 185.945 39.8892 185.639 40.2964 cv
185.331 40.7041 185.313 41.4722 185.583 42.6011 cv
187.947 52.4736 li
188.307 53.9731 188.762 55.0884 189.313 55.8198 cv
190.318 57.1846 191.733 57.6479 193.557 57.2109 cv
195.82 56.6689 197.15 55.4629 197.545 53.5928 cv
197.765 52.5659 197.677 51.2222 197.279 49.562 cv
195.121 40.5513 li
194.867 39.4907 194.499 38.8071 194.016 38.5005 cv
193.532 38.1938 192.716 38.1318 191.565 38.3149 cv
191.388 37.5732 li
197.858 36.0239 li
198.036 36.7656 li
197.139 37.1738 196.569 37.5464 196.33 37.8833 cv
196.091 38.2192 196.085 38.8633 196.313 39.8149 cv
198.57 49.2388 li
199.169 51.7422 199.028 53.8193 198.146 55.4702 cv
197.264 57.1226 195.527 58.2578 192.938 58.8779 cv
189.553 59.689 186.994 59.2305 185.263 57.5039 cv
184.344 56.5879 183.681 55.2798 183.273 53.5815 cv
180.912 43.7202 li
180.646 42.6094 180.333 41.9463 179.973 41.7295 cv
179.611 41.5122 178.904 41.4692 177.852 41.5996 cv
177.674 40.8579 li
187.616 38.4771 li
cp
@
203.699 54.9741 mo
204.815 54.8237 205.514 54.5322 205.795 54.0996 cv
206.076 53.6675 206.175 53.0635 206.091 52.2886 cv
204.544 38.0083 li
203.511 37.0776 202.877 36.5337 202.641 36.375 cv
202.406 36.2173 202.1 36.1333 201.722 36.1245 cv
201.64 35.3672 li
208.027 34.6758 li
219.741 46.1299 li
219.888 46.1133 li
218.93 37.2778 li
218.819 36.2544 218.555 35.5435 218.137 35.1455 cv
217.72 34.7476 216.95 34.5649 215.83 34.5967 cv
215.748 33.8394 li
222.218 33.1377 li
222.3 33.8955 li
221.376 34.1533 220.769 34.4312 220.479 34.729 cv
220.188 35.0269 220.093 35.6343 220.192 36.5508 cv
222.116 54.3047 li
221.279 54.395 li
206.279 39.7266 li
206.073 39.749 li
207.354 51.561 li
207.454 52.4912 207.653 53.1353 207.95 53.4932 cv
208.42 54.0728 209.281 54.3198 210.532 54.2344 cv
210.615 54.9917 li
203.781 55.7314 li
203.699 54.9741 li
cp
f
203.699 54.9741 mo
204.815 54.8237 205.514 54.5322 205.795 54.0996 cv
206.076 53.6675 206.175 53.0635 206.091 52.2886 cv
204.544 38.0083 li
203.511 37.0776 202.877 36.5337 202.641 36.375 cv
202.406 36.2173 202.1 36.1333 201.722 36.1245 cv
201.64 35.3672 li
208.027 34.6758 li
219.741 46.1299 li
219.888 46.1133 li
218.93 37.2778 li
218.819 36.2544 218.555 35.5435 218.137 35.1455 cv
217.72 34.7476 216.95 34.5649 215.83 34.5967 cv
215.748 33.8394 li
222.218 33.1377 li
222.3 33.8955 li
221.376 34.1533 220.769 34.4312 220.479 34.729 cv
220.188 35.0269 220.093 35.6343 220.192 36.5508 cv
222.116 54.3047 li
221.279 54.395 li
206.279 39.7266 li
206.073 39.749 li
207.354 51.561 li
207.454 52.4912 207.653 53.1353 207.95 53.4932 cv
208.42 54.0728 209.281 54.3198 210.532 54.2344 cv
210.615 54.9917 li
203.781 55.7314 li
203.699 54.9741 li
cp
@
226.213 32.9722 mo
244.476 33.2686 li
244.407 39.3765 li
243.531 39.3623 li
243.279 37.1733 242.484 35.6826 241.145 34.8901 cv
240.392 34.4526 239.261 34.2021 237.751 34.1382 cv
237.492 50.1045 li
237.474 51.2207 237.656 51.9644 238.039 52.3359 cv
238.423 52.7075 239.229 52.9038 240.462 52.9238 cv
240.449 53.6929 li
229.639 53.5176 li
229.651 52.748 li
230.837 52.7671 231.629 52.5952 232.025 52.231 cv
232.422 51.8672 232.629 51.1323 232.647 50.0264 cv
232.906 34.0596 li
231.425 34.0747 230.287 34.2891 229.49 34.7012 cv
228.026 35.4688 227.183 36.9321 226.96 39.0933 cv
226.085 39.0796 li
226.213 32.9722 li
cp
f
226.213 32.9722 mo
244.476 33.2686 li
244.407 39.3765 li
243.531 39.3623 li
243.279 37.1733 242.484 35.6826 241.145 34.8901 cv
240.392 34.4526 239.261 34.2021 237.751 34.1382 cv
237.492 50.1045 li
237.474 51.2207 237.656 51.9644 238.039 52.3359 cv
238.423 52.7075 239.229 52.9038 240.462 52.9238 cv
240.449 53.6929 li
229.639 53.5176 li
229.651 52.748 li
230.837 52.7671 231.629 52.5952 232.025 52.231 cv
232.422 51.8672 232.629 51.1323 232.647 50.0264 cv
232.906 34.0596 li
231.425 34.0747 230.287 34.2891 229.49 34.7012 cv
228.026 35.4688 227.183 36.9321 226.96 39.0933 cv
226.085 39.0796 li
226.213 32.9722 li
cp
@
258.528 34.7939 mo
258.427 35.5513 li
257.382 35.4712 256.706 35.46 256.4 35.519 cv
256.094 35.5771 255.919 35.7632 255.878 36.0762 cv
255.859 36.2134 255.866 36.3657 255.898 36.5337 cv
255.931 36.7026 256.016 37.0103 256.156 37.457 cv
259.153 45.2075 li
259.163 45.209 li
263.109 40.3618 li
263.358 40.0664 263.627 39.6987 263.915 39.2593 cv
264.353 38.5913 264.594 38.0864 264.641 37.7441 cv
264.712 37.2153 264.548 36.8354 264.151 36.603 cv
263.884 36.4473 263.271 36.2705 262.313 36.0723 cv
262.413 35.3145 li
269.012 36.1997 li
268.91 36.9575 li
268.419 36.9814 268.024 37.0327 267.726 37.1123 cv
267.339 37.25 266.998 37.4937 266.703 37.8423 cv
259.721 46.4165 li
258.979 51.9492 li
258.825 53.0942 258.922 53.856 259.268 54.2363 cv
259.613 54.6162 260.32 54.8926 261.389 55.0659 cv
261.287 55.8232 li
250.871 54.4268 li
250.973 53.6694 li
252.094 53.7896 252.861 53.6987 253.276 53.396 cv
253.69 53.0933 253.972 52.394 254.118 51.2993 cv
254.71 46.8848 li
250.565 36.168 li
250.291 35.4648 249.907 34.9458 249.415 34.6113 cv
249.084 34.3979 248.739 34.2622 248.379 34.2036 cv
248.48 33.4463 li
258.528 34.7939 li
cp
f
258.528 34.7939 mo
258.427 35.5513 li
257.382 35.4712 256.706 35.46 256.4 35.519 cv
256.094 35.5771 255.919 35.7632 255.878 36.0762 cv
255.859 36.2134 255.866 36.3657 255.898 36.5337 cv
255.931 36.7026 256.016 37.0103 256.156 37.457 cv
259.153 45.2075 li
259.163 45.209 li
263.109 40.3618 li
263.358 40.0664 263.627 39.6987 263.915 39.2593 cv
264.353 38.5913 264.594 38.0864 264.641 37.7441 cv
264.712 37.2153 264.548 36.8354 264.151 36.603 cv
263.884 36.4473 263.271 36.2705 262.313 36.0723 cv
262.413 35.3145 li
269.012 36.1997 li
268.91 36.9575 li
268.419 36.9814 268.024 37.0327 267.726 37.1123 cv
267.339 37.25 266.998 37.4937 266.703 37.8423 cv
259.721 46.4165 li
258.979 51.9492 li
258.825 53.0942 258.922 53.856 259.268 54.2363 cv
259.613 54.6162 260.32 54.8926 261.389 55.0659 cv
261.287 55.8232 li
250.871 54.4268 li
250.973 53.6694 li
252.094 53.7896 252.861 53.6987 253.276 53.396 cv
253.69 53.0933 253.972 52.394 254.118 51.2993 cv
254.71 46.8848 li
250.565 36.168 li
250.291 35.4648 249.907 34.9458 249.415 34.6113 cv
249.084 34.3979 248.739 34.2622 248.379 34.2036 cv
248.48 33.4463 li
258.528 34.7939 li
cp
@
285.178 54.1396 mo
284.387 46.5898 li
284.142 46.5171 li
279.526 52.4619 li
285.178 54.1396 li
cp
272.465 57.0117 mo
273.179 57.1729 273.837 57.0234 274.437 56.5645 cv
274.819 56.2783 275.454 55.5825 276.338 54.479 cv
287.496 40.4893 li
288.317 40.7334 li
290.27 57.9214 li
290.49 59.8457 290.707 61.1094 290.919 61.7119 cv
291.131 62.3135 291.571 62.7041 292.239 62.8813 cv
292.019 63.623 li
282.613 60.8311 li
282.833 60.0894 li
283.79 60.332 284.437 60.4365 284.77 60.4023 cv
285.104 60.3682 285.346 60.1011 285.493 59.6011 cv
285.561 59.374 285.588 59.0073 285.574 58.5 cv
285.561 58.1982 285.532 57.8301 285.487 57.3955 cv
285.274 55.4219 li
278.751 53.4858 li
277.981 54.5107 277.483 55.1792 277.257 55.4917 cv
276.78 56.1616 276.491 56.666 276.391 57.0059 cv
276.268 57.4214 276.457 57.8062 276.959 58.1606 cv
277.26 58.3628 277.739 58.5669 278.398 58.7729 cv
278.179 59.5146 li
272.245 57.7534 li
272.465 57.0117 li
cp
f
285.178 54.1396 mo
284.387 46.5898 li
284.142 46.5171 li
279.526 52.4619 li
285.178 54.1396 li
cp
272.465 57.0117 mo
273.179 57.1729 273.837 57.0234 274.437 56.5645 cv
274.819 56.2783 275.454 55.5825 276.338 54.479 cv
287.496 40.4893 li
288.317 40.7334 li
290.27 57.9214 li
290.49 59.8457 290.707 61.1094 290.919 61.7119 cv
291.131 62.3135 291.571 62.7041 292.239 62.8813 cv
292.019 63.623 li
282.613 60.8311 li
282.833 60.0894 li
283.79 60.332 284.437 60.4365 284.77 60.4023 cv
285.104 60.3682 285.346 60.1011 285.493 59.6011 cv
285.561 59.374 285.588 59.0073 285.574 58.5 cv
285.561 58.1982 285.532 57.8301 285.487 57.3955 cv
285.274 55.4219 li
278.751 53.4858 li
277.981 54.5107 277.483 55.1792 277.257 55.4917 cv
276.78 56.1616 276.491 56.666 276.391 57.0059 cv
276.268 57.4214 276.457 57.8062 276.959 58.1606 cv
277.26 58.3628 277.739 58.5669 278.398 58.7729 cv
278.179 59.5146 li
272.245 57.7534 li
272.465 57.0117 li
cp
@
315.104 51.6826 mo
316.098 52.6313 316.661 53.1357 316.798 53.1948 cv
317.148 53.3506 317.49 53.3413 317.82 53.1665 cv
318.15 52.9927 318.409 52.7695 318.593 52.4985 cv
319.366 52.8408 li
316.5 59.3267 li
315.789 59.0127 li
315.746 57.3076 315.557 55.8955 315.224 54.7749 cv
314.589 52.7007 313.452 51.3018 311.813 50.5767 cv
309.956 49.7563 308.285 49.9746 306.798 51.231 cv
305.312 52.4878 303.973 54.4639 302.78 57.1602 cv
301.903 59.1445 301.411 60.8784 301.306 62.3628 cv
301.102 65.1401 302.161 67.043 304.487 68.0708 cv
305.911 68.7002 307.412 68.8892 308.989 68.6377 cv
309.896 68.4883 311.049 68.1201 312.452 67.5322 cv
312.976 68.5786 li
311.359 69.3086 310.021 69.7622 308.96 69.9404 cv
307.072 70.2593 305.234 70.0234 303.448 69.2344 cv
300.715 68.0254 298.781 66.2007 297.65 63.7593 cv
296.395 61.0601 296.439 58.1895 297.783 55.1499 cv
299.114 52.1377 301.172 50.1304 303.956 49.1284 cv
306.569 48.1919 309.211 48.3135 311.882 49.4941 cv
313.036 50.0044 314.11 50.7339 315.104 51.6826 cv
cp
f
315.104 51.6826 mo
316.098 52.6313 316.661 53.1357 316.798 53.1948 cv
317.148 53.3506 317.49 53.3413 317.82 53.1665 cv
318.15 52.9927 318.409 52.7695 318.593 52.4985 cv
319.366 52.8408 li
316.5 59.3267 li
315.789 59.0127 li
315.746 57.3076 315.557 55.8955 315.224 54.7749 cv
314.589 52.7007 313.452 51.3018 311.813 50.5767 cv
309.956 49.7563 308.285 49.9746 306.798 51.231 cv
305.312 52.4878 303.973 54.4639 302.78 57.1602 cv
301.903 59.1445 301.411 60.8784 301.306 62.3628 cv
301.102 65.1401 302.161 67.043 304.487 68.0708 cv
305.911 68.7002 307.412 68.8892 308.989 68.6377 cv
309.896 68.4883 311.049 68.1201 312.452 67.5322 cv
312.976 68.5786 li
311.359 69.3086 310.021 69.7622 308.96 69.9404 cv
307.072 70.2593 305.234 70.0234 303.448 69.2344 cv
300.715 68.0254 298.781 66.2007 297.65 63.7593 cv
296.395 61.0601 296.439 58.1895 297.783 55.1499 cv
299.114 52.1377 301.172 50.1304 303.956 49.1284 cv
306.569 48.1919 309.211 48.3135 311.882 49.4941 cv
313.036 50.0044 314.11 50.7339 315.104 51.6826 cv
cp
@
326.665 72.7539 mo
327.813 65.2402 li
327.617 65.1226 li
321.632 69.7129 li
326.665 72.7539 li
cp
313.659 72.3286 mo
314.308 72.6636 314.98 72.6846 315.675 72.3916 cv
316.117 72.2114 316.904 71.6987 318.036 70.854 cv
332.374 60.1338 li
333.092 60.5674 li
330.644 77.6943 li
330.373 79.6099 330.266 80.8862 330.32 81.5215 cv
330.373 82.1572 330.701 82.645 331.303 82.9849 cv
330.902 83.6479 li
322.507 78.5771 li
322.907 77.9141 li
323.771 78.3896 324.367 78.6528 324.7 78.7046 cv
325.031 78.7554 325.332 78.5581 325.602 78.1123 cv
325.724 77.9102 325.841 77.5625 325.955 77.0688 cv
326.018 76.7734 326.081 76.4097 326.146 75.9771 cv
326.429 74.0112 li
320.612 70.498 li
319.614 71.2969 318.968 71.8198 318.671 72.0654 cv
318.04 72.5923 317.635 73.0073 317.451 73.3101 cv
317.228 73.6802 317.314 74.1001 317.71 74.5684 cv
317.949 74.8398 318.361 75.1572 318.945 75.522 cv
318.545 76.1846 li
313.259 72.9912 li
313.659 72.3286 li
cp
f
326.665 72.7539 mo
327.813 65.2402 li
327.617 65.1226 li
321.632 69.7129 li
326.665 72.7539 li
cp
313.659 72.3286 mo
314.308 72.6636 314.98 72.6846 315.675 72.3916 cv
316.117 72.2114 316.904 71.6987 318.036 70.854 cv
332.374 60.1338 li
333.092 60.5674 li
330.644 77.6943 li
330.373 79.6099 330.266 80.8862 330.32 81.5215 cv
330.373 82.1572 330.701 82.645 331.303 82.9849 cv
330.902 83.6479 li
322.507 78.5771 li
322.907 77.9141 li
323.771 78.3896 324.367 78.6528 324.7 78.7046 cv
325.031 78.7554 325.332 78.5581 325.602 78.1123 cv
325.724 77.9102 325.841 77.5625 325.955 77.0688 cv
326.018 76.7734 326.081 76.4097 326.146 75.9771 cv
326.429 74.0112 li
320.612 70.498 li
319.614 71.2969 318.968 71.8198 318.671 72.0654 cv
318.04 72.5923 317.635 73.0073 317.451 73.3101 cv
317.228 73.6802 317.314 74.1001 317.71 74.5684 cv
317.949 74.8398 318.361 75.1572 318.945 75.522 cv
318.545 76.1846 li
313.259 72.9912 li
313.659 72.3286 li
cp
@
338.85 87.9883 mo
338.837 88.3296 339.089 88.7056 339.607 89.1157 cv
341.013 90.229 342.561 90.647 344.251 90.3706 cv
345.941 90.0933 347.902 88.5449 350.137 85.7251 cv
351.464 84.0483 352.361 82.415 352.829 80.8242 cv
353.577 78.2607 353.016 76.2388 351.146 74.7583 cv
350.528 74.2686 350.022 74.0825 349.629 74.1978 cv
349.37 74.27 349.049 74.5498 348.664 75.0361 cv
339.412 86.7183 li
339.05 87.2231 338.862 87.6465 338.85 87.9883 cv
cp
332.334 83.6904 mo
332.962 84.1245 333.46 84.3804 333.827 84.458 cv
334.481 84.5874 335.06 84.3354 335.561 83.7031 cv
344.846 71.9775 li
345.328 71.3682 345.443 70.7686 345.191 70.1792 cv
345.045 69.8384 344.68 69.3916 344.095 68.8403 cv
344.569 68.2407 li
351.831 73.9912 li
354.762 76.312 356.378 78.8623 356.681 81.6431 cv
356.954 84.1738 356.142 86.6372 354.243 89.0342 cv
352.541 91.1831 350.396 92.4468 347.807 92.8247 cv
344.894 93.2466 342.079 92.3828 339.365 90.2334 cv
331.859 84.2905 li
332.334 83.6904 li
cp
f
338.85 87.9883 mo
338.837 88.3296 339.089 88.7056 339.607 89.1157 cv
341.013 90.229 342.561 90.647 344.251 90.3706 cv
345.941 90.0933 347.902 88.5449 350.137 85.7251 cv
351.464 84.0483 352.361 82.415 352.829 80.8242 cv
353.577 78.2607 353.016 76.2388 351.146 74.7583 cv
350.528 74.2686 350.022 74.0825 349.629 74.1978 cv
349.37 74.27 349.049 74.5498 348.664 75.0361 cv
339.412 86.7183 li
339.05 87.2231 338.862 87.6465 338.85 87.9883 cv
cp
332.334 83.6904 mo
332.962 84.1245 333.46 84.3804 333.827 84.458 cv
334.481 84.5874 335.06 84.3354 335.561 83.7031 cv
344.846 71.9775 li
345.328 71.3682 345.443 70.7686 345.191 70.1792 cv
345.045 69.8384 344.68 69.3916 344.095 68.8403 cv
344.569 68.2407 li
351.831 73.9912 li
354.762 76.312 356.378 78.8623 356.681 81.6431 cv
356.954 84.1738 356.142 86.6372 354.243 89.0342 cv
352.541 91.1831 350.396 92.4468 347.807 92.8247 cv
344.894 93.2466 342.079 92.3828 339.365 90.2334 cv
331.859 84.2905 li
332.334 83.6904 li
cp
@
349.006 98.0088 mo
349.559 97.4624 li
350.188 98.0571 350.705 98.4106 351.109 98.5239 cv
351.728 98.7007 352.345 98.4834 352.962 97.873 cv
363.394 87.5537 li
364.021 86.9336 364.238 86.311 364.047 85.6846 cv
363.943 85.3154 363.601 84.8027 363.02 84.146 cv
363.572 83.5996 li
375.843 96.0034 li
371.503 100.296 li
370.965 99.752 li
372.081 98.1074 372.572 96.7056 372.438 95.5469 cv
372.302 94.3877 371.381 92.9448 369.674 91.2188 cv
369.023 90.562 368.542 90.2124 368.229 90.1694 cv
367.916 90.1265 367.556 90.3066 367.148 90.709 cv
362.157 95.6465 li
363.358 96.8892 364.402 97.5015 365.29 97.4844 cv
366.178 97.4673 367.344 96.9741 368.787 96.0044 cv
369.325 96.5488 li
362.082 103.714 li
361.543 103.17 li
362.612 101.807 363.162 100.642 363.192 99.6748 cv
363.223 98.707 362.63 97.6094 361.415 96.3804 cv
356.188 101.551 li
355.731 102.003 355.537 102.427 355.604 102.826 cv
355.672 103.224 356.066 103.789 356.788 104.518 cv
358.148 105.893 359.525 106.75 360.919 107.093 cv
362.313 107.434 364.077 107.215 366.212 106.437 cv
366.805 107.037 li
361.465 110.602 li
349.006 98.0088 li
cp
f
349.006 98.0088 mo
349.559 97.4624 li
350.188 98.0571 350.705 98.4106 351.109 98.5239 cv
351.728 98.7007 352.345 98.4834 352.962 97.873 cv
363.394 87.5537 li
364.021 86.9336 364.238 86.311 364.047 85.6846 cv
363.943 85.3154 363.601 84.8027 363.02 84.146 cv
363.572 83.5996 li
375.843 96.0034 li
371.503 100.296 li
370.965 99.752 li
372.081 98.1074 372.572 96.7056 372.438 95.5469 cv
372.302 94.3877 371.381 92.9448 369.674 91.2188 cv
369.023 90.562 368.542 90.2124 368.229 90.1694 cv
367.916 90.1265 367.556 90.3066 367.148 90.709 cv
362.157 95.6465 li
363.358 96.8892 364.402 97.5015 365.29 97.4844 cv
366.178 97.4673 367.344 96.9741 368.787 96.0044 cv
369.325 96.5488 li
362.082 103.714 li
361.543 103.17 li
362.612 101.807 363.162 100.642 363.192 99.6748 cv
363.223 98.707 362.63 97.6094 361.415 96.3804 cv
356.188 101.551 li
355.731 102.003 355.537 102.427 355.604 102.826 cv
355.672 103.224 356.066 103.789 356.788 104.518 cv
358.148 105.893 359.525 106.75 360.919 107.093 cv
362.313 107.434 364.077 107.215 366.212 106.437 cv
366.805 107.037 li
361.465 110.602 li
349.006 98.0088 li
cp
@
364.003 111.758 mo
364.7 112.68 365.314 113.161 365.842 113.199 cv
366.369 113.238 366.955 113.018 367.599 112.54 cv
379.166 103.939 li
379.824 103.45 380.14 102.97 380.112 102.499 cv
380.084 102.027 379.801 101.365 379.264 100.51 cv
379.879 100.052 li
384.434 106.179 li
376.717 119.332 li
376.87 119.527 li
391.651 115.887 li
396.223 122.036 li
395.607 122.493 li
394.935 121.72 394.365 121.272 393.901 121.152 cv
393.438 121.031 392.737 121.319 391.798 122.017 cv
381.035 130.019 li
380.139 130.686 379.663 131.271 379.609 131.778 cv
379.554 132.285 379.816 132.959 380.394 133.804 cv
379.778 134.262 li
373.771 126.182 li
374.388 125.724 li
374.947 126.428 375.473 126.881 375.963 127.084 cv
376.453 127.287 377.066 127.113 377.805 126.564 cv
389.704 117.717 li
389.572 117.54 li
370.836 122.233 li
370.336 121.56 li
379.89 105.16 li
379.834 105.035 li
368.818 113.225 li
368.007 113.829 367.526 114.419 367.377 114.998 cv
367.226 115.577 367.514 116.396 368.238 117.455 cv
367.623 117.912 li
363.388 112.215 li
364.003 111.758 li
cp
f
364.003 111.758 mo
364.7 112.68 365.314 113.161 365.842 113.199 cv
366.369 113.238 366.955 113.018 367.599 112.54 cv
379.166 103.939 li
379.824 103.45 380.14 102.97 380.112 102.499 cv
380.084 102.027 379.801 101.365 379.264 100.51 cv
379.879 100.052 li
384.434 106.179 li
376.717 119.332 li
376.87 119.527 li
391.651 115.887 li
396.223 122.036 li
395.607 122.493 li
394.935 121.72 394.365 121.272 393.901 121.152 cv
393.438 121.031 392.737 121.319 391.798 122.017 cv
381.035 130.019 li
380.139 130.686 379.663 131.271 379.609 131.778 cv
379.554 132.285 379.816 132.959 380.394 133.804 cv
379.778 134.262 li
373.771 126.182 li
374.388 125.724 li
374.947 126.428 375.473 126.881 375.963 127.084 cv
376.453 127.287 377.066 127.113 377.805 126.564 cv
389.704 117.717 li
389.572 117.54 li
370.836 122.233 li
370.336 121.56 li
379.89 105.16 li
379.834 105.035 li
368.818 113.225 li
368.007 113.829 367.526 114.419 367.377 114.998 cv
367.226 115.577 367.514 116.396 368.238 117.455 cv
367.623 117.912 li
363.388 112.215 li
364.003 111.758 li
cp
@
380.712 135.159 mo
381.157 135.894 381.555 136.376 381.904 136.607 cv
382.483 136.98 383.162 136.942 383.939 136.494 cv
396.676 129.158 li
397.447 128.713 397.82 128.163 397.793 127.507 cv
397.776 127.106 397.56 126.503 397.14 125.696 cv
397.803 125.314 li
403.094 134.499 li
402.431 134.88 li
401.924 134.08 401.506 133.57 401.175 133.35 cv
400.617 132.989 399.947 133.033 399.166 133.482 cv
386.431 140.818 li
385.694 141.241 385.321 141.729 385.31 142.283 cv
385.298 142.836 385.529 143.523 386.002 144.344 cv
385.34 144.726 li
380.049 135.541 li
380.712 135.159 li
cp
f
380.712 135.159 mo
381.157 135.894 381.555 136.376 381.904 136.607 cv
382.483 136.98 383.162 136.942 383.939 136.494 cv
396.676 129.158 li
397.447 128.713 397.82 128.163 397.793 127.507 cv
397.776 127.106 397.56 126.503 397.14 125.696 cv
397.803 125.314 li
403.094 134.499 li
402.431 134.88 li
401.924 134.08 401.506 133.57 401.175 133.35 cv
400.617 132.989 399.947 133.033 399.166 133.482 cv
386.431 140.818 li
385.694 141.241 385.321 141.729 385.31 142.283 cv
385.298 142.836 385.529 143.523 386.002 144.344 cv
385.34 144.726 li
380.049 135.541 li
380.712 135.159 li
cp
@
386.077 145.706 mo
386.771 145.388 li
387.16 146.164 387.524 146.675 387.864 146.92 cv
388.387 147.298 389.042 147.307 389.833 146.945 cv
403.185 140.829 li
403.987 140.461 404.406 139.949 404.44 139.293 cv
404.472 138.911 404.325 138.311 404.005 137.493 cv
404.699 137.175 li
411.973 153.051 li
406.417 155.596 li
406.109 154.925 li
407.724 153.762 408.665 152.611 408.935 151.472 cv
409.205 150.333 408.831 148.654 407.815 146.436 cv
407.429 145.591 407.095 145.095 406.814 144.946 cv
406.536 144.797 406.135 144.842 405.614 145.08 cv
399.235 148.003 li
399.938 149.583 400.709 150.518 401.551 150.806 cv
402.394 151.094 403.661 151.03 405.356 150.611 cv
405.678 151.314 li
396.383 155.572 li
396.061 154.87 li
397.539 153.954 398.461 153.045 398.823 152.145 cv
399.187 151.245 399.008 150.009 398.288 148.437 cv
391.606 151.498 li
391.022 151.765 390.694 152.097 390.62 152.495 cv
390.547 152.892 390.725 153.558 391.152 154.491 cv
391.958 156.25 392.957 157.529 394.149 158.33 cv
395.341 159.131 397.072 159.531 399.344 159.534 cv
399.693 160.299 li
393.452 161.803 li
386.077 145.706 li
cp
f
386.077 145.706 mo
386.771 145.388 li
387.16 146.164 387.524 146.675 387.864 146.92 cv
388.387 147.298 389.042 147.307 389.833 146.945 cv
403.185 140.829 li
403.987 140.461 404.406 139.949 404.44 139.293 cv
404.472 138.911 404.325 138.311 404.005 137.493 cv
404.699 137.175 li
411.973 153.051 li
406.417 155.596 li
406.109 154.925 li
407.724 153.762 408.665 152.611 408.935 151.472 cv
409.205 150.333 408.831 148.654 407.815 146.436 cv
407.429 145.591 407.095 145.095 406.814 144.946 cv
406.536 144.797 406.135 144.842 405.614 145.08 cv
399.235 148.003 li
399.938 149.583 400.709 150.518 401.551 150.806 cv
402.394 151.094 403.661 151.03 405.356 150.611 cv
405.678 151.314 li
396.383 155.572 li
396.061 154.87 li
397.539 153.954 398.461 153.045 398.823 152.145 cv
399.187 151.245 399.008 150.009 398.288 148.437 cv
391.606 151.498 li
391.022 151.765 390.694 152.097 390.62 152.495 cv
390.547 152.892 390.725 153.558 391.152 154.491 cv
391.958 156.25 392.957 157.529 394.149 158.33 cv
395.341 159.131 397.072 159.531 399.344 159.534 cv
399.693 160.299 li
393.452 161.803 li
386.077 145.706 li
cp
@
401.251 162.446 mo
401.527 163.274 li
399.53 164.448 398.213 165.709 397.576 167.056 cv
396.94 168.402 396.842 169.734 397.281 171.053 cv
397.708 172.335 398.348 173.135 399.196 173.452 cv
400.047 173.769 400.842 173.804 401.581 173.558 cv
402.443 173.271 403.052 172.754 403.408 172.01 cv
403.64 171.519 403.851 170.608 404.043 169.279 cv
404.36 167.14 li
404.674 165.016 405.155 163.431 405.805 162.385 cv
406.455 161.337 407.441 160.594 408.762 160.153 cv
410.167 159.686 411.643 159.743 413.191 160.327 cv
414.738 160.911 415.853 162.225 416.534 164.269 cv
416.88 165.308 417.057 166.367 417.062 167.444 cv
417.067 168.521 417.094 169.129 417.139 169.267 cv
417.243 169.58 417.407 169.766 417.631 169.824 cv
417.854 169.884 418.129 169.899 418.454 169.872 cv
418.74 170.732 li
412.476 172.82 li
412.21 172.023 li
413.534 171.165 414.563 170.087 415.295 168.79 cv
416.027 167.492 416.167 166.167 415.716 164.812 cv
415.398 163.859 414.883 163.194 414.169 162.816 cv
413.455 162.439 412.718 162.377 411.961 162.63 cv
411.051 162.933 410.458 163.418 410.181 164.086 cv
409.892 164.748 409.598 166.113 409.299 168.184 cv
408.938 170.661 li
408.775 171.767 408.498 172.697 408.105 173.453 cv
407.372 174.866 406.229 175.831 404.677 176.349 cv
403.228 176.831 401.672 176.723 400.01 176.022 cv
398.35 175.323 397.104 173.729 396.275 171.242 cv
396.085 170.672 395.945 170.075 395.857 169.454 cv
395.77 168.834 395.743 168.201 395.776 167.555 cv
395.803 166.933 li
395.798 166.79 395.787 166.656 395.77 166.529 cv
395.753 166.401 395.731 166.296 395.704 166.213 cv
395.605 165.918 395.451 165.744 395.242 165.691 cv
395.032 165.639 394.755 165.623 394.41 165.646 cv
394.134 164.817 li
401.251 162.446 li
cp
f
401.251 162.446 mo
401.527 163.274 li
399.53 164.448 398.213 165.709 397.576 167.056 cv
396.94 168.402 396.842 169.734 397.281 171.053 cv
397.708 172.335 398.348 173.135 399.196 173.452 cv
400.047 173.769 400.842 173.804 401.581 173.558 cv
402.443 173.271 403.052 172.754 403.408 172.01 cv
403.64 171.519 403.851 170.608 404.043 169.279 cv
404.36 167.14 li
404.674 165.016 405.155 163.431 405.805 162.385 cv
406.455 161.337 407.441 160.594 408.762 160.153 cv
410.167 159.686 411.643 159.743 413.191 160.327 cv
414.738 160.911 415.853 162.225 416.534 164.269 cv
416.88 165.308 417.057 166.367 417.062 167.444 cv
417.067 168.521 417.094 169.129 417.139 169.267 cv
417.243 169.58 417.407 169.766 417.631 169.824 cv
417.854 169.884 418.129 169.899 418.454 169.872 cv
418.74 170.732 li
412.476 172.82 li
412.21 172.023 li
413.534 171.165 414.563 170.087 415.295 168.79 cv
416.027 167.492 416.167 166.167 415.716 164.812 cv
415.398 163.859 414.883 163.194 414.169 162.816 cv
413.455 162.439 412.718 162.377 411.961 162.63 cv
411.051 162.933 410.458 163.418 410.181 164.086 cv
409.892 164.748 409.598 166.113 409.299 168.184 cv
408.938 170.661 li
408.775 171.767 408.498 172.697 408.105 173.453 cv
407.372 174.866 406.229 175.831 404.677 176.349 cv
403.228 176.831 401.672 176.723 400.01 176.022 cv
398.35 175.323 397.104 173.729 396.275 171.242 cv
396.085 170.672 395.945 170.075 395.857 169.454 cv
395.77 168.834 395.743 168.201 395.776 167.555 cv
395.803 166.933 li
395.798 166.79 395.787 166.656 395.77 166.529 cv
395.753 166.401 395.731 166.296 395.704 166.213 cv
395.605 165.918 395.451 165.744 395.242 165.691 cv
395.032 165.639 394.755 165.623 394.41 165.646 cv
394.134 164.817 li
401.251 162.446 li
cp
@
169.533 137.4 mo
180.574 142.921 li
190.039 133.457 li
201.08 139.767 li
210.543 131.091 li
219.219 138.978 li
230.261 131.091 li
238.936 138.978 li
249.977 130.302 li
258.652 141.344 li
269.693 133.457 li
279.158 144.498 li
289.41 137.4 li
281.653 165.924 li
251.685 156.46 209.192 158.54 180.011 165.639 cv
169.533 137.4 li
cp
1 /3 /CSD get_res sepcs
1 sep
f
2 lw
169.533 137.4 mo
180.574 142.921 li
190.039 133.457 li
201.08 139.767 li
210.543 131.091 li
219.219 138.978 li
230.261 131.091 li
238.936 138.978 li
249.977 130.302 li
258.652 141.344 li
269.693 133.457 li
279.158 144.498 li
289.41 137.4 li
281.653 165.924 li
251.685 156.46 209.192 158.54 180.011 165.639 cv
169.533 137.4 li
cp
0 0 0 1 cmyk
@
181.439 168.779 mo
191.616 185.509 li
212.121 179.2 256.286 179.2 266.539 185.509 cv
279.369 169.065 li
255.708 161.178 207.465 158.527 181.439 168.779 cv
cp
f
181.439 168.779 mo
191.616 185.509 li
212.121 179.2 256.286 179.2 266.539 185.509 cv
279.369 169.065 li
255.708 161.178 207.465 158.527 181.439 168.779 cv
cp
@
191.616 185.509 mo
199.024 187.714 201.907 190.845 201.907 196.365 cv
220.835 194.788 251.538 193.403 257.848 196.557 cv
256.27 191.037 263.385 186.298 266.539 185.509 cv
247.61 176.833 199.502 181.565 191.616 185.509 cv
cp
1 /3 /CSD get_res sepcs
1 sep
f
1 lc
1 lj
191.616 185.509 mo
199.024 187.714 201.907 190.845 201.907 196.365 cv
220.835 194.788 251.538 193.403 257.848 196.557 cv
256.27 191.037 263.385 186.298 266.539 185.509 cv
247.61 176.833 199.502 181.565 191.616 185.509 cv
cp
0 0 0 1 cmyk
@
216.591 335.62 mo
223.425 333.515 239.198 333.515 242.879 336.144 cv
256.117 207.322 li
241.396 203.116 212.712 205.916 204.135 207 cv
216.591 335.62 li
cp
1 /3 /CSD get_res sepcs
1 sep
f
0 lc
0 lj
216.591 335.62 mo
223.425 333.515 239.198 333.515 242.879 336.144 cv
256.117 207.322 li
241.396 203.116 212.712 205.916 204.135 207 cv
216.591 335.62 li
cp
0 0 0 1 cmyk
@
217.479 339.579 mo
222.513 338.098 237.311 338.255 243.045 339.579 cv
240.776 355.598 li
233.414 350.866 222.374 352.969 219.219 355.598 cv
217.479 339.579 li
cp
1 /3 /CSD get_res sepcs
1 sep
f
217.479 339.579 mo
222.513 338.098 237.311 338.255 243.045 339.579 cv
240.776 355.598 li
233.414 350.866 222.374 352.969 219.219 355.598 cv
217.479 339.579 li
cp
0 0 0 1 cmyk
@
206.6 206.803 mo
217.641 206.015 242.091 205.226 250.766 207.592 cv
263.385 210.746 264.174 202.859 255.498 202.071 cv
243.931 200.494 215.539 198.916 201.342 202.071 cv
196.611 205.226 200.291 207.854 206.6 206.803 cv
cp
1 /3 /CSD get_res sepcs
1 sep
f
206.6 206.803 mo
217.641 206.015 242.091 205.226 250.766 207.592 cv
263.385 210.746 264.174 202.859 255.498 202.071 cv
243.931 200.494 215.539 198.916 201.342 202.071 cv
196.611 205.226 200.291 207.854 206.6 206.803 cv
cp
0 0 0 1 cmyk
@
172.288 143.842 mo
181.111 147.441 li
175.842 153.962 li
172.288 143.842 li
cp
1 1 1 1 cmyk
f
184.517 146.864 mo
193.193 151.597 li
197.924 143.71 li
191.616 138.978 li
184.517 146.864 li
cp
f
221.821 143.043 mo
229.468 149.304 li
235.581 142.433 li
230.261 136.611 li
221.821 143.043 li
cp
f
242.129 145.212 mo
249.775 151.472 li
255.89 144.602 li
250.568 138.78 li
242.129 145.212 li
cp
f
261.008 146.098 mo
268.654 152.359 li
274.769 145.489 li
269.447 139.668 li
261.008 146.098 li
cp
f
202.898 144.547 mo
210.543 150.808 li
216.658 143.936 li
211.336 138.115 li
202.898 144.547 li
cp
f
287.044 144.498 mo
280.735 147.652 li
284.678 154.751 li
287.044 144.498 li
cp
f
179.983 162.49 mo
183.926 156.18 li
187.87 160.912 li
179.983 162.49 li
cp
0 0 0 1 cmyk
f
197.924 159.483 mo
201.869 153.962 li
208.177 158.694 li
197.924 159.483 li
cp
f
215.226 157.984 mo
220.236 153.196 li
226.342 157.448 li
215.226 157.984 li
cp
f
234.697 157.49 mo
238.147 153.744 li
244.456 157.688 li
234.697 157.49 li
cp
f
252.736 158.279 mo
257.864 153.744 li
262.857 159.66 li
252.736 158.279 li
cp
f
270.482 161.434 mo
274.427 158.279 li
279.158 163.011 li
270.482 161.434 li
cp
f
180.574 162.638 mo
196.348 158.694 244.456 153.173 272.848 161.848 cv
292.564 164.215 284.952 173.681 275.917 170.413 cv
253.046 163.315 208.177 164.215 185.306 169.735 cv
177.419 172.891 173.476 166.581 180.574 162.638 cv
cp
1 /3 /CSD get_res sepcs
1 sep
f
180.574 162.638 mo
196.348 158.694 244.456 153.173 272.848 161.848 cv
292.564 164.215 284.952 173.681 275.917 170.413 cv
253.046 163.315 208.177 164.215 185.306 169.735 cv
177.419 172.891 173.476 166.581 180.574 162.638 cv
cp
0 0 0 1 cmyk
@
1.44 lw
215.917 206.348 mo
225.356 334.112 li
1 1 1 1 cmyk
@
221.888 206.181 mo
228.305 333.816 li
@
206.942 206.556 mo
219.151 334.7 li
@
210.819 206.359 mo
221.909 335.328 li
@
239.673 206.762 mo
231.878 334.152 li
@
243.862 206.988 mo
234.644 334.05 li
@
248.651 206.913 mo
237.444 334.417 li
@
252.754 207.975 mo
240.498 334.833 li
@
229.916 333.769 mo
230.243 226.252 li
0 0 0 0 cmyk
f
229.916 333.769 mo
230.243 226.252 li
0 0 0 1 cmyk
@
216.591 335.62 mo
223.72 333.122 238.506 332.914 243.237 335.542 cv
247.633 338.208 248.235 341.694 242.276 341.309 cv
233.864 340.782 227.106 340.35 217.641 341.403 cv
210.806 342.979 212.383 338.249 216.591 335.62 cv
cp
1 /3 /CSD get_res sepcs
1 sep
f
2 lw
216.591 335.62 mo
223.72 333.122 238.506 332.914 243.237 335.542 cv
247.633 338.208 248.235 341.694 242.276 341.309 cv
233.864 340.782 227.106 340.35 217.641 341.403 cv
210.806 342.979 212.383 338.249 216.591 335.62 cv
cp
0 0 0 1 cmyk
@
54.52 223.926 mo
54.52 226.932 52.083 229.368 49.0771 229.368 cv
46.0713 229.368 43.6348 226.932 43.6348 223.926 cv
43.6348 220.92 46.0713 218.483 49.0771 218.483 cv
52.083 218.483 54.52 220.92 54.52 223.926 cv
cp
0 0 0 0 cmyk
f
1.01 lw
54.52 223.926 mo
54.52 226.932 52.083 229.368 49.0771 229.368 cv
46.0713 229.368 43.6348 226.932 43.6348 223.926 cv
43.6348 220.92 46.0713 218.483 49.0771 218.483 cv
52.083 218.483 54.52 220.92 54.52 223.926 cv
cp
@
423.183 223.926 mo
423.183 226.932 420.746 229.368 417.74 229.368 cv
414.734 229.368 412.298 226.932 412.298 223.926 cv
412.298 220.92 414.734 218.483 417.74 218.483 cv
420.746 218.483 423.183 220.92 423.183 223.926 cv
cp
f
423.183 223.926 mo
423.183 226.932 420.746 229.368 417.74 229.368 cv
414.734 229.368 412.298 226.932 412.298 223.926 cv
412.298 220.92 414.734 218.483 417.74 218.483 cv
420.746 218.483 423.183 220.92 423.183 223.926 cv
cp
@
154.203 224.976 mo
142.373 218.666 li
155.78 211.568 151.049 206.048 140.795 207.625 cv
127.388 213.934 132.121 228.13 140.007 229.707 cv
161.301 232.073 166.033 213.146 159.723 198.949 cv
149.471 183.176 124.234 195.794 125.022 208.413 cv
124.234 214.722 121.868 229.971 112.404 235.491 cv
157.094 247.584 285.386 321.194 316.406 344.328 cv
322.716 342.223 324.293 337.493 325.344 333.811 cv
f
2 lw
154.203 224.976 mo
142.373 218.666 li
155.78 211.568 151.049 206.048 140.795 207.625 cv
127.388 213.934 132.121 228.13 140.007 229.707 cv
161.301 232.073 166.033 213.146 159.723 198.949 cv
149.471 183.176 124.234 195.794 125.022 208.413 cv
124.234 214.722 121.868 229.971 112.404 235.491 cv
157.094 247.584 285.386 321.194 316.406 344.328 cv
322.716 342.223 324.293 337.493 325.344 333.811 cv
0 0 0 1 cmyk
@
157.621 195.532 mo
157.621 195.532 262.777 263.357 331.654 289.12 cv
355.313 294.905 358.469 338.544 325.344 333.811 cv
295.375 313.305 236.641 276.052 199.683 257.574 cv
170.766 244.429 158.146 238.12 151.311 235.491 cv
142.899 232.862 136.589 233.914 132.383 220.243 cv
0 0 0 0 cmyk
f
157.621 195.532 mo
157.621 195.532 262.777 263.357 331.654 289.12 cv
355.313 294.905 358.469 338.544 325.344 333.811 cv
295.375 313.305 236.641 276.052 199.683 257.574 cv
170.766 244.429 158.146 238.12 151.311 235.491 cv
142.899 232.862 136.589 233.914 132.383 220.243 cv
0 0 0 1 cmyk
@
156.651 226.257 mo
142.62 218.83 li
156.027 211.732 151.294 206.211 141.042 207.789 cv
127.634 214.098 132.367 228.294 140.253 229.871 cv
161.548 232.237 166.28 213.31 159.97 199.113 cv
149.717 183.34 124.48 195.959 125.269 208.578 cv
124.48 214.886 122.114 230.135 112.65 235.655 cv
0 0 0 0 cmyk
f
156.651 226.257 mo
142.62 218.83 li
156.027 211.732 151.294 206.211 141.042 207.789 cv
127.634 214.098 132.367 228.294 140.253 229.871 cv
161.548 232.237 166.28 213.31 159.97 199.113 cv
149.717 183.34 124.48 195.959 125.269 208.578 cv
124.48 214.886 122.114 230.135 112.65 235.655 cv
0 0 0 1 cmyk
@
149.291 208.38 mo
160.858 215.479 li
/4 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /4 /CSD get_res sepcs
level3{
gsave
clp
[11.9793 0 0 11.9793 149.084 211.93 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [1 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[11.9793 0 0 11.9793 149.084 211.93 ]ct
clp
/0 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~!!!$$!sAc3#7(VC$OdIS%hK<c',2/s(Dn#.)]Tk>+!;^N,:"Q^-R^Dn.kE8)0/,+91GgsI2`NfY4$5Yi
5<qM$6UX@47n?3D92&&T:Jand;cHat='/U/>?kH??XR;O@q9._B4u!oCM[j*DfB]:F*)PJGBeCZH[L6j
It3*%K7nr5LPUeEMi<XUO-#KePE_>uQ^F20S"-%@T:hmPUSO``Vl6SpX/rG+YHY:;Za@-K\%&u[]=bhk
^VI\&_o0O6a2lBFbKS5Vcd:(fe'uq!f@\d1gYCWAhr*JQj5f=akNM0qlg4$,n*ol<oCV_Lp\=R\qu$El
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
149.291 208.38 mo
160.858 215.479 li
0 0 0 1 cmyk
@
153.25 307.379 mo
141.531 313.894 li
142.842 298.78 135.638 299.76 131.4 309.228 cv
129.426 323.914 143.918 327.641 149.522 321.872 cv
163.063 305.269 149.73 291.024 134.382 288.622 cv
115.57 288.676 112.477 316.722 123.504 322.907 cv
128.376 326.991 139.901 337.252 139.404 348.198 cv
173.81 317.217 310.471 245.151 346.735 231.644 cv
348.393 225.203 345.272 221.311 342.752 218.429 cv
0 0 0 0 cmyk
f
153.25 307.379 mo
141.531 313.894 li
142.842 298.78 135.638 299.76 131.4 309.228 cv
129.426 323.914 143.918 327.641 149.522 321.872 cv
163.063 305.269 149.73 291.024 134.382 288.622 cv
115.57 288.676 112.477 316.722 123.504 322.907 cv
128.376 326.991 139.901 337.252 139.404 348.198 cv
173.81 317.217 310.471 245.151 346.735 231.644 cv
348.393 225.203 345.272 221.311 342.752 218.429 cv
0 0 0 1 cmyk
@
127.192 290.121 mo
127.192 290.121 249.623 232.763 308.633 188.883 cv
326.328 172.146 364.698 193.173 342.752 218.429 cv
309.225 233.618 246.56 262.405 210.533 282.624 cv
183.801 299.783 166.43 311.199 160.513 315.515 cv
152.602 320.1 146.892 326.952 137.436 323.141 cv
0 0 0 0 cmyk
f
127.192 290.121 mo
127.192 290.121 249.623 232.763 308.633 188.883 cv
326.328 172.146 364.698 193.173 342.752 218.429 cv
309.225 233.618 246.56 262.405 210.533 282.624 cv
183.801 299.783 166.43 311.199 160.513 315.515 cv
152.602 320.1 146.892 326.952 137.436 323.141 cv
0 0 0 1 cmyk
@
155.6 305.649 mo
141.802 313.777 li
143.115 298.663 135.91 299.643 131.671 309.111 cv
129.698 323.795 144.19 327.524 149.793 321.753 cv
163.334 305.151 150.002 290.907 134.654 288.503 cv
115.841 288.559 112.749 316.604 123.777 322.788 cv
128.648 326.874 140.173 337.133 139.675 348.079 cv
0 0 0 0 cmyk
f
155.6 305.649 mo
141.802 313.777 li
143.115 298.663 135.91 299.643 131.671 309.111 cv
129.698 323.795 144.19 327.524 149.793 321.753 cv
163.334 305.151 150.002 290.907 134.654 288.503 cv
115.841 288.559 112.749 316.604 123.777 322.788 cv
128.648 326.874 140.173 337.133 139.675 348.079 cv
0 0 0 1 cmyk
@
136.671 303.02 mo
150.342 295.661 li
0 0 0 .2 cmyk
f
136.671 303.02 mo
150.342 295.661 li
0 0 0 1 cmyk
@
194.637 292.53 mo
197.299 287.207 li
219.311 287.207 li
219.311 292.53 li
194.637 292.53 li
cp
f
.1663 lw
194.637 292.53 mo
197.299 287.207 li
219.311 287.207 li
219.311 292.53 li
194.637 292.53 li
cp
@
240.502 291.865 mo
240.502 287.207 li
263.511 287.207 li
266.506 291.865 li
240.502 291.865 li
cp
f
240.502 291.865 mo
240.502 287.207 li
263.511 287.207 li
266.506 291.865 li
240.502 291.865 li
cp
@
170.682 304.842 mo
230.239 204.692 li
290.129 305.507 li
241.219 305.507 li
240.886 291.865 li
266.506 291.865 li
229.906 230.978 li
194.637 292.53 li
218.926 292.53 li
218.926 304.842 li
170.682 304.842 li
cp
/5 
<<
/Name (Pantone 415U)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .1 .05 0 .17 ] 
>>
/CSD add_res
1 /5 /CSD get_res sepcs
1 sep
f
2 lw
170.682 304.842 mo
230.239 204.692 li
290.129 305.507 li
241.219 305.507 li
240.886 291.865 li
266.506 291.865 li
229.906 230.978 li
194.637 292.53 li
218.926 292.53 li
218.926 304.842 li
170.682 304.842 li
cp
0 0 0 1 cmyk
@
230.572 259.924 mo
220.923 277.225 li
239.556 277.225 li
230.572 259.924 li
cp
1 /5 /CSD get_res sepcs
1 sep
f
230.572 259.924 mo
220.923 277.225 li
239.556 277.225 li
230.572 259.924 li
cp
0 0 0 1 cmyk
@
220.923 277.225 mo
239.556 277.225 li
236.561 271.57 li
224.25 271.57 li
220.923 277.225 li
cp
f
.1663 lw
220.923 277.225 mo
239.556 277.225 li
236.561 271.57 li
224.25 271.57 li
220.923 277.225 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 /2 /3 /4 /5 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.0%%For: (Administrator) ()%%Title: (BCA_colorLogo_ill.eps)%%CreationDate: 5/1/13 2:50 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6G=*T:ngO@K5^s"P9JY7k"#C'MEZQ&7?l/ten6g'BS$RJ0+8<+VW_s(EF?BEWmX=h'mrC[qQ:e!r;G#PXWUnelDRNnESU[hU%$mR!bE^nNrN35]<2S7^+DtF-3nsXAD=>-isWgV76.rQmUHm%Qo9f:n19'>I1^!Rmkp,Z!/I_XZPFaF#Z9_n.'4*+ANJN*8G9r$8(%r$t]\eXt]OCiN6tW&7e=>,V+$+(QWW04LV#5En@$Xln`jpW#aA4enK%(+TpFjCKFeJnFOs/2eRChP'#)0c0ntd%SOs;Z?"n3q!P,%9;hIVT[Rdh6q+gpL2&`P8<UnfOfAVDA1R;G.VVj]5.Wc4\cXoI;F\l7nDB%N7<g+e"g0r7$GO_W=qlYb?42/I_MYP8]F=fViL_<>%^I4"^qgnJ[ld?'".VHM>lA-EFWhR'Lk9k[@,MCDkm<R`gfcTkOK4_$0^MH\UYL@p'pYK:IeekbZ8!4!>%84u^XO=StHacus1l2&D%;9pYVmek\>!L,riiu@MZZLM#&nZVW0DPR3dkV:41p')>Xrro2$\._=)PJ'!VCc-O*mH/pr;fU,mUj(=6DR@tNZMT'P<@<[!8$`.F%B'a-DeU&s/!O,J"onh^9c^7H<5h_"d^Df_.$L?WGgLu*&>S3390\&,o6`4Xa6qPT>5ROelh5GWh;A?TAans0ua/6'aV[(*n@$XQ=%8PXTVQY(RbVGY_d9d^"kAW<tB:9XK[EKMDW9_O+YPrH8R>L*6dk^\B'TE2roD!iksESMu)O"R+&CAYQsH,n%j_d=]4M`/pUX7O3b%\\HT4q#%JA#"*l)*-\'!Z]/f/a7RB!3,O)\X.<S[Zb+igh%>s1c^i*Gk,Rr.kk&7lT/.jUJ)HCLbS!L'bdUpW#o\?/h)b@XZb)a[%*"9"%aKV$#-2m*+GPKdT`c$rUhWLuIgA\/#l?'RKh3**]3V0r@lOIk0ZrM%rHPn;W><Zm&"`N[V.BdTl/4H=!0O6pRI6pp8*@+VB%?DZka5'R5gctGZ<h6u"/I_]+>nFeK+O9U'";X^slRebP![+o9lYM@^r@Of@nruHNXdKf0'2FC<N-bD^L-P/cIFhL'-p`AATIrjr;%HE5SDl.*DLc)7KM,2TppZ$2rSf&,qWSQ<)sma2\LEa%o@RSU'*`S^V[j$!(rAua0O&99LAS64t6?hM7alXBCi=78!cM;3k"n@R?X%V4+siC^q@)Ji`@+Zlh.@YOudcL,!qT;9]KX61"\@5;1gDec[F#C3-,!VcS@cK%9qfNNC.D6K\.qFsI4i"t_-69$bAVn5ZF;C=QLa%<j%^&`L9d_CIV%%Bf3;qeE!&t'<ANU[9BPqX/0R9C/rNY;:V^N<NR`N\LLUu9!)!n<%@!%WD]g"'iV%J'tp>Ae;@.d.oJeef?2Wa%V-GX>b/LYd2TnQm05G.,XH_hP<#/-7;RKIQPtRrOZ"0-DP#9Y#>"L:p-+P:d7%m^5<f<5P\QC<sMcS4V)F_?<("K$VP`&F:Zt`Xl%W`Wi5A/-]>1+gDl/^70F`KDgp'$ZkJ2(N:l/=ArU1/5SA9\n2lePo5qPYBK')-*G@P`:i'1b?NI,="1E6T#QF2C(Z>CO0!ak[hH'%(NiA0F[Oc'9ilI+QZYk9"g+Y%[>J#98m5)u1fH1e?.1W1;`#AN#>qV&<OJQeeWO*8/_*f0<ED%X"fkI#,umoZ8l_i=AYl1:'h^7b%`DCYF;cH1_A49Ba\L(D>MHlH?EY0j#;`80j7:]D!A6G4/;6!2fW?RV(P#RYsacm3*QS_:!'M4V+64u\R8.juN/;\m2&]QBe+oirV%gL)dn_PSGfZ4EcQcic.ioF1LSn-2P%.!Z)_QMQ3oQ+45LAPf:(EG=$uc3.@jLo':*?DGmPqCT*=OdpiLo$hL759LT3"akjWJ26Tp%dKM[_V[*P.WkepZ#rI;G9FFZ24tsl>?haW+'J0@?.cS2U4[?kLMYI01!+E`C!h9=_iWIX3</V:21sdp?5VtaRp]18X/:df=[b*h&%$6XeFJAHaNi$lQ#!Ft$i1Ce5Q%hK7*%6d%4^d@er8XD"0a,",gWN@rTX3^r2$bQ^?"_Jf8&K`,>i(JHJ*e?uS!R_1D`<WoK@L7]A%*$YOogLC1J$imcS;[$V3hT#lb&gRKA5iNn&n,[D-.=i!`?I]Z"pP>t%N=j",;Hm0!=2Up?oEiA=+!>\;4no$/J0;]6(_FUu5/>?!%94/Ei\7Z)b0f$PKX]c14q5XLUS-6b^",X'Dl5C5H!JG@mq%n%n!6Z)s#BVLhpeM*3!H&%Sd=HcUi$+*CU]`ISW"WRK2/Ed?:'S^:%JGh<46QMQA"K&PVS4YbLJE&,=!ZXe5##)*"1MaeSL&s+834t&(,/Cil#^8.+`/[,#-n>5F5WjSl!C:-;AHFTOEOl.f2&lmX'H,X-%!Mb4=d6ZQT+Ef::#e38j;LrOI]SRc&&4?\T("Ul#FFic\+]_"B"B)8XA-$jB*&372"oAJ^V]4h,JLn0a)bNA680V'$!^racOqYm1%JfM`F%FYI-C&uYFO=GgCW\d^"#[kT1!ob%^'L4Dm=HBtVEN%-O2HS$R2sN:;3p]qVg!4"c@Pr`3N:E9LZ^/L.`(i]-s6-tBF<&bL%TX8MeLVXrtF5m<fFVjcjFIJTKm1>!ddXRDJL?_'"d@E2MDl\'JD`'n.%eO%+.5\+cC/7Ot:J1Kig`Q(mNtV0mTcuAUUI@C6TKl<G%)"E[Frb;pkXJ$.q1I3Q=5,BDu3VWlRU'c77]&U'R%DrCi<I*pU;L>57*7]hecV]1f!!Uf$Vuo1789tit+K#K.<Tkl!PE_c=%S7fN%[RQKP,P!nC+J!1]7A!Hl8LZF&W;4pe-q8d[@[ZILdYs?k)-'ls)Ra6/`[F<q<fB(<Muj8KVA[RcAulS50YOE0HI5cO-!Ms%aYF/P%7AqJn<^`K\$L't.Lo;!c$F+CdX%XPV[Q8MqTg7>YY7!o8&daZea/hN]<66mP8K/OX2JT%OQr]Bl^_CYA<$bbP9I=J9oI/oO_,aK.%;))&Sb)4F".RClB("69Fc>p9-kq,YOJaO.AGrb05;dc1(o9:)k1"'OD*of*qkV@]fB"U/4.^Yj@Z]uH,dql-5"OpVF@S9[;n@6&(%8>4g:WAd>Z$#.oD=!=\P&#18GfGOkr%L%=Kc6L.m"%*3c_,9d3RWi]o\EI<+EDXN6_K7t/$U[UAjA1VCO[YGT+;?OU!La/.PYCWV%YuN"t=!<KPkaW2c,`0TQUHp<X$&pc:HC0![kpDKao+[nqcZ(Tb<3guO.SN@[-E5eJQ*9Wg7a]OrStHSf?6Fh[BA!5TTgt,fPi*e=%??G\a+s/u10t^$7rua<@rE+nPd<c#q&,.N4n-&^s_#j@bcP3gS/WEkB35,H__mn2FZfNh&V3+Vs/oVO'SkNj`Xd,'Kc!Dk(Dbe?c%+3C>XlucNle]`=!3O<*4d:cHK'miEXplF>-J"bc`fhkKYc&&5r]m,td;%pLMRM/nh\HnZ<AQ&akeE2G=F=ue>"Q%d@LFXlDpF3Y6%$]e-Srn4!P9$MW03%&_i3[[TKF29mQY#CmaS\R\^F=r%*`:,18k<;?/.CkLp,D&ChUO,uo`okA;6n[3V7/X]rT+h$!\bI7/!X/UI%/elBYJaBYsVs$;jpMjij_bmNc3$?lT6dBk,iQ&7n3#jIpZ1'^m/0qLi3#jKF1_EZ-Y`NN?O28Y!)V[6f1o=Cb5"=`j6]Vt.CuQ6T%q&mll5/-MLJU[aI.1mO5k+!P!aaRP/30rQl.`>T[UPBnCItRgVL"S-'L1,8dfMZ[61WZ70VZnm8r8XRMMJ\9W(dErJQgG&CMspP<%q^f0_nfeuI=C6#7)290O.!ZsE4/22)kHhZeRH2$pb3'raJfD``fs-F7*NP8h&UY@jW/rS(@ME(#!lG[<-uL]MYmHtZ9sD],Q&A>G%E="QT5sYf#&=$WX$,[RCW7jmW;D9<2"XL,AC7$8CCn:gmm:@q4/5JQWgPD3<*nSK1AnEgP\j=dZNCVM@;"ZJ67_U4U<:\e6,6#pe%0'X`#V"TPFR-8GKgJNpWo6RbA8G8tQ)`45fZP`^lX2,[KXs@BVQOP4)F1b`c9!tlsj!:),9^*@+<?WL0K!HpUan1Z3$OAI1,f>3H%b]"@>^#1@n]E4g#Llbk*\J69p![>f@Y_96nEYf?O@20JV5s](?.J*rMEWdXCpf4Wd%C4oMA?2J>?6^\"-?EB9K>Sr:U."]?Q.3E6%l5I(8/s(7a86_BOq(^(B:C0s*l1(tM`($XoH(lNd.3_gW,$AEpY+d+C'1B!T92@msor$;T;aUCKQ!N@@FmX\.79&3;1Pg\Gn5sEm%nEZ(UeV4VhIOA/86GVZQ=D\<e6[(l)+o(`MjD%'Ol\uah+aJ2":GhYbC#Lj#3=ec?O8DG\URe$.Eg,6:'7RpoMWR@\#e3X@DnAa)%HZu)2=0)V7S,-Ks,mf(+*8&9rIq<tb0fs]uDas9k/d@;).oWJB^uP$8kP+EB_j:>,-,0KX*u4d9$?oJE"C(GVW'0q\-Q[nLDNp.X%S:IrpPSZ)&]mBRPOZA1UobL*1Ql",-m&dMGY,Y"YaT:11P37X-Lkp8N-2U6M(Qr5KOb>rPoS)A)7hY&J4s0[bO,EN`F$?>D#Mf,o%]Gmje8EY4.+7SG0!r-=.D[Cu%@'J6("T"1g35I1Ppd"QPnS9?*HAT8",*:r.*e#Di?`3GFE4?XS:b\;=j`3hr@a"n"AaaK_1csh=%(P%OK0GY2(4UD]_jF?.Ycp,\4+(\k2Mm#J&'Z\4Fj(FeB=brI/po0:;O5+OZJa&2_n:\l%@*XI&$;,Qsj!Hr66<l>MRejP9O.ZE]%3,qNG-%S$"LaN:^(CLh.&1.Qu?`rABQci'GB!aA#SJgiADJLj\hjFMk9R',O/"YGab`ZVI4POeib^!gIoD<Wt=jIM'B%f'$*mAs3%pL]VCcgTLtG!<8)RB=f:IE12W(-gLMp:^ZAp4M<Wcn96p#gT)#<K6^'UBeU%A$u78jp<_KJD\bt49G'["Q,eOITJ&7YEaA=r6A@*%-\St;l2isSC<YPcP3k;4m`nkXFs*$bVUgXl8!F.#2lgB!':QUaQ#0_?,M#c_9FBVF.4`rXRMo<Pb3/LFb='AW@MN91Pr\@7Mig6.%fGcr]AFOfDd2*,pmEWK#oLEM!=LtUkIb-egKDXb(iOJmDaK,`&Mrm+"=Jq%D3>%c;9&AL8F29k(jM24mLmdSDiK&E^jUW((/#-^:%1:R!ejr$dpcO"17cU*1'1@[fS'VJ\*0*)>'o"Z2*`m]770c2_QLsnj;ma)dRW@rpbOu[r2^N^EXar<<'8+cD-INIEC]@r1IFKiU\%&D8/N3tE@Y"?(e&j2^k/gn[L`aI6CBs/e9rA@oY(U=q7`$?@hAh03mt(QKuY^rN9L0X'="K``%g$:F*ZTuDtEX($`$OneYZTtrWt%3aG8a^]H_e^uVm'3*I"Y%T"3;L),;2$Gs_.frMuO*0X0aM!E(*1e&7p6&H7aoT(\@J:Z+)iPCBKi1btg!5bE!_ZE%(^uVm73*I.?%#*^2T6hA,>KjeFQjW`JgSC/qI50g#IK)R_O_-tR'W5[,VK0p-03&Fkp3*O]og>H'R6Ju6kfoHAm&VC=K('Tan%ie+m(NM3$4A6e8%#%g-GnCqdmna(/?nQ8m#nZ\fWn?<mCiXi"$74BB4<m74IiOOXO.O5S$OE:Mr,5RN+ie?;$[AJW<$NLoR62N&fIZVqY`Y[o8`&AJT%kBU0e?t's\OGW'Q(C+'5_muD!@=UPhio^e0XFN^#,/akO6D.*jkC31.XXOh`L.K,d$7dP^a=r%_V)'C?oZ5MfO1p":-2ItRZ5he6%Qf5=`IJH?*oG&&oH&ZHL/Q'MY&OM5MOF.Ug/P7WV;FZKS1E;*>r]tj^7LRL/n7[tQr;2O4#tUT5#`7&_6O]tW/Q1bOC_.L7d@>]f%IKdhb+>)$U#sfJ==/WkWTHT?gZu-/p+P057Y3#$k/WK`=`21rJha!\n+H1SFGQQQR$9=%Q:FQ*ZTgU*BPK^ZF@q$XT;o;Ll#;lk:%&9%G;_#lO<hEce9K/:=&;Lla(7ak18K4C#$0L>i/UXKJuN>P/^0[i9RP1`<`'W1&t\-bOenT3&0$37(pC6*`fS/sWd%3uueNgK]P%lKF0I2u^ckMp8JIbq]nB=D$2GWR/c%Ktu*8Np=iA%rh2CB4ngHe\ang#/6a/?4"?aF'&<IZ(kD='kQA8F:EUcB=tgQ6MR?[Is#pZ%X\XHDO.Qji7(#<A/\.PTa5\6fc>a+b59JYd72i,A2usacA?XWoHe?RB@i%L"J\meoD-3?MAh3O??-#2DSA-lGoN1Vj@i"aohsBgt%UVl-;F!L8;Qd!mmhcjrB]iH3`HHjLV6)22b=iID[?EaA.9bUH=T<%YWg2&qHcl:"dEi-&GQuV$CO29^u6m03L>%mXPri5_h?^<L%%$Y[6Piii2[SSSk;Mrjo)HL:R@?-S,"n,)GN;!bQ?ZVhpCeTlIV4K$#S;fhUr40HUNSM`$r(`O%,7:U:1K,?d9^@megImQh"M3pgk%rau,6eOW(&6YH)l,Xu/@.lFA;ec.<lj7&Z(3;ENT,l=4/_tAI!(Dfp2!K3d#a8^.n!*K5Y5l(E^QhGq/lb?O@s+f:#heG@RT.Z%%%6d@3VAn283NI!+(XT*$!%pm`/Y[-c`.tUdOaBRf20tfK60<](8L0O764"Bt/Q6G;b43`ldr_JTp\Q<Ca@/c]hXSet$"/;U@kp-\t%YqlB,i3;`u^b4V;1TKq'rrp!+K\f/\ZhMtBCP)QGaraU4Ii="7`h<;>[a:gh=;/P+pM:'VdSL`]Gr:1Z']%`lDZ/8^&k.Suhs:6M%!9*[aSO&oL^"'Irdr;h[\_G?7,0_`clEkji9Z=\=nT3(!SCdXj#%#^jBX,&p8Jqd$bZc#KfZrY&o>3+58>t8/GOS(qbTksn65RH@%.U/<Y^"_a^qT\c\(@<pJP6TU:pBH\LHLElcKHWe!=MXZ`?G51`emUV3rW\aYcd8+:"PbJ<`jV.p!OC%Y<F=DXL/`;BNeafRR\IdQ%PW/Yt<oj;u>1WpCdM5]#CV$use_>T(q\LlV,iANjp)<m!n#o4C>N=TC]!8"/fPEDMJ%P;Bc/Gd&`Eo<GU`4!a2Iq?Fh*1Q/72oJn%`97@4%+E.!Qn45:_.fg(HbCIU96<H6097+r.a<FO<WDrphQp?p$+TK1h0]:DF-t?j?ZN[B[!6IuP&@M@n>b+#H)(&7F3]*,hG663%-4Yadb3VL,",h'29)YS#&4[3K#\Q&,M=+V?@cfV]k6W!$8$'8p(L<f#H*"L?mAC4JjZe$*27l*akV<&Ukhu]<kU1l-FlpC/=/4Bd%YcI`=dd9ol\bZ&mnZLHSkCaifN>mGFX/%L.[oK0"6&(j3*$h!XUtqe8s4%iI,QkPofGBG/qr6[Xcis6/r!eG&&9*Etp<+gi:j(LV%3[.7[%Ge8'i@\0J41ZKYd15"&fM>2@=,Q)&aK"D5Q[0L*XEW*p5Ip-YC5I(Koqt9arR,EhX,RliYd,,S#@;<QP7?k:n44(6LhBC]%Q%J?@r;'l!GIbNJ`8Me$eQ\#DK]A>;2?r2--aZkQ4`H[(6<utd?WGWM6]L?Cf'7@'**"7]&CpG%@qaC,PX4tiPTf@u'F-0!N.Y+d%/Q59?l6kSEMCANO;jrJ_aH1lNmPc+8M5B'LUX^iH-#?YIj1F3fHfmHW?-\j;@OkrpSm%@g#6)lT%XCpOF/$%u*],Z\M:EUQ.]I\J%060DNXghI0Cpb8)F9PqMLVVYT)%D=%X4_B$#,%F6ea*fmSN"Sji=./=6mFO$T68ZPRD[$ONL&&[Rc]F^GTI$B=3!O=k-"":B)`V"%j7qD/'bCt7U^q;KV['EXCZ$3%4I@O6l&2TS^WA#@'K!IA19BHOa_U'DVos^a<k<PcPfS(0gX$CC!ujk]7MGp?(eTQKA@'\QkLig]%mH;L(0,dWWp@DtTe=+)MOD]k2ihn6n1NtgB9s36pQuhSB+.?BNOO?iT2A%gQ?gtt2:@Ga`*;0OlL#^IopNj=]->1,X9/+$V_@!t?%PYsr7;Qb)\HNM]')9p7.D+:,gAn7k*M(N^"G_mZbeb\E#0Z.sC=;>H$("f@VR1aH*8qEuiA!j:Hdu3j3_TG78`*,ii-rtO?VYnu=%;8qgr_j0%a!*MK]]\W,Er_0XmXoiu'Nb=\PSK<Xr?@8jDVt6;EJtYo.h>BNlWaW[8<\(^]s/jt&KH\)*Kh&@N&+iu-ha$[WaYgnC%DRiXk_KQF>G<G7)7c\sVXh`Rq2BmI^o8*-%Ae;SR&FIY%8cTV3et@bFmV`BZrh,O+Ah=Y2%`3tY!^F$WHh"3phfPLJiH;2l)Q<(F%lGhNJYPUc<S9MS.]39UN=NBjc#nk=>_&08o/\Dp$Cb:)^6]A(q`&j1S/^P94.LnMqU!U'54g4G[(g1,[rD&&dr2@k5c#C9j!>NLS%)N#]h</5N)&fM-W$dCBUU;13CFEh]qRkJV20I\C>qP,(!:MQ"AG()B&So(k(kW^s1n+CR5l/\=on>KR)4>L8a%57iLGRcF5S1k_[%l)KY3bb%P,gO%4u'*\YT4WL(#<r<DAoX30F?iG:mYZBA9X!LUEp%jhI,X&c"]mE0\@r(`l(u_hZ[,,03A*cF&>>Kah$QrL5W?!gt%K67B+(3<@GR.8!D[HcT,Gd-K[^tsKbJ'0e)\C2Wn`+#i4DA5em7^+oeaW=Z^q$%+RclBQSKNk%C6lT/1Bo[q4?P5d0%V$G=\>NZ2%4/<3e4\\c>6`Tgh'\d&e@VGeHhWlQ5UGi79J4!=nYO[2_d]g<Q6IB:Y^XmgNI6SPt.XP?9G[1f<-nbAP*orqtaT@ORl1TRMg.B^&%X7\\!*I^t^k,8dmje=,b2'/6#eg4@22dYe+H:gjW[*?F(kpKC=et]A+M02u7[T7T>A'so*chCf4?qiQmY_88[",oLQ!B,.2,$XZj%18<k-^UndK63i&W<NF^Z`;V&7VWLOUAkY?l#C8\E./NN"Yn1,[9i,V^'ej*!pUQYGY][NQ#uZI,oFki,.Qi2-HHQVX(HtVQ1;Gd4%&(_Cmlh>&h.=k)n*SXA6-tS3DTPs,_[^.G)m?UYP@:$au4(g)r?03g2RI?,*nF48"I*UM!?$njs]j&e[,nKO`hSGN<%)++t''c,;%eI4q66LD#M\Yo2:PH6@>@V>0kbl;5YAcu<HdfI+VO@!">eK]Jp?fRdW7]#]U_ET9Yk+_Gjk;W"k'?sbO4)Ou/d5l.:IQ*i"]R3iM%&"Fru]a?,IS<ZPZ@<0X5ajf(kp0qU]ng++r&ApEQ3.43<keW>X4gFe+W*Q[3;Y9(D-FC_BXp9/iKW;\.rjCL.%`cRAl@1[O^dW-a%>E*)G`"<>\Git@e;g30p/>WRpGMWW0/E]Y['N2Rln*QNHV1H:6Xl_OL?Uer!lEMHIE^soUXk/,U^WGcmZZX68ET[6i0>8i=hZfq"%DenNQGOBjR?MQ20Cq=QHgr?o(3jYpSDTo0s(=.^$9Q'IhlV+`1*R(V!rjfg/CO,$gJmUFI=gbHWT2Er"f#b*iEVJ)a(;aYF2YE?G%8u#JaXQGNQ^K1p=AhKU_Q+).7YO-),a6H1V7nq_A7-n[Sfud@`osXMY=M?I![^T;rc_iY!^AeZbSsH>lD5Ou$[7@fJUG@p(Sc1A@%boZ+X^XlC79sJ[9Ap@=/X>e#Q?2[fX@@3[tc(17+[4h98*6?>Eq=Eb#,Q,+$&t]tX.X\R0qU`FXjiW]f:bS.0JNl!6n7D"moJ.r#%YJ>ok)kfFR3k`;X/$YX[B?FF3Y1$akqiARif.$@/G?]OGcg,@eA>akI]+il]Y%hO+Dpb,)SQuf4rPeS-2eoG-cX6MDV8rE'];SJG%?ff28Om7"/=$M^&Y>_*)IbnskLp`Cp&rGQ"g)kCMXaE-gl;Xk`IbKeK<6-]5l:j-^XQn':\?jYrM4W8Oa/*&?p6^Q[e4s[P(Z3j3%:/;ZB@:&l<Wq<G$YLKPY;LGSBBD&]W?b&5::7&koUu&/)r8h*]Va@h9hqd,_\d`b]+,aLgi];MQrA:A:kY@2>.rug/k7MhdA-:Z]%kIRKn>c52<Ea/APh5Ru5PP`e>4HA\@`q&q@@sMY_qas"dXCBGSDT6duccog%otJ@dH?1ajmW[!V;l$Z@.J:Gdh[3F$Oe(pAINHOQ%]%D8\5)JP=`mX`F;ZIPQ3fi+"KFiN3>M1d?B+VmK2q[Ag;7a"o]iePHFK/[f^0OU66<:,C^"%L?rNRpqhH%&*:1nc8qSq:FR3(&G%d7US[eZ"Y,DR\LEb!e5>:oCeGil-5=+5Q1tg>0Sd@s&@9l,CQk([;^B=EppfGJ!aK\5(6,e`*tSh<EnRkJbX)ZPhs@HD,5[%])oO%JhM<T40?"f&&bNOZ5qEYf(.A;n%X`H2KGnV[iSU[4+2?%%_fu*HDcYp-f:3lSO,!2gZ+Ka5M)1(/!6CZ&+XA<S\C`Y(9Z[YXbdR$%+((_.aK_=Q0DB@BrGlGHeN[hq9W.%@bkGW;OEFa!*UHV#fF-.c1L%Q=n$aciRL:jpakW6ET:bQ_d-4"Qf]fT)o6Iss2f$CaWV3nG%*Z]$,.IFM'`Qb5bT7WQSp\HQ?F4f_\=?IScBC=pS)K`RH&*_TUNl='8>,n`'VppWai0e'AA<D"\5?Qh;Mo*ZmQedXLm'I>TWL)&%%EObKC3j!f747+o75`XORY+OhSA)4gLAJ`'YVomTPiLt1cF16SbnWl"k(`)u!_X-sRC_&RlQUB=mY?-*f?fnZ:=78<P[U_#I>TVbh%8&"r'c[6K%mW*rY[j_(<MjmVXIl\D=*p0-(3g2/?=7C'[=F4lM7VuJK[iqK6h0n\Um6t;(Y)I\amMRDH]3<G5_8)9nIi-ROpD.AL%:VKoV]XL(OCj'adj^<"VXrmW8JTu[3bA!S'DtSnGmENtrW4-/qboRl&5$^+MefqjeO+0^D93\n"pi\MGWPj(+-GpOIW%VE,Dl]?9%@hJ1E/mXaWIc$02>?^hdheSNehX7O1PkAs=hHN4aNf(5/)p?BEo[h.HYCHBZeQg>QlTai1^E?%[7>r8%Irs8u)J8Wn2ts51m2YZi%Ic].WmdStdO"6BJE>Y``b8[dg7P4IRj8-8DQp#.O^\ob@^FoN=RuP6dpA<P7e^D\3<n,a7hT!I$Z@00gKQ$J@[rQ3OjK/!6DhC@^%D4'>#H[k1,Z/WISln3eTEZQ'TR8%I@rX[*mk+@pj<mEuX*?&q#VsR`l*.3maY?\3"J"KlWqKXg%qXFE"B'FL7'7W)4&$nC)G4;/E%rnHR)k7+)pfV\Y\SdS&#HP'N!lVEc.9->4(Is!gVS%m>*G[(G'D78.W:CDX)f:/$A2bqtlBo@EM-ZD$-PXTUU8WBC8oB(m6^/K1M%Nasp&/_B6'mH7YhVr[$ZF:+lspc/kt4m))(k%@#Y4#:&fVs*<RSLV?K:%6*KrkENch.cZsI*[#:?Hi$)4ki0`3dk=:R.E?bleh"B%FeoVbB`3.M4&p3:i]E^5]niqa!`u,p+#?rG%^#cO\5)>rSaM="5'tN2/_LiCSYAhu)2I)!fM5;(eb0a[ZRW)/]g1E&DtZR=Im0d1%G;@bUe-"#@WoiZi`_;7*H_1ge=\`/YR!hgTRrN:<$,0_OiaOk9>8_:f4[P)`Te=CSS=B\AO&kWi>N27;X<Y1"e@rM?m^)^J:DZ:7%/`)e1.-ftA!-Go\fj/q'()0KiIAu_iW+>G=SD1jehgr\'!6o@L=t0EL0frP.7@uj3D/NC\g^fL*T#H(ha3;3=V[FSA'mmG3^uE(o%bsF)Y+!_)`ZX?.Dif9[pgO)tD3<XAihmkk'58V[ppfrXWac"%jT_cbq'q040X7V&'PJpc.iBW.g_bUg)AFi;8SUR+#IW`U([\SPn%@H2t^kU"c_/'0TGCgDHN)E*)G7lJ%7T>ifRl@h_&AL/3sl0!!JU)fn&-Z0f[XG"Tr;A2.\nO4Tor4VlF4XO`cQt9OUOm;Or]9?XZ%`Hra8n+ODQMYY<l8<UfL.7FOb!-tsm'Kt!YEgQ71*IX[G@8T#aD#CA,ebf?+gOp3!^n$)]gF.uq?1mVri9/5o4=&Z_n]*4'2@\WJ%MI,d<N7a0Lb2jI,qcQq]^Dn4g1,OlLh9?C!o`F0I3'bDOrS]MT<'o.RfCB!&.U':<XEI04N&`"N_GotRGorlpD!7X8Z#Q4>nD!7+%1i;[9I70b4.![)Vr*Eb,&Z;JO>b^bqF=r--`S]eTmHBNuF5<VH6$pi%GP0Y,aAJ"uo'80BMS`nEGV3'uX6bU)=)=!C9GW]3Cl7Ja%otE!].1dN9an==3.CQLuCF?S'L26`4:@CEi+*-V$[3&,IX/2Wu.kGC,hTRTHM!M_U;"4-h02^;t'g4X7QC9aEi_!!$%C[4cq0h,i%9@^7MEj-s&LX#:Wq)P_QAFhtbs#?4$/0&#*-qMp*K!+b(8R^%5J$3p5+DlHflcgMs8MN"\`2%bT>YI5/6?\_fQ^0knbatl8JkZR)%0cGCFXB.oDbE\CP`r$0TU-YNV9Ln\')N2#g`ke#iCSu\;^I0#\OEOmPNPii6l^KcHj1:/M;OuH$c>=%LRG8p6)<sg^o>/Uf>4Yq=%`n:^25u2lEY'en+N88uL%RtE%fm7H;G.+]];Us?`.Bo#mm0hs/=\:[0Vse>jKt*Q=`sMtnRfX9/ORt/3!"e:L1JiftJM_oPD+b+q%TPZ[l-c=S#i#+^.bH;<7=&Gg[#B_kqS1RD12AnN^^J9^Bk<;OQCT0'+Xb3"6`Z@1N40^\;Pk^&C&9,N2FaOlop8Vd-:t#sU+CV@B%5C6<A!&2-@;>pIGnSPD#*K;2HSc(5S5ZJ#n[R)h$``Vg&IK*:[i^MXY7(%*bNKjo=2T#!@o?%%!M8,n?Rure$XU*T.A<"[i$-:Oa%d$8$Mq,r)T5V13u.d_:H]Zi+i`V&p,/05HJ=^J<W,gh8l*R#lmNG7d(Y`n8%0i0RJ.8CJ<h%/6.ma-daq8"?eD/%5`"rA<9&#nYF%i]ci.@\`ts4YS"*c!l>,m=1-;UC1cjA`!8[a$bjs/J#N<Z+b`:aMhX:+^W'E!`+jHZ%dc`NI-dV^F=RB1o94nn9@1;Qj*RU2_"/)%8.GE?56t&"9=T?,=+`er&4TKLlXs/SQ\1q@N0?j?FM<2^j&^\ehmQ2pZ;n=cZc_J6o'K8]C$-g3N'1#<F:SH,Nn5p/+i^_L@K_4V%k]$59CGl5U7LJLXY[tqb>[GSKpM[jGXtN9(]*&oc6uXi[0LcTqKC<Tt@hqu.4)D![L:e_)XWa*kNJWkAPqq9=q_O4*:8CmY[Ibrp%^L@poa6uQZ$dDCIaA/M$k`lLY'd7-M&%thLs$=?]l$[<j^HsnX@tClZc:-Ko2dL,(V8IsUg(5/\j]=D?3<)O#(PF\Td3iOc0@#B`%rg"1^]_UfYBR[,^[Cd+qd4Qf4B\pC,Ff$;/qJVK_M"b6)9=4\&r1ZuO7&-%ABNGN[P:)Z0i#l:K:<ra'.3r(8hS5R_U65IBm7_=p%:b,IHH_km,@[GBK`Q$iA@+14`(>pIQJ',K]Z/GoEdU=Q``bu6m!El4`pW\u=VQMX45"(A/MVRD`CHTS!4A9Ap+Y.*PM-4LCdAftX%Z@82MND7(_!Vbg]>t0;12)RHsmjbl1KL-*,5s%FB\WkJ%"4<][gIYl]$7X\ckFCKX3PV"JNCad?jptuSY6K(lP@NLJB&DKo7-VQ#%4[/MCL+'8S>pt@^NpXha\W=XP;d`O=+9jnCU"*cpo93spmh:J`]\/q4^Af7T$V/ZThc&2%;6B?@[8&gDBZ$2D4-C9:aeNW=g_.=>%d"U?%(K^0gXUVItK$*f<.CQ"@gP?G'IXpeJBAAaH;!B]Fm-5NN$UZJfe<V^DV5BISBt/M<8K/FF80PJ`N3uTO]93)#OHQeGnp/[K%.Bl,]F<-0B%Gsns"=]p63JnBr.].THPBN-j/I=eRd=Y)[i2!4%\`WY\Dh<?#j%u.u\OtIlZW#RpMiE,n;(\;e8RB*H`WkH9E>W2"%ilR^IiEI2hcX^GTD-RM#DCifG.-CsERr<S0.!Q@O$)kWpkZE13GrqF2$BOD3c^.isT/YQ3<t8lobd@\uThE\('=-*/ThE\('=-*/%ThE\($_6'-Fq.eu#+[DOE.T(@j:")![c$p@FNGDB_/-r-F6JcCk_/;EEp/ZBkQ9FhA*;2bB@,>BD\M<\-"kSM3P:R;d,blrk[Gb^%,Nd?!B@(Y'Mo6(HnS)pt'Mbi]%t&aOd!"L<Za:jchWsDmDqN(sNQ7k0l%)^D>l6d+g.;5-_N;Ilkp*llVpeN:P/g>Rip<mt8nmf0%bd-bW/J;k?T.V!42\M^pVF(7i2RYZCn[Wpd0(4R=d\Rsk4p=KUO])8A?d'B*,VJ\.8/NlY:IA(C.%WOHG+=S#DcV4iDBHW7GZY#I%I!Y@fXWRY*mq6d+Yd&+[CYYN-KO&=[L,R1TOLUkT2lkc5boic.-JJ"LM'BX`[*(@fQP@[oR%G.4o;>i4!46]MRDoh1E'p;'f_d:(%ZP_D`Ig[%eX?/GW&Q)3pa[_H7p"AZ`R*lPD2n6>pQ8Zj,BSpN;k(u;m-BIWMf+Q]@=dUIDVb0;60Gb4_4R](:+A01Rok)2kp8>t5%$fpj6%[,(noQbhu?q\EZp_!)4L?8sdFne,h#s\s.p1)T_qU@ih^]RF'Hf/1&0\-)(o25*<c7X]F"EWf)-0=Y+c&#"d$ofp!EtH?g%XI'\>DTuXT`Y*IFO,gL/S=))d(;CP=nfX]g6:d(jJ)JrB"h3&mVU)J?Y&jmAbO3^[7[r(@j-IUSj^O\J)Mf+f?KU9,M>\:.h1Mh#%mS7*RLgCf*Km"-"]gu'q0&=`(pnQE82f\eX`bY+128V?uM5bN0B.1DJ'(>G1Vmm2rr;\SsZdRosd#fMB/n/1[MiK(+AU!p3-Z_ka%EPEMChtJ5aIQMRg=B97RMN"IoqgNmVYf3j=\:fea^XS+dLe<f$SB`/XT[I@u`@c')m'6H(d_\uQZkrcl["BbYSs$uQ!>7qZ>Z#Co%.$97/OC7d;S7ND3b;bTJdBm"RL>>B4RFp?[?<Z,DGk+@8[\WkNkj/djhWbU@l-_t1[\SQ6#q0<M;VN9V+qqQnrdB8g&K)G>ioE1W%p/=@iKJ[CV'1ZRe>L<56G_>L7E^YZ*80+"g2aKjOM81?F7S;!`:X0!rkc#sjh(FQOcVP\JqUs*^IH,%#jmKrAEY>i6V;rX!BcW08%0;K6rLD_P>dlg7,F&j-LL:4?LEV^O?*DJRT/8b5co!r0q)V2mOZ&/$ARE'M*k'k!??<p53M*Fp`p]_=&Y)>N?.Y`:qgG6!5%sjgO%%'66kfi%C$X@PbriP4`L^/$g4/iq9Bm<lECkDr?-%qk?_%V3LP4!/@I*NJ/^_Zff->tcPk,a]*$8[`%'HoT\Mm/FdLjhj+SaSq..%C$3Ce&]JId\]*XI7@b'q0_KfQkN%r)Xd3JY_hEKCQt7:sV+`&/A#3;n&'5V\]dGRSaDee/R:]6*BU?Y^]RMqeH9DV/PWL$eZkGXS%@cS81Ca\.'NsQ76nIoPU@66j&,.70\&)Zo)R2?JSP"reH(1>%9V*%F\)hAG#9^)(!?m6p]'Xeu@#agE2GiEgk2QYb@V;N?.*/eCG%lJ9_OUoO"nrKkXZn>8:4dt"Eg&_JdTQQ!:g"ZF;"_S5Z@BAKe8;IkR[%/X-5K8o\fQl1)$<'jP&@sudA0!MMbbD%FLF:L0?+AF(*%p$Q=I)6)!8oJ0>55,OF(.a80]DT9giXj8&jN[4(&1/ag:.EG4sKj,F_W1>d5e'O''oZ'3EKX@8:&i*"pTrFf)1.(N8l7o!ebPKYK%M+GaCOf<;k*#gb>B9Z@Ta+B;/%o+JeNl+u!Gg:Q5E21B(a%_7,i`Al('b:$c?IMY"'ok]t;Il4kPR?Tna3nh:6iB$bM=@bgq6BDG%+>H>lSMs+#b40]'"r`EU',W]U0LYsZ)iH_tE-*&]Z0snfGhg7A8n$aTe/?tBN,l^^#OtE@-pl"P:_-f;>rmiK.L.=^b1)%a"$0r$%`^Q&sn&B>,p[)montUANZ!A32%]d:8)\3nF.W84q<7q4WR;;.r<46f`hh:>ck>tE6hfhhhk$klEI91c](H5tW9H@!?Q]!4uL%EU6%j"3G2.r\eLgssZKDhk>W"`/7nI!ZNnlujD=m+2(3[4VVDjYQ8AR^dAPe#>MiDk&K<a!J>DB%V6kU^Xl+\K@0CSM'=nk$R+gZ'GL&%=FpAE1n![ZT*!SN1`!a)?A$@;Gf=5E-L5J.0uIn;<mSg0.b5*DT#PlPcXkYeb-1RK]8*1m[s:-Ne"*hU+#0>GI=0_3k#"8o_sTW1%Qgje.._aAHos3_<^dGU&m(`\c2`hiEF(M-)TDb.'8m+ijkM3rPCLt2HU;bo6B2J8#-]Ijj%2tu/!fj0R\U<IYd[p?0>AaPtjB%5m%ZF<0=oR:Ai%8QGm4WBM&bCXLFkq;r*>Je9DMV`CX5a@,k-V^#jf,q`iC93oc,!a9XBnO&cDj!a4Kqi/(VLk_+?d0,=f/LhuE^QU@%j'O!sAphn;De\t2%KgG/>m%'gSi0Zc""?"*OQ-8LoH7T;-Lk]iW9p`t>sK3`oM1oNQT>U4;)V]Z/ff_P.:pss%8E492I.<;9K/GY%d`fc%Qa&]54KWG2.)#&g`i#+sQgTNg8[IYNd)Zl2e+oo*jjKu]>*#%F(DUTA:8"%R2I097?2WQNEO4o(%)[n74VMGVE>s,X>e5T0%'unIpMoqk@^N-@-FAX0#qIN:PFA]SjIS4AnflU*2W>k)m=uK[9r%T.&Rb;d[k2<a"]^aZs;,%MGY8fEh/fA0Jb,1*>V4.Tt_[OF+%(n2qC/nu7MFq=N'flUI$DICi-fZ6bq'f^Rn*GOT6B%'3;JY.*D>uUo"-;QFe/h2:.DTJA`2I2R=/0p"Ha2k-95_bg.'Ui-GUel""%-QJ/99c%B(o(VY`].e*3"1Ya<kli%lq7cka&CM22Ee;q;1>[`7M,1*lD^1u:S4oO&I<D"k\(-IfDaN6-F]%eQ][qBj%DCFQ!Dac&%BHQRp_]g*-<!KW%d!Aj@WIPmU'Q>0`h_$ho4o%?hkRFl<e)G**mBZg"P5nQlaDi.r,1H.=R"U;uH[alHX+Z<-7qj/gqpX1,Q1CA*%qb38cPC2A*mX2LeV-+l]l^GH4rKT_`l,G^s4Kq%1qP(T!#8Fc3/l#RsVC@LPc!=jJ0mM+%L`$NXC[QpUEk5P4ak,=ejh@Qq4ArU?%F)rdd+o.Y/m_RED/@O-U(=ULhE2+A,[_=S</l23aeR"1gIJU7@[k>"dmb8V"R:&"R.-Oa09;EMLmr*l^`!jQY9cWEdmGj@:e(p-)%@mD-3bpVMr;G4Z2lh!?1:NZH)<m_@Z(W1@&r8\Zk9li8C`ADd+?&YrRU,*n3A3PKliNfp(_Y@]tG*6o]]iLM-RF'59ni<%jm)0l7%m3KkmhARKAZ\o_@3O+mr'+ZG@7N>86AK/`p3rQ%.fN:/$^+tk*kA*[bH,gJo]4+Y5Vm2DDb,G2DPP.h*[C.&KA:Us/QS\k/n^p"S%QYGoe:<lPDl:f6]?qjAa#/dK:g-gZ`hXA4=EDLFjX8Y`]bDJ!-4,-)"'T]Y*:$kW=cfs4p'fr(6gemm2e,:X6VG1Xk(hBF1L1)UF%BR?k7nqe,HL.k"h#eYT+h.01>c4+uS4!IS/iNO9h7_#pRJfF-0R?&"gM]R/]h7,E*NQ+0P2s!a[T<g;<]VLcNgnfje:O^2en@mN4%*I!ueDR`>dW]=rp8Te>2Y_9+Am2BK)4,T"\Ur\8ObT*i=@hWYDZ]Afe#)TM+GM;(6L!7ROLZJq-kDHZ'@5NmOj3Z'c&o4b;R#OiA%?YjsKn`Rb8,Vcit.Db?@`m/K5017IsfsC-[_s<04d*5?"'BE83)H.%o+*u$X/+.kR<,#%XA%M&io5["%UWp%mE8/Eo>P^(?m(8>:%=(7oeQq9tVHjnI4YMo`WBSI[^'\o`Cii2iA_m#Y<$Q4]\49oi\WD0AiZ^VZ\4`]^k%)7qm2>3i#+kJkHfOO%@&@X(\d8\JW2@O*[%F'Qoai7WKfgG#?")l##<q!Sug4NA0iaU>/^kcEq]M4'35]EOQf_AP`_s,)Na_cg#h:7>=\h!8fK=dGfVD9KGgr2AG!X8Jpi[Yqco%[s]E(0'/_Jj\k%;[rG_r*S$?jq8'D497_HB0"\7?k^9nD1Ug]Q'T68lErXG9:O,k/jhp2o4IsD:iG#JGfrm3&W(r$t->^Zarq0o>%c\:"H`S.fL=\PaiS<kI4cb;V:lrQNO4)5V`C%*1Poj$DAPY4^aZ@lWYqXs>N9^^g);J^)On+2k[T7iR.qW484)(_/0QZ0R.H?5R?%q=bquDWkW-eN2U%7?*Qn>rZZ550%g"84p`\]Cnh>?lInlm7p?Qk-"1D_I09STfJr,E>noQh50c:W1"=k^8.d,hAuIa/)tCtT<`dO%RQT(EN)#.JCS.`Uh+rlIipE[Mj[n2RF5bU0:)>t?]#?4D.njc4,X27k@n_sclh^\386]N^Z`SV@mNa`tgfB0sCZA0)*>1q)>o^-R%/]H5%06UP;D/3-<<a,.8Wc>>mL@*=r;cDIS"IO=u8=Uo`n"r1pm_OSH-'P2[$;eWX4c'?a^RB[uGJj/hV#uS3V%pX#A"1:Jp2p5l%.c1PhX..XWX=ZN^SLHe(@kM-bnm3QdND$m@kJp[^i;U`fE1"KCr`Pf/.LusTDUS=4cRQoA-B4)&S>TJp*d4^Z<$KLc4$GP_@T)BI%%J<o/1&kBr.1c5oV.F&`aJ7MsB$Jn>&!P&(<l-uAT@<=m"2WpjdstAuHIif(b].NmJ%oPg<!<dUMa-PX7EEd99(uL,3Z5fDJRE-c%W=))[&^NsrhFUP(UEu(kK7H)tEG%o/<5>-Jk8]GF@l8(0]It0B!tn$m)mSQGUp.jaO94B9(F6<,7SF!XbPO,qS8jkCRl/\583MH(%CVr;noSpiQr4%&;I:JCTlcF+bgr]bZ%DDZu4^?Dl0c#8\eef6^^Z9#9N2a(AL!k\8X[>/Td'$eGblWi4WDF(4dQ&SX9oOIp?GLn.%0af[P%\PELa,DCDblLMB/Q60\VTf-8Fc0B2:=A$uQ]N_d+q$)A%Ub_VS+nPMoJosWkSW\(R)Bu[OaQ6"e[OTZ5W<1$1s#daC!oZM%P&Fm#etmbh7H)8"PY[+B#3(.OpJS_])qk2q0'/"WA(//V:DbDhVfF4.=abMshZ)f9I.=[W:%M8sf_[0H\<JWHd\2!M?PV[HKNtBH%%<h14o3dBceShOqTd&pt)e1PV)#*mG@*H@8D]37UiOs](n$Yr3YM[]T8lN:P0DSY`e7V,X\^rM%fhdmglfY)h-CtZ(iOs]^>8Ar_%@iG+<,oc2J4,Cnef.T*gs/ga40r6Vmoh4/f,Rb4IVRkA4H"]Nf3qrJFis(V(p\H0HaOXf6hs9GNga/M+55Dm@aZIeBEtZMe5N9/D%\B.6cbVL3]jS/L>jgKG>2c3W0d&T^cSj8S7?GC#Pf<LPe^":THG4_ncUYj*NKq.nBn+B>feSgWJpsLgo`93)<G->942DE9ES]8?l%p4>o\XaXLbn"f1s$+Kd,p0C@2Y@$9eA1i=;7_@8*,.,_iF6,7Hoh3$LD`V$8[H''gEGKq8h<UE?ckX\<*V3UPjBMR0\;tQ]97iAq%j.#fX&,0,>WSGNQe;-n_bn7\A04j!-jDN_/me)LZHf0nuja*?Y?9`nbEqi\M0sf:tgn-ls4GA.\'%`Vr_#%'@f.Yg:*p#T"naGc:%h8_GX2N5B#DnPuB7eNUQ:2^EqlSm6lI)2\3-gFBEY@$k&IL2F',MhZEYoHDZY@"T'j3cLip\G'O$@(+]SD"["YMU2%^+o'KMeaX#%km]*1oc'2Q17`djP$=WIdSYCNIDhYRQs9MY3'0:EL;&$5]ZdCSJ]C:=8%[A+apd49fQ?QS91C5a.lrZ:rEP:M7WZH0_PPA"$K(/.%>24/RHi9*@-6l9W*$aY2TpL/-hak?a'CPNd2@MT+2UT3eabF5;-#q.UrF/T;hs)#e1,A..I`X)u6?YEaqBbS8Nm+XHj'KK&N)?If%n?o'6=6Lq`i:sWoa1p4Z=ZHVk36/_a03U@UWd.JPra$)b"H]$X834\R6G(CQoi;>$G(jb^.V@Cop\qP=?qAJ!@52&ui+)Y\G<Y(V%K%[gKK[L!n'I].UG5FF"bQjV?\m><*=Xu$E;3$o!mo2@7pNgkp34&2(4"ICDf,'\?7p8d=F8a_(6Kb\h\D&^>Q*&g:+1!bMKB8M1%mCY-"o2B"g^\BuoahG/9%Mp(fh)5/jnDh?0HTli1If"9c.V'&.(RB2k\,1/f+a"<E?bDsf>F.F*UX,urS`Q]'LN7;.c].Y]jS^q0%j``ZX@scSG?7[]%HHQ00Co>Z0AB"Ar0?ZQiT<<38mV$>+A,cF'I*T/N^#%?:l-.<K%ZFsg/tK@i?_5baYpO@*MR@B[CZ<WEk?-M"%3I^AgRTjR@ce$F\ro355,7]+@cEuC)W9-"^j'/%:)+o5hX&m;.YQ(mm-PfGqgbeP`?@-!,^N?eHW;NS/%r3-'N@40%89U'P@d2o8%)HeX`]m.5\s6+=/p#DJ/`s4UCWK<)ZlfYJLr5qA"qK1TldOJg(06[%*IpMDXW7JhJSo^)_@@HVaCW>>M+!?JHXZp%E>FXk7mgGMu%Gn-k9V!%?g(mfKueZWf4(L'=L_N)*k]V0W)LW@;uZ+.NpOk&akd`9m]@B`W1$"KrqKi1q-h1j@QrU&L/hi<W,qQJqLV/:&!XSMJN%o)8RC/r`g_h;kSpZ0D,/c(4;rptJ]LZC:`n/a_un8_'I!?d$]?6,L`X=.e>5/EE/`[l*tipN]aie3DM\a3We+Lc,)K']qmJ:"d+J%bu:s/CnFoWB1ORel8&;E(u+JoTBeN6':AUn"9.(^ZWDFF`PsD+Y0;CoqQ'=oI!["8rji!5rT/!q#B1dSJ?Fds?g`ger^AjEke:0\%?X-4L6IpRMk?ko=r,uG'gl&T9]iXC9nM6)'g,Y\*]4F"*o$5SZ'>5M1q07mKeQiurXC/(3m9%;[V0?WT5Et\6RC3"g1[DJtQ=Eo9%]@%Vs\`O6hGp&BK?0^N&cRM*BASgO'UgrG]Vqi$_dr+mDa/qaIMHIBfjU+KoD[O/U[RtK"AUXO1l1A2Oocc$7S"e]L!%h5W[?c;[%IhAmHH'39u1!.<AGcq.O':LKURLM+=lB`*P'tIqQ_Hd+Vmda"Hhn2pLMoP_e''$%S*u?^c-/[M#`V7Yd^Nf8Hq_+#WjQ4_N2[9ZH%3O4bt],PDsIV3aT=+9L-MubD(-^t!<lVb0@qn2lA8)WLoErEiR9n(Ko$&ph4n7*DAr/mmn(&=O,DEN@Gn9Jo\rG25_V7Rg)#L0G*%c[S%qqk</P=4b&DQ:GgD^V8$Y;8R^s@uJZ+Xo-@7nau)?@HCm8k/%M[LsFD.AN*f%^]aa%H`X#R5PH'+4SK$!nI+oa9$f$q?Z%au%[n=?uel1p]=7=*N1ahC'pU*V/p8N<9m1+BUqRF!4*VJ`"PUcq"j:hf(]iLDZbZIm5.<;<`2mo[scP-](W$ph7gYLAcj\J]$NU+aB%o4PIY^N4k;IXfdK+phFVDY<M=@=>Ua(%^=sr&AM2m^0."mm*nu4QaLN(bF+NV3RcHX4>CreYes]lsX/6jk-Z#Y(-/a_V8n@d%!7)%!*eW7+Grhf4qT/u_YbTW\QP];&'7PWZdb2.&u^LYBR+e:H>t;2%_fJ?iNc,R7(70j9:k-H.$-.T[p+Xpo'VAIZ[^7GmH.gJ"+;o=%QmHGZOKbhQ;F6g9!89-0G0@YWMU->-a5rVh9/[;L;0tF@M)^TA\QJ^TC$#<T"Jm5_E75sfJj[:'g=G%SH'OZFBD9",k8p[UaSJhM%c*hE9mTN?%#5GWN\'@jnSZRS=oe?Q494$N>B)QpVCI."+[9Eb$+d#`Aj.cBDFp+BKZ16n]/P1/94^cP_<L:nd*`^P;Te\_EiQ*ph%2L]4i%=C@2IXkR4IZdh;p=R4mH(VDgaS).W\A892cNe,u?M[RtdJQs^:;%ud(:6ggfRU8OlSWY?S.abI^.`jh]GPLmjqd(?pQC)>%_@dF6MhlJhCmW[:<p[-$fc4m<em*6Dp>N^VL9WpSJ?;J9S[Gd%IAK[c(0Y<c`(f3KUE'rd:7\?U0AM0fI\I94CYPMab@?e7-]M8V%FlP^`@*+fQG5_->F4S9fk]7:`Rhl[3hYcm0>Q9-#F:0nd+0koa/%N/g79EGm)",0chlABW]WU&`PXbcbBInDOpojA)"!0>YR,<-$%LLYVYXl\-(LQg)6;BOC^>2%fd'1"/j4V@%2r8A;$Qj,0X]uVg>Akg?"BARdhHkT:'7r^>A#3P&?'F`2%Mhcn"Jo6&X%gM/t0(Mq&%ehBW"`1k[Dm3Hrobde3BE?Cj%*p#R@%%\$9'SkFNMr*[:>"Lr851]u'&VSG367o(&X!Nhf`8/STUYAf'?Z0(ThM?@_O'D54'l[_H%mC>K^e`X1JAnP0+g@<C-ZNWJA;XHhUTUofP?dmCN*$m6Lf8>R([RmR]g7(;em8T^-^LPjKil6u?fEVq_kgjS9=1deYT<?YI]BEB6%]1_M7Pt(c_\!657h2D^EX)&X>cZ24q9EXIaJnI%k>?BXDUS--`(X.5ja\,:mcE$UQmhP:6DJlY(0BC*S_bK;_/^M,?s89FpR/q[g%49.J/j<ZGM4n!4M4P]Hin'oq$(P'<E*g@[+B&h0nLkM<D!t2Y[k>K=.=26:*=EY@UjW%<)[Ir5;hO:3W5?D[-j7G$$<M4t[OKYSF%,-!C)IQZY_f;qgl_fhX-bqUk)cf^W87r+1J&pc!"?gLO+:@cnm;DK!Y9B54+n+*Mc4"7S]3Kl6Wd%dA7!GdR"Z&2Y&JnE=:P;F5l%`WsapMI*Xcji2VWGe*>*=8CB+kSCoJgLRNmEp7c/VsQi7?+\\f2oR)M?i3#N*\sH%ZM:F0$9ShWa5]1JFK9Z3_(tni5'o_\!CZt,%$N$st6eOogm08C3lQ6#EXQ[O]Maj4HgZ<@?Gnf?QSY=1Wo/13n\AWisc^-S,Gi%_W5PW<hXD]aAF$@CadPs1$l`u6]Zi5OmqN&$V%U&K1#aKE:b(GBQ2X6Q==V7:SpB!3tr+*Pl_2)W/><&qH?:eV%c0!;G9Wd"=S0ZhdL""rA](PPJPTFMKnro8F9<V`3QJ(st6FfcDi%Y/NDCaM<D^3ErdP[:XT5r!mc:TU/-ip6+e#&<dq-ml"+\$o:\W5.aTHP]Nj0I@q=@8"$d'aXgN;f\*Er`7,7of]XM\C;pU=$e8lC%Qm7G<?QY:a[(SrLE+-*kS=%j-*i%H/WF8Hdhj<Z<Oiun%Ir=.(-\O0>C<$e+dd#gB9)4*N558UsE'M\M+3I_Lbb<F0Y\&5@0,oVf%rn!/IODUr8>!ePN+G!W,dK.8QcJ`SGY,pIA8>78#*T=pU[UTQZN4C_q+GOp\G*OaPK\c+^LTb%FMMi30BCcl<pSM>cVO#ghVIgb9%T>LD:X3j#n2.)g>bc:/$-kuD$l*C9CWV%0hDiK5W.\3K`pI9Lk=jIe>(Zi=n;l_aH3mWf0.`E0P)(mAAf`K!U,YD;MS36^IjgVYh%[QA]I;6Tm5D`34[nmuBV"!cmii5Ob8hnIBH)q)RHlKb&Mr3ODE=6>VKQ<fk&:P?G;=)%;!T@M`EiV,T:KA7oXoiV.m-XYU33O>cg%B.I2sfA"`WA,3u$f\Tec5G-LDH11_6<T%4U5ZbsEQQ;*7*[!6H(1rlI*ih8Z.tei=^7"eS=dW>thVQ9#rL)Hom.!d;.=[:0[V"*J%b4EjBdIlqOb/[`t4XAMJJUi72S/k,hPXXuu_3slC%Z)BuQ]!JXj3&cZ4JljIU-ME>6kfueSJq0V-2Y/9%C-V4D6mX?"%dr#BE,NV%[)Qo#gEQflZ^UqA)`ShJa!kq5BPe[2S:SJ8?umR5^#4RqApFjJ`A8,$8ASV`kH?Nl7H_XHjQV%rbjTALE!?Bqo1k_*1-bTK0mWij%C'C]@],Y=nqu33`G]>@`T-3**i6TkhYO)QV,]d-6S\F*?99`:#X]uj7'`Nk[-O"*?Pcd75iQk/Rfa1>LS_bi6r"[RCpN;LLWN?DD%%R%_lQd^jEg4_'apS"V,?!.W9)@I[(QNPASd%9XDUi"L^[%J2$pWYM;go5-D2SN2bSi:7$6fM9i<9Z=WbS7?6S@RF$R'Xp#VQRKt%YOgiJGf&eIgJWC2/D+M5GV)OKLO756gT>"eWQ1Y%VR6XmGi>p1?sY>[rE5sDm&>Cp?Xq(WY("6[f8etfFt5VgrKK:JJ?s+MSe^\4%cPbgF`knIQ7itl\/8t!'.YGr*1so0;c4@?T`&$lef6NB`SnqjRr"PtJBmU/8X%U`Vc^m/gA8@FG+#O1\2Roch/8otlY1@3GC;5e7%bROWBI,Uc;M#07oN*,!'[MhX<_NU,]&/^V(:6]F?a9(VKI19d1jo+krlIF31#fZ8a1X!g'Q>F,-\UKD[FVeTQei.]`2J:UpB6Pas%/`2_kj(GV'gUL[dcF*4D4C@?ICKINcTU`V[;aNo`/YR7X0Q;hhGEKb6-nTMKZp^+GPEpB6&tJmeR<tBGPa:G/.f$bgPnoh?K05'h%2HSLO'Pdh3<o&hj"9b%\nNgRVn\q>A1c_:qag$2^"Ti_0JtaAcBe9j$PW*39XSt$pgo?YZQjpQ2Sj>^?mS(%l+miMeR;QE`Nq2VN%W/._=]PX"ZD`_PCpfpL;EY@,J]7/kO9p'=J6>0NO>L>*X[`X:>/WMicR]l_?gq`#S+L8qOhUhPTkEC0&$D%`nqJHtEiS`tC:0ua.%^,mLlcAI,G"cMrS*H=s5-0n%j7="R:R;?TOi\V5Z-8$%C#,KuGN^R;iHPOP4H_>JZFOVp"2_V4B*$Cql&tM*q=!(2j9s;o+C$3.Z%+X/r()MT7kA5TWE,DSsG7Dq:JieBcX&39Al:l,dZj`GKGWCm>fZ^P%8CrVCPnSl72h)'-*Qrr-L0RC:L7;ANQ?d:[R)`#YQ]i]TN%5JI;D<Hj$"..@/h(q:7<K=ZYSG]t?L&jj+oVh:*Y+tsJ9)j[WSRiiQo/lkSrJR[4;:tWCs-\5]SBm%9M"a1?j:fIeTKI/>'$^"-`%$sene_=ro.QqN0WmJnlNj\iL2.5Bc6ETHNgf^n:pnkZu+[k)jm$/$.X--R)b]TV+$c>Lbi$M!c)e_;O$/DI48!7W+4X-ltK/&1F.%>tnKHDY*>dg&9WOqCjC'/)O$E'2X`jUHGH*H.fQ2k_iiEgYO^JjqcC1l*n-\\[dFV-2mP'0fQSGr@4eU\)bQ`g`g9!g>7u3Df^hu%*GKjnbiY4fp\8#BB^%RYahr>2Uhqi$9+0,!n4bJJDeTfh.5nS-]VPdX)8<'r2sHVDilY]!=si+SJmQmP9e@g&[%LaWHsr\b!g?a3%ra@K$ljll1.h&1j1n8A8P#Q*]M705V?EH$Bd\oCWda&PI@R.KQ_N;6%<1oU(7:J2V>o.16p=DW63KO(-YMBJaF(;@R.n&jbf(R$Y%[$tB<Wd$H9aS(!h=c(-:=A`O&$ko5%HYt7]0@<%/3T4((.cd+9DsnUt=E-7CJ/mUdYs1hU+5=&+OBr)pHJ&d+_d;<T3To,iU-d_M%D#OCI.=;0JCep38WpOF_W[_Pc:iar#I!2cHp/#M:1u!fY^Df=%b-4Bh8'8mj_og&hLAqiA)AXAX$;4>UUF^$fgHtV-;!\W@c)3k6%e#rHEcE(O'p!Ma[?6uqL@<EZbm[)-1!$aZmD0WIIOk^0An3IUA7JQoU^S(%)(OeGs?XD[*kO@@L6*u2o)LoXHqs_cNJEpP[205"m%]b`KNq!knfWFk!d[#AOqGsa@3be%8MGtk^]YNX=bdUar4_^A:AHl,`!IJ>31Q5Hn-FYou'[3<U)&SmPG&d"aloV52#!I[iaoHE?b%)cpt*G`r,GOr-HS,3Q@m.]RboPSHG&/!*ISDlK1g;&(B1b8+PScKbZW8<Lj'@E;]qP5n_-/!=LiAYt_/<RpXYEXLU)Sckr^PP)Sf%RJ=2GN"..sCft(WDTS+#K&i4PR,)?U@sSc:$S.i-E[3o1";>T#Oq(KV]OaB%mp)9Wj<[HOH'>);$mX/A*Inb[JjiZSeLPnX'FVuO%Z#m0C2/p?-bAG<NEOpcW3+[uCk"S]119;c*qGlXiC8hj3:GF]0j@N`Eag,"1!q*K2*ZecUb#AMQ79tN5%EZD:>8hl9.UJMgb'?oE%jbtP&"QA:o&e:gWR1.PXkUP)&>*:G(#Y"7fi"Wu:AM#PRRd:f(P*m+Th=R.U9=W:&1)D4F+W'M7i+V+'KhjW(,[Dl`klO1>OCU4e%8J7\#e++8L38aoXf1!WW"r*r7>,F`"VBtM,:XKRcQlB?M&eM#HR$Vr`8lR'Z/-.IlX8umuBU=Q&IV+*E19ghVa3\sn&kM^G<KUi0%65euab,[S/RqCe_8WaPeQucD-<@ZHT^ce"IL&lqY!&"Q7$;1e#Z)C(BFIF[-1Gp2edmZMHJ46k>6_Y3!Ki)98Ace+\;I7g?P<]+3%1Cu)c1CTrD6R[R!=rLjC@a/C#cF[[bRB#J(/LXOl)*nFn/JNn8!n'B4'%;r)EWPd+c4C"]0,(96j"W)0G!IHLa^?ELW_$/6.MDW=%GQ;,O%%n?P1;GA+)8N'K"q2AG!KCik,h]EE(19CYJLCdmMoI$2RRLdKiD@j9e:DAq71C+7h^CH':njFE),KmmDAcOaLf4QN;Mc[(%'%.a4o`CLX/V[lUWkiF[RAl)o6D]NaKeS<*Rg-ber$h_uA!s>9-:)C_N$&/"n,\=F`p5[F8'II"`jfBbJ2S+7+A#KK!LS.86_])d%,&Dp!=)g,t`0V__W2?^I<!"o#YR2eFE7f\I=Z:GU!JIL"JX",/&b)C.'%KgO/HtX@U)&7l`B`sq!,:X0_16)0-snO#n^)J(p8Fo`%P[K?N81'UX0RA<O-)C`S#%1,)6?S4q@fQh^b_cB\Q!&COU(OA`93P;l>=aH515`%5XAEA/&n2*E:dQb2Ld2QR5a+`R@$-!s%Rm+l%j*2gdO!kTX/B-*E;O@oYl:@et+@T%j),uc-)+9+c!("1q7+ndf2,,&:9W')'\dbWPkVAE[RV\'^ct1-O9V,j`&s[-f.1m/\VS],:%oP'.;Q)UXTZ<G>j1nQ11TtlnL.Y5mmr$g*-&g<]gf4#!o$GmS24WlsTH6V=!2M!bsUjnctG:M&e&78NDC0W*[Kpb>8"Z9j0!;muR%=t%k(RUSgN9um7qd)86[L%k_[M/Rq:!)(rV&=S9r!u.@4[A2E"21`]E$oJIkX_Z#X+Jr_0W!eF/!rE?uFJ+14f!pD[3[djeIe4A[%23d;S[0&fKU<Gl4!]fV(qH$'-F=abKjf+QF.OMtb)UoDF()s'&%6Y:`0N,eD6V!5'`L.VpOb)II.-3lp[2<qG'UT.?FX.i-K^L)j%M5H#=T`7RDYqjSR/Llr\c=)RHC-gIE%]Dc^.?,W!'qRt&0S'RB+@6q[RYo1NO=Xq+8q<WE.M4uGdrtd%Z)\#&QUsr0TIUGAPp#If%=@-bscO=D55T-g^Fb_VA/sCs?&ei4eQ@NOVcqk-LO_s`)3m%gMZ;,!k%L7(^1W:'(ksNls9P-PX%Z8pl;okm=;a<5d/]2ZJ8mM`P%;e0'";[IjpL(oaehpjS\Am)E53f<HtUc9Y=a@$WT"$$Rc%DP7d5t>qq3=@$]6on:'/bfl;>;cad`FQ7ilY0*39Y?626V^+n-Rr,9%cDVMQ'dP.!N?pX2&#'<mgd";bZHsd="e:*T1%m#RX?]&TK*=*o-RR50PDV2a3tgaCQ903aSdZqdk#0'>7Gr7ABS8-.7Bn(hJjWZf%l-Ll8H7/eWY9E;tBRgq%#MQSQ0k?(K)'B7el0)/5M6%j*LnL1f(cI\1c82FfdnSBl:.%I/A[5ds1,Y2Z0HglP[4H%Y4->L<MFd7f%,1*KIehYt8+oqin-ocd!^e?,;5[TC&q&g^f1oj<&C69]mM:-s5-'6KZKmKAJ4#$MRjD5q@5W&hS(=aZ&#%e'C@Mp`$aIX2:gJ6*m%*U=,3ZAG.i7StER[U]ha#:NG,NF>dC'U`,KMF4K2^bGC$a>2R>4IBYo83.)G!un_*-imp6>]l$@=D5>*=+DJk>uYFYfJ]+](/Z*r%Z=O"t+Ajr7K&0I+H:[7m,@m#H!#)RLbTGPQ#-n>5ldQrDG8e[D%R^HcM*;#]K!Yk%+O:u*-7]LEUh`5ip_?p&(1EQ2&,Zd'#(%!*%1c@/B]nsGF(>@1jYm@/,=kF@k]KlTh".<u!,A#!B8<>D<R7_uQ&-.X@!"6ldKfMYM)(d&cJk86YY!l'9$8JJQ"WN6n_nfc4M/8)t%Y(O6]VSMFoD88a9,#DZ2Z/LgVN.@rSR1U_n_/R2a`H[hF5#l$)1!'-t,p^l$1S\AZ-'N<`bc:7T1Ugbh/7_5S-VXm^!RLhqL1i'[%$BpVgb%`926kL:GUn&"P-m=K$H]l8<"qle_^*nq8BDM]99X5oj8l=ap$%dGt;f@sjKGkOB:S'"$4pXR]<$hb*WJkAmChh2?CCuCq%B`DI'"W]6IU"R<rWeD`7>+XYI0b4N*"1;fnm)Lknlfu8_BT6L.g3$M*W`2DuH3.4j7V*4;!N*X95nFIsW$Oo<Urjtchub3Yk#'Ti%,dEAD(lV"J&YA2Jcr(XEBrm>pPF+U2")$#3"p#*26=qWu5ZMB\KF+)]+C@fa!g,"K3@5GM),)01GM+g@+4[)@ZB2;^/lN!gS=)>V%5duJ)@G$;\Q:T(t#cPj=#V<=$.Sr5?3jo/@a.a3'iY!T<($6<_I+38,#oL%pbRkNM2in1e<L28WRQr`D.:=$]79G.?5QrnuY_c%g%Z:P3'8a7#P8J[k#)A4B]W05H[<\=/PQUKDm.SH*+'q*TSVX)_i?l?%K.^:fEp.,3$:-ua-k:7Qa$^Qmfc$G_]GE=C)4oduF,B<h,%,-)t@TG#m4X@s9BdL[b2VLkQX>n(5:nLh+&J<L\MBe[:,@q,K[@Kh)k0pVk^#>U(C&=ZWahEQYBOR+_iTu\QOEC6"JYXJqr&PNt^%FY$CP'lgN9(7C=O+VWnEW/U'e:`Y'CeKi;'M.Un;1!iq;mn=-tU*<L'Cc0R`K2K^c_G'ZoNd=2B22Brj-&a(AKL,f"%)d.sD$qGK%`hV`5ns%Fo$W(Ab[(mlFi7-.J6)$e+;jb*\1(+I(i]k4/g0%N#g$oQZ(6COfA2D9KT\(*H@#W8ool&5ZU1mf>YooKYdf9]\.-MK4%%-8qk(oV&N6pjj[h^PXD@!cuXWC06T!JcDoK-`!%/KtbF04Q3V1)Q;2&IYV9Rl95pZ>FeN7hS[\9"lKQ*D")`d2)SJ=?u9gQ;A\1%9/I2c:]du&)n)G*Tcu$S^4sBSl5jWY5i3W0dM0;]&m;SnC*>)GfI;`PKHrP?.&%JFT0gQ-%hJq;GN_jL(=sGu*`A,s+ci>)K%;I#%Ur@-NW^bhWndP:':]d_8)6?5m793lj5("Qj6bs3_dnr_F$+S$W`'g_eEX6:e>#s%4L4OmW#9M<-eguLuergl\&H.`f#/_&#pVu.o%04QCD]dMkf-o"/QoIlHn?n*nLOlV'+)8llIOC'JgK[iLZ%&+i75R%=9O'%.QcpL)7d<\18l53e]F=Isk3<7U,lV8&66PprWi%6@>%f[SpuabR\F*UO`O&1%mM<(5=T'8"ho)?@t%-7'utO`W.I.K`gK\!R[Z=XJ2\AMg;r-4%uV7K6R]o9g%!2&WiUFNmtj+s\(kR4cA&%F;?I%1/^a^1tH2<U1!m*9A!l2)k(3qM1(*-L`UPo#YgKhE-/H8l>/s!Z%N<4Tot^\(3DVdn3l5QKh3YOYq<hgRM'DX"N)jEK/5c?%@s98%3<TBh.na@pO>K*G&=<sCi%#<,O?b,&Me,/<Oq"FC1);8>(fhl]U?F+&W+]"g:dPLSa4R7_Fqu!s&h6[*ZPZ#[p+2YUO=M#Y%Zd<ZsV\iM9'pHpb'Qn"#F%WCb'U1dpB.8We-rJBb_%MU!dTD:s+I^:_o@BQCS9UUI'SSBDDHf\G.AGJ6'']Zo7'sSYC(P,an8[)?%;);+7;T@(H1DIerb8Tb\<(^uBVJ,0m"qI<K-;[1k^fid'8C/')2=5E>0HG*dCKtKAP)pO?72/!\Fqt;5cr#%#jK,(CJEA`/-<b6.%A`S9@8'V=C#%JDs;&!!YQ=ZNi:dX.;-fRkKmS<AlXQX'8'Wa_pKmjS-,f\1blrSqfYWIP5M2>8!MonErYTTVN=C@0i;]8?:&]$^5%`K[S,=B6XP%,2JK1(C!;=9@?:,<&KEMh^&^NnVOX#R!s(aDtAerX0#XoE<N],C2[*KOl&^"gSJGLas@E81.Do6%'1"6^]Kgf8"Di%b,!@gLj;JR,pGe:JsM4#J:jS)1`<>*M9*25_I?(.)5@ttVIXMt@*@"QC_5JZL5@`4Bd<dJ7I>e?jJBteXUc!nNC?MI"J&+i>YIK)%M9#kF)?eT6F0LUn0ed,=S#Z'+!Y$FuBI$W1Z"\kkAd]/L7M8kD7M4hE"X5R1>Ym^QU=BUf4ZHP;q'm3oeMKTBn2ggX_/U\SIn18>%CDt93`5/P!Q9"FIR2O1YL3m/[5l[3c#a9K7#nrXaR"iBX_r_4UTZP2eZG#7RAHnTo.W@3?b1O-R)6<u6[:l`W+[*m`5Uo_4N)"pF%lj.NsnN<\eR3JM*cnE0<=i?b>&hG52<'-m2B!\Fpa')H<dJ>$ENN=9Q!UU=B3n))*9e$Kg%$@75_J)o8YpM!b>2\bID!=B3Q6g'E%\*Y.=AkBDo.knt:,QS($"=Td[m>en^6rI+E1GK7RX2liXM=3i;>JN"_+Y9>N2"jD94+/cU8ZJGA6u`lT_EsG#JCJ,:3cHAHQPsil%A4FXRG:9C#/CX%00QDX\b"0EZ$+-ZE5+'W]D/W=L<ATQO%ue^Vg/J'$>[^(VU9pc9As%e>O\ofN&XT,X]-(n51mV.WUFn8PW@[O*%P>=A)0c8#6NS/0u&oj1O#M#HF58i'*O[(=ZLJX+15]R_eon[O,=Ko^D`Fk7"(B7oM7jHanQY0!F5dU,&iCfoK^jTTtBm*HHALf)q%0=[Uspd%u[`$2Gm-)C;)1Q]D^NeN!>RpIi:=[ISQL_lB0/,'t".Xm-r;]>g0(5QX-C7l3!.)ttbZ%SDInM=E"OVi.B'FV_G3JBau%h2[R^#qb.EM1X\8QqnG5G'+`,jLR\_3l[$G-+S3#9XN.f;K8Ug6u#53Yn"+Al:`T\&Ve\V;e=1l4D@arVG43QIge&B&cdZ#N>9j=%Ta&;8+A3#\0!Y'TUhu7,2-d[;r8[.;s,88JfESXZV)>7TSs)>'ADa-HQ0C*P[Sq2F8E%],$]/@"=iX'DQD<$Y4@Q"Jj5o>gi^=Uf%qi7(N\7dJI!lM>(0"=</N/jF*,?*XV!^_fQZQ1"uXZ2S[C^*AnC!pO$.R4"<%#?#s7O.Y:[#F,P,@,s^$4bMN\E$8?IeX:&$r[I$%=&<S98HEcFJk]kVmM#7`U)\/DlZEJtJp&aQ+n?7C/5c>$Q:Fr!]]>g/8:dT($sMF2XJ126Wg*:=A=pd9bk4<MKe!:._Q\ss;mZTp%0+ejMm:rLMNBqG<^d5r.,fL4jK]u*,UEkj7(-XD#Fr8+/O9Q(R@@;!G5:\8lMC#W]MC"QZ;HpHe(g(7iWkGf0d3XNBOn9i8[a?tg%ek59bB)Z7jDW=<1-;A(;>?IV8&u0V*<b:pY;4O<k;A@[\9ZH/pC5Sqo8n^^&_*hlZRP.?0.h!<WOJ:f8W9R%a;@iVLmo0L?1SYAa%"+]Dh`tOa*[65qUF^'fs&eAE`WYNpQZUcUqnf$aRKt2Nu<5q8710Y"!7aVFeWC3$(2C9OU<aa)t45<88_tFBZo.ZoWQ!En6EA<W(%0@UjPBckGt9VeBtbPmO((<G^5Tub9nH:G`2jaru!1mDX[(/86UGL59R',KgN#sEto7O!:lFLuNYQM"jP)>;!f8CAKEM35dp?CA'T%l451p?"O_H*3Rm][K&a@65uCd,aFcHZibrg:]>p(q\DTn)&(i3@Rp3tKM@'bXAfj8'GljB[e*'.Oka5!VoY&GbK42s[V3RH`cXjR%-8Td;2D"D=PB$:;(UC2?>2s8*%ZCOKX8Sp<Ls'2/Rk0uOj'ZH*7o#q8C=Ah2eG@C&V`6XSkSW_1R\shfVV;+\2"`GtHZ>UA0qu@=%6,l)k9aE1.7(D`Dd8<:c/I^W_WZ<2%($kn/\bGL]>e@-p5='dSIcH"W6J!L/3BUj/q=\>--1,[p`JFeOJT4u,;3Y$OJLllADa/W@%[J?lg>AZk48:Y.$m^nD<O$%pdfmE+oQAj,T^_'q)N=VB:F2f8VG.M##k]8X['0O&M9End<q:U%-4+CjbpHXDL`"^L?T-!(3XRCFo%VS!]O*uF/Z`/,]SJ3ggU:N;Ef9shk9l1S\?eu4d"Qo0H>nX>KXgd[TiMQ`8ZjRODNhGUWXQFPB9o>g"SF_+>-@B2`tX*4X%/Q5Ef%SiubP-()\9IGe*I&,1B%Dk&4gI"6"W4u1a3^YJhBRuh*;,nVu.q/P9#@-Xm`n>Hn\3$X'=M4!!Gf<3c3dd^L^=_jG0/P.m_et=tB%1c989j4a+a=W/>Cf&Wm"n+Y$Mn2Qb^F\\V$]Nb?kWTH#>X$]gT[^#S?QNQ+YP-/:aX'OV-R6/6b+3JH$NmtHRkF3gW4u^q8WF1@"%h0D/H6b)QqCn4+oX2Z!5ppVeGCNArIEpd?8g!.b2oS"#kS[C!^k;2J/mQ#k<')1-?qR<OE'-IFu^m0-`mlU!S]8iOe(kr>UXS=8$%pRUF.XTdUYEMjuJPo)C513nu3;`tH*F4f_]%W>[-:JZ2;$,d[1+FD&5Eh6H]_>sL?U9'^Cp)W>`cN<F"(%P(gX`s>Z14&L66$I%B%VXMRCoubC&pabZ:@<rUX$jZ;Tn\KC1(c.c!3"jZ/c,Hg@_.tY`f@msE^g=GhG<N1<6m%1E$HJ#ImP@*b`tP_`%%f81V2,+cks+cd%Sq&biUN_X9CPnFJeg0iU:gt_*r"@b%F)5GbB`+XRea$6g&1KrD!Z.!<a"fdP&P$$q=X4qf/M1,r48VZ`J3_itQ7ls!0qVPA'3V`@%JAkL7qgA/>B>s<F]V"`PZ`0O@l-$/<Yk]GYh7Oj8a4Bh@$!up1e%j"$Xs.c_,03_f5B?TZ:NNWm6ia^-F!a"mRJO2LnH/-';rYj2%Cl[lRp,>D&N21kl/N]OfGgef1WdLK8gd5T!%#N.='90Urphk5*,gN!Ke^[!E3>VYtaTE0oR/2iqNeQ"$mt^\/0TI.+B=\Yt23/F9%=<1e:qDQMc,(5(iTltbf-l3X<#(R<kbM5%4;s6dRAAZbWeaS,Tad/Nc,).7uLR1]YCWdk.nBc;g*BArb_%B"%e!(('[<Vs5daI>0%!"2ALgBhB)D8qVr"km%n(tq+CHN?AFLWr\Y&HE#Q\N32EB</p7ml>ulHFT-Pq-G,@!IGA3$08=W-VEXl);Si7D.`FFN@\7K!bkbK%(=tDEHJoXXS?]SC5DekG8r[\l;[A<-Bqg=`QM?UnW0W^$W]%:kl7Gp*,5/"t8\SN!N9]r1_8t!MD=^K2jDf$_I1IlZbil:_CU,g,%$[.D?oekRj+TRF^gd_oqX_^jPMan4i7J&_YO.:")Pd/.1>[%D2rL=hFML.SYF#aZ1XYB,Mb8l^#p4/Hrp_cV^LH<$;Z_lGQc="_t%OXaM?1Ct%Des)9kos>tG:81$*2nYKnDW^@j9dSf#k58=jb;s[h6pS#a-EuPZ!#85YZT;M.6:FCO)knD#%p/>Ro-3DAlp2#3e!_^?%Ref8lb]^#s^g@G>,X('W*_TCaA0Vq$gKgea*/WTZ%F3qcj_QpZE,%EW-8A8Zq&0\,X\7M1[u"M780#0W9S^S"^e=:k5'#P;l]h;+%l7eoO<1A[9RP:Tmg*="uAT8QU>%j<lC\,9:_@p$j_6G9Fk-N$Aq8j[1Z/'BT?lZDtSlcUW?J#'&6JDfAdC+m&4UY?t=;>X!=P\Ge%2;LBem$Io4/T0ghg]lQNjN+t\!o>]*$W\Z2pS_LB'Hg3B4Ms_/=3"dY>Hap97Ij?j*KHD82.&HZBI(6!',ZYC_Gn7]@>e&$T]qb3%oKd`"=K\d*q/Z_nC(HAJXj%'nSe#^Wi2LKVC0osYYo06D,RB\]f'dB,3Kjb<B4Y9S"IPNtSMf@`QLpCq&B;E2h=n89eN^?k_,)8\%&"hiMRmB;%+2IBt_uWt5*EN#h:C#"5!T+5Gh]CtBQG_AJH=VPZ'<F@I,AgHuP7DV/k30lIR\oQ?q7K!gRVYm6q#/]>gbCmK8QtVp%\jNOu]m?2_XS)^()Snf85MRKVXB9KcBXN7sa['nQLuji0/aZ*%0B%rrL3oM7:h0-'2R/o"-hc;&GA7C5\f%t\ZVqqp)ShYKg%G8Q%>FMr4Sqg%nm+/Y9n[K23c&Q626r.(4Tg>eK7LbJJ<_k5qQB>+6nB1'D#\21A0Y=OXY,t/g.j/597R;"%q8`0.A#lC2mCub_<Fn`a%Cd.r3o@XFS\%i*;Cl6.[E9<!Z@L3$g:F)N`AP:[#%J&e1ePU<TL;SmAT%=#dPqeKZTNGVsW2h;2b8<+cTM=o<SJK\ca$!fMJT06t%hDi;Y&5hEHXn4VpZJgmfR_#.;l#@DArT9\;D)@6pR9CVXn<pXDE4;DbCb5855FcS/p98gA6Z3_/^1O,8F/RLrZMUsd6#E+WiQgtI%WjWt@k=DJT!QW9lpW/I:Mm\"9VT3":QIE)8'->(7-JHh3<C2%4jlnUDo.cR$N<BJ53;I2]Rpe6R!^M(P2(m-E0tK7NrFU#o7eTnn%K@D.n@Yp'X!1"lo\<#)H,s2obW\l\e,[k7>K0<iKcoXgE'pK7KTK,eA,E#63_*enDhXr,'2\?t7AFuha3!8%o;>#)QR+LCKNm)ef%n-JZHOr<uV-GjWA763PJIq0/R2o4!%5VNluRBr]ZA8d`<Z93qQ!FR=N#7TlRgH1sI<%?5]98h('fdc]@mn;SNV#@L:g.0MCAj:Ho%bF>8o-O\eC?>6sBrC@,o^+,a:on1I[;C3dREiGIF8L`7jM`WkBJb./)N#Y14>Co-M.P>L_B"a7f!3)j%'lYB7%)^l-])CQl?n:je%cVN!;>.XZ]eXjS=jcXH/03n5tkNb)f=1`Pjmj"2PhK5'5[]RY.5&6&eAQ"5e%4"&Uk;>o>^Et9K[qmi2ACHp7_CYj!_g;_nng^/B%^1Hq)STQWYdP+-GXZOF3S%(Pf0_fofTQUj)_ptCV7V/rQ!e&Z,oF:li3T4GhB"6ALEd]ZuagD2)(*pV$LYf12,@DG]&IaP4N<5N<%XR;YhqK`@uAcoER(;+:`'7(@k%0^>KLqbNEM91uuKJ^qbOdPdILm4=JU_Jt'SX./]G)JTK?)@dP*CQOt2-h4Ic2^uF205iN'lt5W%-!S%5gm6D0j]Qno7q(UU!>2j46eo_\4Pk,H"Tr@ARh[!Rk-MK.-Xm3<NGZ45[E%ld/fST(bs4u<0r$:2Uf//E5i5;$F>g6P4ojin%=ik_s6mJXOCq]DUX+nP1mrD`P4"Br"<Mbsla&.pA/B!SgB.`-h]j_*!2ZjGG%JTbPn(ucX>lag]eU7n:>prN2aRnLtJN?mg36kjn%bHWBkJo(Y$Q/kc3UpHsM%%CDSlPs057HVW/Wlnj+'j2Rk3:Icl'O?PdEsogI1tl(Ydq<+3`N]I5bC)[DOfBeIM'_\<MP)p*Tk/BR%Zq(7XpG?+'X!l=2h[:=+1fgQ]>E)?-m$H=N[7gg`Zj.4S$[pTjbU#@'hM/J8n8G,MG!YlV%,gG]mI3Ku5(TOif9jI=Eeq>iT=cfZ%;@dZk<<?I1SA;;41uD^Q(=Drop4.n^0qH7$3:g)6FP=Tg3,'39+b;=(%t`%-]CVtO&^SiN4D06ZK%4K,p6/J(QA:seTG=mbBH#o+%H=8le:8<sZ-gt3-ATl^r-<RA2_d^kKQ;u]tTY,9?AT!_icomJ_=Q7*b(<k'/'8&O_qQQC`]9DTR[;6$rDVphd]`gaVWu<UfjO\`1%JY*s3_1#Q*H1#f\Hq::mj.hfn&3E-8Y<m's.!QS_nk;c^gALm"X6^$`::#@sN846E"Kbh#Z>#OLJYY:U1=lh&HTHJ^$bYm=*="P`%pDtm1bD-SWc/"N1Kru6C3@,WSUZc-DW8p!Tm`k)PDm0AYJ>:XQ\2)Y56]h$p%N8PdS(O*p]$4Ijk\tPl=ONbi(Z:oj]uRBTf["O4%\m@X(aVlG.fd\O6G`3$U8/RKu*;/\phNjV/;,?PM2JofGM!g:=El3)0f^mtLgH8;%<uZ6X@j9d2DnfOE\O#q@BZVt"AD>Wq_2`ka%5;,$-JQrboCg.8"?$KEe7[qA\&'GM]BNrdR"Xpd-Uj;V]=TePEgp\<`+4#0l=H\O0"XLro4Nf&WI`="c;GuhG00YT02hT\4;n*VQ%;B+B_[U,F?[t1TS%4q9q,@GT31.OVAQGE90]:@P'4kq%^q_pf$?&MXnRs3br0[FKt4XXN>J43\#h_p\'lM=:\@HgZPMClA/cJQ,X%ICj8!BO&OWp%0$g@2R$c4oR^/\ZB:4J.)Rtg2c*8f<Ta>`fq<'pNp*LLr".ihf]HA%Iq<VVCkBp74Et>ZJ,:Ga4>@JUach3OM\V_%o9pH59q@]<(/!i<3GOH.fmE4s=H[g6lK)dIokoo*E6ZuBO;/4Lqf*S<[E9*HZ`mj(-N*phY6'@50-Y<M)"tVlrhMCI>$i2shOT0o%CbVNkH%T(V\B*!&QR(rXPCpl<<6o-\EX#/La86L&l'(jQQ@Ko%bjJIPc_QpgEh?J;iU-CKT5=NiIF_j)q*TK&N6O2f@m]D6g_)/N%.!_9RRa_rC4-aQg$)dpg5cVeZ?VLuFb&XN7r0*<nfuI6Z\=2Pn<ElE&g'&sK1X7<j@uA;uC"@R`I`5VYWg[=p+.\#$2%Ybmq:X$\%W$5T;Dcf,^ac3cf0#KoJeoUVZ]7,^V#9IPZeW`mL7,]Q^3pYKqarBKA/t'hMRO3<SEaSN@bIj.Bfiaq#Mku"hgV`D0,U2!Z?3sS'%jZm09gJh=`B<&-0ioE:99A1)</$=SK6,%"OWVnX$m0GS[40'<Gng^lh"5%qr#4k;k*!,BQ%DBpJ.)[>UO0'.MGlma!4lO`>X6ZnK%UAK8Kh]+;aK0=EaeRCY'*Y"L%!!nUiY:^<*(099N2<kWkKBE3pi&H-8cHt#S3q#lk=X+;/Q7;mP6bA(4D]YS(?DSB4ISCHSHUWhe%k02;fip9d-ZO4KA#'1jtE9l\!@fBHp<14#0_0P<8BBt],W;DUl/BtTB<NcspSOuuj9<]8>0Hto9XI'[oF56ic]>a!Y3lRLX]J66_%jMbH4--JQU51N&'&hc<+>&+Ch^_TD=Htg$k'CYMGJ9ntGLX*boG3PRMD9e_)VS4md\WPNe#C>fYE#'@h$T#g0\r513r2N3DdTNdk%/4ESnEmF(4:3gle=gP`">-4ng5Imm8>WAcbUu,-\![-2\lDA*ND^7]:L-al/TptIgFb<VMmQ>ooD/VDsAMbD4>Y6OpL7H3g;^B34%.313g:.RW/O6,7d5+I*Bd'-'tV+"3tQW@RRanr=gFU>D`kP1M=f95%_F2e*npUHekKPbi(ZaSp*q'92W?E9u-#2>U,`.%/2k8*cF%fMVaeO<H39XT/hd2fKPLOqddr?pZF)k*#5Ds5\SK!\?CN.=`_47P&@TSO,bBSnGUjI*s(K3fiQ\[eXt$OCKF5OY#s(jB"6uB>83b%3JO0=-+V*41en67(7>;c'T?@j))aN,Kl(G;,QkG*.FIAq`ncs20ccl(g602-F!2LO3E)a"N(NGt?_=JCHXUXH5H'">f+pfQ#iY``%/XbgtM?:+ip7R(N@V`&oWIqrML':K9e8a8_<G[ms@bRKO@l4rNl"qCMg]>V-*=q)CPK"%$[5mulAOqf-/NSLD`=i"Qp(Iof?&"F%%hG\cm2(DtOY"Ig[9+#,f%0F9'pC`SIk][rWpF=p9<q4<'&#\<OfM6Z8M\9Qf`aO$+3?^@,]ckDd*pbl"C#&8>@ikV.Xs6BfY7kC#%h6YbtG^;007^QXH!G`Hq6E#bH-"<jZ[hS,,c^lj.%#;5P?2Rq8IuTRC/E4m)oQZUKF3V4q\$<'GC<u8?l/^fW)rU`oUG#]n2#>*a%/`B`\3<FfEou'0k%[6+(g<B>(R]im%j<qN(%mkE_3J!GI(AE"kaaJg9EUnOX)'@9Gs7U7V(tB5$`*C:IQEJAF31dgA?3q.&+B!N3%cRc.GEPDm%]a1EkCT(VX2CXb&Y*]h`/Ob]`;R&j/1]mJ^EB-N-Xf)pg"W+B_62k="J-&E+XsZZM`WXD_06=1dg\2c3/+NJKP9;G*%7]j>]^#f$>"A:q5I%<]>fIVut@c43dNhimN9/t+66sAD),qoDO$1c:H&JhN4M%["cKFKn.d5BRDXI\"^T]P?;%@30gNs-?YU@fs"%7VG*36gOJ1@*&N>]cDitR860=pgR_Ml104B:ElM8iY4spMNsCa?@anN,PCln`[S"A`Zs/1F6Z-?^`JZp-(DPZ>7,W'%G#47@7D7A%(,5o,Ts,LR!ci1c=DeKQ+h^X0#YQ"#R4Ma)*+Q,5`]S!P0$3TC'A,m]kc[#ZR8UE%N?YEaN+maG_-nBR'"@=0--OV;OA!J/8`hm!%7+IM7Y9CuaeTrP(*g;+?kMk/^d:U>8F<X\=EjcuIPAZP%^qWEDYW<VrPh/HM>dBGK^NP:MLkS>a]5PItgLnKVGY]!`=NmbtFD]>j%GGCh(`F:jh.SDAt1[7N8d)f%mCro-,pB2DGN3`Dld#laZ$G1mUOHuqli^'nNe/2?n@ZjjK_*ss,fs,#,eNK*Jro>O]@Ad(&ejX_B%]V92&!;E`81<1"LIbo`Mi)TMFcrnm>!mI1d==h]VO"_)V[B6&O('&0M(a*3\PXgWXWJ%;_)gEs["q'j\EShS()[lPpgh1Lj0OC49%%^4iHi#-rh^K&!.=-3+6*7tU6HgRQS'hPS9*`0V6Eek=q.r5!R]h"GFk,tqVIM<,L$f>8+K>dn^Eh(.hn72],n=)E8O$/C@5m)Qe%PeV#0\![m7'VQ_HqOU,g-@uQ,8`XEKm"K/*75kh8$E>bhDm*%'rkq.8(%MQ%3#9c$G'>LBq&%nu53YgHr%!e#*a61.m"?d_?*70s%HpDA\!E*`b/[2H["WIl\iZd>BVkcC5FYR,I8@0<^aDFt'AH[h#ORdO:UfLnW+JX#]CP.k[@!QP+OZb&d-3GG``gd4dn]IAX`;tT[%h^A/0!cJefj6=aKo!A$"/7b;+)".Bf'gsgpX[)R*[XoYB\3`W[A"fO*cOf9P@0aG1lC)rq337OJp6JjN%4*.2pFOUqB'";5f5d0/%Yo1;e']8Pq>PU7`l)YG%*V!JROD>APCP)3M%6:E%D9"#i;&@%CT(RPe//A2SQ-`-I(fli6E!<Y[HT%!^rqHtKMl=lH.4;FB&d!['%A#s&Ej.b0g2E0rUQJ?-#"nRTTQ5p6)-n?)LCT#,h)A[tYCUoRXFiZc?)j/h>9eQmZ/A<FdEpP[6\&*IS2FFKd9*\/3_h1d"7/Fu%%**'_paIJcC55CWeS!lc1eHJ0>J_hqQZYEj:d6f@$Bh3#:`IIQL?o(JoD$6o1d:OhmfJkd0B;'^j(:p,b=dX3In)p)br<C/94&*_U%#P#8M;`$?0r0k!prMZG\qqI^\j=38j8??7M<M,srM'^3MRf_jAD(`1Zq/DiA^\#PKAu=h;Ul#:k#oju)_*eBMRa'3>"&D7ILHK@q%@@,F`81@#T<_,u0gQi"']WRcjO$qjX!7&BZ*5rbHTdSNilNSRKgG,!<r-4blpu#aIB2pg8Q)bY=@V]-=9q=mO,>:97K*8VW[[S*r%i::l"s$,2*DOnYTmNq_20#dugBZCPdL?6+I2P34pjb<@Y=o#IUW5BfD[MJ+0+o.RY++0;5qG@Jm/4M=uR#(*pDumklQ/*&m#5jRs%=gFf/Y=2Q/gVR\W<oeQ[,$uRljIjft3mcYSYdc$*>>IrQ]KpS8W`Z#LMpO/t$u6siJM=`fToeTBTR2hVh=R,:._L>S*dQ9>>k"IT%$;3u\!F\3.ZdU3p^IEk7`[)ng_\]LI(l#@0XaG+*a'1mHrObWF0kh7k*Ae/,Us.e74_b1cD8\<S*p\s&)'q1e!25pqXh;QAnKK2W%cn!%e77)_UolJ:t>A,6tK+jcqCk3D`_`?7kamu61?c"Yhkprf7X^lqYiV`JG5QCNMs'.lChi*WJ;#1GtgqqJ-nW+djL[T]j]ANP_%HNIW*qr]&fO8ngho'rnIC`e0,_*c//+>_L67Jr_oS;6JmV,gG"M)(fCY8.2^C\Fa^eh%-_!q+jM7ZhYuB$"D,r&8c8G2&L%5`Lg6%chMt7_t)sA?>]Eu4eD:jmiQutE:U3U^\m$)Oad,FDuTb5^\c3HSER`cm!&L%r;GNd?M('2bl:3oOl!BKa,7Hqh[,p!W1*dG`,d#]%C8-<aiI.h,7]rB:,;k4uqXQpom)!4Oh[<ZMf%0HcnI("\Ad@TAnus58`(LHW=#QS1hp.:VR93DHi#_Hdl/"Pg9A>A,.h8DZ[rFP(%h=!kKs-fj0&,Q4_+0J,9604;b41gq(@(N1klPrB*hFU7b;eP2Q:2cgW+B"Hj]4%)!I@tudE_Lp8_Ts?ca%770*]n+L^kWSS`T#V-%S<lQM=jq>E0\rP;O"EMaJ+(mL"KJ)^"I?)p]l"G.EPC.u^$fk`&+g=2:64)<ZnH%OY4P#(8\9umm;5pa`DZC`?LHG%rc)n78I0g^%X^=:&WpeX);Rs>h>St&TGEo$@ei)e(s"A02p2`Y3L]DPS?O+t\Uej9>5-A<YE&R9/*8!Etl9=BCAL_>7[T(Pn]9U64!HT1HB-Eg!%)o,rNk`fMH,IS\Cpual`6tLdOhmWR=HaUWAW8eeR,C0B$_*!cc*Un&>1rm&oBH:VoN\ts-@[>%g1=5LD65G1s&_N8!X%B8+`\t#'%EO@st3`$"@Ffm>ZFIr/`#M#I0?:%)l#],g%kNQ,8+0GITK0EKT$+t"Lct1<HgCjJ?E_(QW]q>9L:&ZdSGse.P`]aSP'g54FOWego%bn_gPguHpl&#aCb7>0+aU0.VJYhHgOdJ*$R2&0d-eYMUNAf2:("[+[9=]*j*?M.+C>5uG>on6,br\;N%XNhD:3[gh^Il0RH3YlHj%R(`X=g8;W+**$QkKGptbo4D=).&@78JBka&>2rm]=*YAXfE"A=_5RYf"e3;;6$iR6J"#NrjlQ46hGpFmr!0BuO8&3+SHUilePW?9%?S02n\GU=g/[Iq--LeRopb=P)`(Rrl!kE3dVj&!Thlr]`R8u4uq07du(k$gZQPbe/d1!82WnYrq?2u_ugE*qa0>Hk;U11-;?*EAV%\pWtuiNb(srT'k`G^,ot*#5NMk]C>^4D\lh?<Jm2f_)JQ3uI73[7TAJV(E40rF@LX.mJ5^Sm4n^?JNU&MOp[X?6AfSGl>$/[X+k'%#<gr@h:LWI^$:Z\%[4[(JE(l3"tD-(l#\ZT&s:%R7'Mpbk,*aR)CW:<Na7462*m>\j`HC$$6(H<AD#bI&T*gOBS;!KM&#"[?&^AN%6E=KBr"i*pl`(TJFsf5'FGABc+Fb3<.`)ZX)*fB7-,Ld^KA#W9aG=t;jK)AP:574"OYbp]S19=^FGWVpM4g(M[GNV[WY=WNCJWML%g+[4h2\uncjMa\N:"f`)-aFQL,??=E<iJtf#=re@?$^6.cU9s$O06sMD`-snk<AO?R`QOM*(6b3_>A#$@-J?8"NeRKJjUcaU+;J0%$+FD(3(rhrFL(`oG91DZ^k%BdFXi8c5Gu0Xm>b&b`&j_"UY@=("4]'*p5[:7/J#Cc^ghO.eb&VjT13:#B&j@>G;lRO9AZc59QoS!%Z\IPcFr4q"nt)jBq':^fU@=iXDk"kE8]YpP(an,BfAd`s2_j"F?FG:35Wp":%/FZc8[SB4C%*SV<J;a]43t(pPk&<sYN-L!mW'$K%\1q=#.d;(Mg+A0)c-W0T?p!\I3Zlc$&tNVb40JCA,OI\KEf9\Z>P_/,++mE^3t)Oq>(OsMd2M1F1Ma)+!7CbQH^1`9QG28ND*iGs%B5N\I3<T@[QiuBQA5R+nq`r]P=5)*Jf;=rj$RUXc"@Qj!J.F1oa9F;-8iVhKp&*`QGkeoEA[t]?.\F65f^[rL=V`C[Rb_&%V+sO@%=r/E^jLA4_iMb-M<L,:]mNq&JHf,Kra]8G_iR'B4ABS5@!j"J$F]iS,Kgt8KVL@pVS\4'Ye5pVJ=BHkgg\-bi\P>Gg3_I!qV#!`]%XfTOpgkrB#p[a!g]15A*BhSe)CAYQm3,Y3q>=#!Y`c6DF1]^99q(oK:d^&U<FFDiP:LAu2!PVd)9[TD#GYr/$R>L=d965(cZ0FnI%:T2'[hmol,,]k`WH?;P/*6X03(R&u7:A3BlU/3gXl,.PMSp;mNMbI%tRoJ\-D^j-['`O==%rIJVlqY1A#t4@S3+K4&a:-paCa'`+%82cY.)d/L<<\.&.%.2T>b;HPmbKCd2SmM`GTl"_]h+OU7CHt>S8B]f9/!:&f;Mn+P(:+Dq>1nq+m*.<tkZ1#*f-n!NZum]QE=IP'%bOm_\YsC6fen>ZcA]i?<VgXbi3N4LBB;[p2JaO;A6V40]k5%eW;Y`%4@+!K3>b)b0!m?^saSJU%dV]K\N`T6O/UD33AfuE/8c3=m%#^;l+!]?n*Fsd^\13TSF\K1LV)CuX&c?kTX[onnKcaXq>3hc2=P0`?r[&R4`T"^G<*=2'r03W<YL\eG\7Vp?+a4M?+Z5*d\p.PSG%F)4ukXJ[r/Zpm1$1;bsUqdjXW342j]G`d>TZ.RDSU\8L:&.jIRUdbJ+nP0K>!tD!Z(#>[-hneOUJkom8@*/rB=&VG)fR1V0Q\[>4%Gu:;-X?RD3N$ITQf$h^e!3Br^s(MromOZ$Jh"F`@a$"GgOPS$,><e=J;lL(AN-S)m/.>7R;<VKam#LAZ1Eo8b"@j^F7M#!1.OD*&%^q3V1'pYX#Qdp+ed-!`gBbgP8K:$B.<5n./-BI0qMqb?@4<s]$_a"2XE8tWTUM!J>o5)eiRqt!Yh%Vb@='s870Kuh=MESkH9p5:`%njeAY3^,;BqmAq'Yg/<aUX-m@'APIrU\8#ZLi?0TB?LRio<;K+3(qmtWXkSMQ;V4G8"!<U[@uA2KK,6,.Im^6Z\Fd?,0'LfV\l/j%f!X(B_hst!`G$`eH&c0g=<^6<PEkWrRl\fnb4"T$c>3652OflP&0_.S:mhaC)ICO[q5BRL7n^MSEWYMUR+\WNE@l6f-'"]jl6VEe%115kaq"6D,crZVu2G%MbkgsQ0BS0S[!Y$_'%#1=Z3i;+0"19=8MabcP/9+\8,!O5!-\R?5=1]*ZmUCtq_RaN7&Z0W0j41SM";q4:%X;%+k?6]qq6mMfrJuH_e7)kUNd.ZMNXTYDqO+574D/2U'^5KlMOd^'UgCh_,qMga%Ot]Fh.B7nf,nRLhq.Gp_#;])qdIUFOhnrT/%fiSYf;RCqFcHDqemPdst<C3X9r@uk30$tb.%-V$`U-*/-E8D5jK)L=1,G%IIB[4n,p3=94A[=*Q\;&:7%p]MQ\sE"@DW<i7fK:WJ%Q)^`Li^d*7,1^ql&KHNU4O=QC?k%?s7d86eD:uhN`_#DGa]P+^buVZ'/@EbLBX4t`.=8LsoYHAgqTCd0F$B&AqYU!bJ`d54s8)=h%WrhWVPLrp1;6r9h,T<&)o/`?s,>W:@TSd]FSfdCq0o;`DaT4/sXKs)@L_Kl"aA=P/J18HL#UspZ2@D68jma7FaPg9SL*],ZW@A\"%Em]IQei[?*T_5Nk)iCKX97+q6H<>&*fmV*O"5Cr^!D>q$Ib_RLX63F1!EH!q^W5T,5^t(<<u$Pt;\Q!s9D$&>E_%fJPrD/JQsnTT%ML)UT->P6Nj4pb!aF>.W9Z-LB`\r$"e0Bo92R&bee172`LWGY&j?706,FY.bYVaYAaO,p+F,b--#J:tZM5$+oha`?D[O_H2Yo"G.%B^hH`>8[Z]]\tE?-<*Q\kZQ@9bHW<4>g"7WmUL!7Aq[k=<Am=i1=Nc^M_,<TYc+>De/RaBEsTX`;&>M7NBGCog!Hr_9<hU=M$5h^%J>>:1;/9@J#`^*o"\XLf$UC7_([Hn9B\@1[,[hu?CR*h+cC9H-U\1dDUI?u)RNO/P9aT"NSgU8EV7(gfe\s3B?:SJGG$tZ[+U1sr%FVkAOnH^=hG*"iH+p/Ol6'[il1g2[7f]I-$Cl,[PFb9kEEaTZY\KtV(J;G$QQID87]RD^]UU=g:X$@K0XTJ?3Rb6uIH=m!6[OEE;%F^lo*K1RD/hEE-Q_#q(`B5CDN@LI?I.6K*"GB`:09>]*]AbX%4=,`:^"*q=Qd%eUKN^qtC$lJpc*#Xf)ecSq89_H6eH,dU03eA'`%f%+#EN$p&C^XhK35"V?)Zf[])#"EDqF/),8L8:AUqtP&[IA86;/D1>sQl_N"Zl-/hWJu@cg6k2[SC5-1>O.GD^(WfN,3k_Z?)foF%W`U9M-d5"+($^=qPHF\%d#:Ne.S\!7i$>cb;=e:8dmY`RS?3"j255h'"<9B$6Ea$fF4Pl>":i=uCq!ANcV:O,ih%XT!=g\)CP>nq%Sl:685`DYs(og\VOfdD:a#+,[D`Lo%X5_l*&fr?L/B!;b+bg4V)N&sk*=[;eOii>U!A=u,jZ)+LGsV.B-q;L"-M3`rk7kLBBgH0i%!p'!DW?^bX:e=>?M$\>:JKBtGiE]o$`PGGl+A@]Q4s_=n>10Jhg^R=>W%<[6Mg?.UNjp(dBYLL,;ijiEL%]:5aIo<Lq[Fab9"B68%-(?C]?6!]r3!_WrR4]7DqT(`(<O*ighhG.Y1[f:?ZQHXpqIe@6j='W-g(kWp"Iig/1Es7K6.XG@%Ka%7kluBXF(=q.>,-)Z@Hpr.%D:#/4i2gAZo:XVci/AU;?M09P\`Q`kQXPl_HLtU'F>e**!+L-&JuoN8d@iX2)*OAqTUE8ZZ>Za%P)O&5)J_eAg`imG*f:3>BZsV*%KGPeB$B[=ted'F8S,/8DT/"hrb"@;94jS5W%oo.&"$@^O#II5Lf5>eP//[VNMDeX!<S[f]X]f\d1lYBgcX0h4hAi(PZ0fT9\HOLt%W(/7*P[E<L[/`_m&$5sg@e$!ZJfrGq%+(^t!1s'7UXV55K:lsuAC1#!n^=l(DF"m$Vhtp5bnAdKk2Nm#f#oDad/X`Cd^jm@0-7@=%d<`7JB$>t8r\QD?[Vs9Lo0bU7oZ3cF0EaJYI:<[N7hM*C0`fl(N6k^#ic,7d>Afph2M5JX-*%h0S*Q/bg%K?YiddDgN)g%YNcH,I%.1&3KaUZJALl#TO4Oq&8ire:XHh]gPpgq."jW2Opq5_g_.0sK%Mut/d!hD,m1_mY@l4h=\(U/5F@\(JX##C?(9G@nnD)`&r`hYGY%YDE%P:Ht&*Mu':u-BT>\Qu^`cT)"sU=H*0jYJ.V,b.C<)%oPN:O*FnQc3J?sG%=..%/:C->Op'0l?C:nch'5-YdmU3Wh9+04o>bJ%3a'(>f`fGEQ>o&TMrA2:k*dF.I6tp8fjD/+ClC/_V'miL:>56"hiU_SYE#OLIFNW.%D)!WIeS<V]hV4s6We730`3MEpKL;EEWEXd%>P-n.`b$SAJpcmS]tCQ(fB==@h-q>5VQ.HlL1X;<.>I!$63)Gi2r^061Q)mfZn5?"8%jJ)q8"\17Vn6H&NQ$5c<^j5B-?i!0]N`_%a6a/?%5n_QT9Xf1SpfOnarVkMd5tQ4lgd2`'-dhq%O9+pJGfq>VS*iE<d%Fn>rLe#&PeqYGeEI>/rt8.lgNfinh\2+TH;;8HoQ'4%2,$'$"$Plh.\'Lfp$2e&@Ot`4:)Z9mgT^t,\Le-d3k%GF\7Ue6g)0:blVE6B;uTn"#NZ"(A&$"Kp;@Msq5BB'>'/[Hd&\BfX(/3p%-<kXDd9;"#NA\AYdOXoU[>dVkK\_oWq&V"i3ad`OY_<D7$KXRdD/Ra(lOa.;OCF63P2e^2`OXoC;8b6"afgC'K![m/r_/28fbFQ@%^@`>PMSZCUeA?X4+,R=5=dGK'>3nETT3TVjNn\Md?qJm'ND8p`QJ&#i!e-921K8U)U?*PSS#/"D,:td0'].R_Y:%:D-1;\6GOFEZ%QSW%)U:p+ce&u5;2"#3DFXmkR4`T\$:Qg&56,?L4da1'E]phj;P8[YPF(1)08M?p.L8$%a<rD'RnaqMJ=/PC_\0SkRCPlR+q'DJZ%1HJ0i;4V[,S&U/f1n[A0a<5,E7Z@LMDR[heB-asCH%HlSM3cgC]h%;0l'NL1r]^Z<S40e$Vj-uB&ll7'=C<GkON0o.`_GGsLYB%e%5u#-E\%U0W%*4;>`u2Fm_^TpH1)BAsl,lm<3>)7sSA7#A/B'MmNE@^K)blK_iB^&S.Q%@T5%->hLr;id_c?k^M/=cV>q[p,H=1$=%#_]T6((SN6_S@RN%Yed!#rU>$*VXYKSrGUrd_(':'Fg@"O>VnQ22o)@LgV5s+jlaVK55tXbgGcrJ.FYlqHi07F;>r4JuhlD)b3K#%4t4lK6,tt;Fj`"":9c*A>A3=\WZB+,miq8"H&`<FbO^W%Q%*>sPq_,.D%ZN(e.50j$^07-C>5IK/))X#EOuB*ZW>:?V,c$N#hhuf%bXQ::QE9:Yq;\^#WJeTteEVlXZFK=`P15)UPMD\GCl<PD6#[6F\$eV@ZdlHm:Mlhr>e2nA^hrO%m`VgdF?*Bp%G4!LBOA+q`B6Jt%_Xbk7$dmld%5`Y<e&bQsB&$SVLB^1,T*,hNZ8agR%$eoC$@Zs634?ECS`?YNpX=mO"RYH9ouM#Fb7ISmVFK/MG1Y7m[<hMg4ccoY%[qJ+QUeBpH5*mZ_=U!k=]G+#%'Js-[K7`)QScc<KLT2d./lJ]^nQLaE*nH3;=(t)&JJSij4r,n(cJT72or&cb!)$$0`*P87a0Wad%]p)/hY1hr]Hh)0-T>qT;/,TT1VmFPGU4*f3frX%.FG]KN$q93cO<n'eMT#WtRd*`%BTNuh,+gS_/:O,.cPB`t(hcX)BZ,a[5;_=f%La-Gi`=ViJ!ZVEo:jS0@N`'9C!dmj*<3T39bQf';p--)&aDAO<8T%/tSADKr9A;m;5!-fn(CeKF")HOf)Nn5:f_W**?ee!M;9<co%[?QL43stL2%05NdU"1&[0#5JK8*K:"=*'P0))BK#AK*U7En;dSJ\cX!]Vdl2>D@&HJT8l**DSE-agbpKH7[Hac$e.Ya+=WH<=5@l%b/,n;E/p>T#BF20OAAn1)!,r'Kbq/<b;'l(AEFP94ZrOX[/nHVJSi7[nbeY@j3;:iLa!]p^2$N,LDk4VK<Rf<>cQm*$F7<:U?lFE%F%V=k?7i%$dM0jh/[[,?!m=p1+<lE&N/m1;e+IJa1#M.)Tq?Bk7TYBq'-hl=gP%cQ%U7$u>XRn;a9]4&]GM>EEg<(F=:?unW9'P:%Off-:LdSU[2>\@r7P:3'-sdcF;"_$L[]Z+L!sab@NmVg_/[dO&lr^odqN5`<Yo.TSZX->uSc%2!rZ\4.5UnEej@h_Ur56.G]eQ8A%1u/2n"Sg_d>:#029$n;E*F&i+GNURTV'jE.-4iA!2,7i`P[&O!EY"2WAb"\1AHM@Gh^^hQZpMXOk9r>1jMD<p>4u'u5Sf(-K+X$-%fV\q4Z-L!KQ<OaC+2Wi=SH\lc>_<L[aC<)Ml["S__s3Y5gS@PdDq_&OWmIYr;Fs6uUhs5HLOG/hjG5LI"'cVF4lXc$C^Zk6(2h=:%o0p\3`/CrN`/BNPj[Oo(>:Ul405',,N0Hqi+?c9,q#!SI\4"M-ie^t"")2dk_qC2r#rf_![PJ(=*!V^4h(8q35)--M>p1t+%3LB2%kcU=9\,&4!0Bmen<]L-A^TY!7rlRLdE%/M0Z;o,T5rJ3=,J)qLScNAB=hW919HR$3%8pW]2n:WDiQ:9X,Q*0,C^BW\K5i0Z0Ls3*%/7KZ/OM'It*jlFDCW,:GS/nkKE_pI2QE9!,Z:?UM(8V-gA4&D1DpUk5H3j)1iSo*XmeY&2,tXT1#u=67PP:W!7r,Ak$#Rs>I-YS<%iJkID/+7HBb$q]!H7;/n/7LE>,hjSg8;fad#c3c$aq8>K=XWJ.0UkGNA8DJncs@W7Dt`[_,2Mu<nBL/B8`3'd.f+UYQr"8LkIB=k%#r@C&j`Oa!>HA%Y69L'U&GbLrKLZ<;HR%jrS>fYKs%SJR\2[[5T3T6GjOmM/3ARDdK!h,V(PDgEqmLO+gd?*hcdZp0aak!6XVEXC%8M$K4d.8V(_04eqV343ABnBtW$EO#+8XUR&d#^@oR?%&U9-?FL0+3e"MgDhf725AcOc3BMIHXg6&>TJ5(,'Yl;V#,8ig(GRP6s/d%L$h]b3LbO;:A9?@g/6dnSI%cD98.&]n-#iuAA>**9Jk3"TcR(%EqU3#nMM%#hU9Nt/c"K+RgeL%&uCtC)k4B+DZE_5UVVOd2EnuP%VhNs&=[Q*CA)*2Jm3,'l',SYgmpS8^bD7$Dg"I3kp*`p3P$?V`c#KQfc&4Q@QO#3Igsr_i%.sZfg1IYZ!T.;4eT*$>O8J1QD:jMO%@l\R!)6(trMCure*Ckrh*AuG3'<PEQO*D+OM;(lS*C`2oW3*!V=`N2%mAqUS/RIMJC8Ja0k'Uj)O="2X=l6]C.qFm"AiL.8mb*m/%C;bIm%oFBo#`u,hW\Y!_bb!FVOhSs^E/*MOB@@bkjiG`1Yn!MA78se>8rINo?-44G:RAkY]\Hq\ZaqCUamR0[[4O/h]O.l!XC_?(%bTF<Dn'1,MBsSHuka&2g7*hIOWict<Gk1s-S!KumD0Jg.GV!A:A%NbBOgoNIV`<.@*XSDPmSRTMP9_:Nce=%HH48\)d&9c^3],f4%BsA\d$\72A=Q/ru";sT'+*`1_aJnCB2)0#<UK!+?s/2i",A4+J2\,ghUq+AuVpRE1D6.+*5h4*R_Rkq=Nl(D=DHk:\>]TQ9XEp/[%%+qYi^f%9?3StGAW\**6'R@l?DBV=b2`a5jX-o#lEBk%+XVkVkM+D<d]Q4ir6Ihm^`imdk`@0[";NC=eIB%/HWq,_h@,\JoHX[Fa%d+3g/b_bRfB_4:bC$H`'<?AE)8iK<qgoWUp\%muD*(lfCloAa^HX%K!5aO:%b6eD(]%%+3*2ut5%+2n]eHA9\(8dS;8G)8?+CN9g%^f-G_pQNpPs'DOU9%m82o9"+&;=8%$G:$GZ`q8?DAaZYAa@7&N,,0c#I/_9q]0W.81dYAYX<WZBX2=MH\qd57M<+9\>;G(mC_:>+%fsI_JoY[STa]45fL1G0++n1(j'^/)lkt!EK<>W($lEHpIA1r[dCVp9W#j+_@cgq>C@3Itog^VT"3Ge(1ol)BI25A^U9Mce*geW`/%cFjdgI+F+0,j.3/)m3@_\K+,=`[ktoBT3.Ki.-=@Nu4KHT?p71VLiMFVa-]iUqMQ`BrW&?&Q=,>&9>Q_ZhE)dY1nsU>_AdHoI-`0%&A-E$;$L\;a]keZHpB`84PKCS\C6\Co]<#-)sTlXA%PqGppQ[Pa(7<.@-s!,R@RP^3]U*``Sr0A0:'Mks7&hY/t,(:"qq\mQ=(@]%Yfh5qj#(jVRIU1Jbp]EaWbimkG.#EZLR@TK15%EH6&(1G[-hruR`)EeQ(PYq91OYUI!ASjl)_>L>G<]F$:n/\A4rKWB2tNs`:/\^%/U4ihl]3;p'9R?:&o[/_pDue1PP0q\osWe#)@@"\,=mc%4F=aP[ks@t=$tIe$s6E`S%%X=^S;`X3>3S(UKgkNH^JJ_+Lh\\p=dcm%?K43ef^sk5!RjamYa2N!;%%MdN4X/@PY?q$@YWO(XCo7#iCpHpEZJ%reX,?)ZJus<;Yf*LV6m]$?Gk=_0(N>7KUVhs/GstEGb_T;%i"s6`5oM"2?aL-B,[on&2,Z_QZE`Rt1'ar6$21(K6</cWbk1U4M%]e,`I-!POnY\_GDR@H-W.4r;iTdPR.PM-h))"j#[Pr#_\XTt%=^mj(&XC:o)FsTYH9a'."'FR#;OLIB\<$OFqOk^39*\>8)BCRajBr1W3WZ!cP(+,!EpGk?Kru=u:4KOf@uSEl`)=bsUr8?1S>m'`%S'JT;.Wf>c?m4ZJ9)U9g;+k`".f-:+m;;Er/>Y%YV+qjW5)j;/\R))YJT;J2cuN$pZa@de@k%(/Cnob\`89*NAYg#BAn1aB%!.K`%7WP+me56m0Q2?C&3&=NImq5Y-Jd+,Ec_c*H.DdS#BSLDji+t#iZIcfHp4D"s]S+7_"[b&ZO[p[#C*jXbIBHr\2kB)6n;/=^S;Bta%170=RPl(E+h0@-\.;m!Hjk%"XJpm/sTLSE$g#nO%_*aXM;44.nf))>V!Zpg.h*WW!.=ta$)VJLhL.:Q/,d#Y%nj3*2A7H.+2@@lE%CXUI#n93,bH/9(acN,SJZbJOa"9C1$5-&.IH4Eb*hC@GcUcI^2er(7iMg26q%;h;N?/q5U`8W3X94Z?!gKWe6`YoGWc1Jpk"k<IO%.<%91n*m%$P(K(PQ%O%Mi`STPp>XfOUB6in2j"\r$aK4uEIkDA!QNgagt,1klE":;RN(,A%+DF*H?VbEeRA5USpO(dL^"aJ!IJc8%Z.7+/OQKm@Fk!U@W)?B+oqqM9]b^i:,RNVX$#?=<%]q?DZc26*)6ZX@'l91PdBGNrYN2'G&Qq;ohbZ#W#s1rk"8>N'Llt;<MM?8T%CTfTTYp_X_lEfr7`ab*.9JDOcNN7_9RqGK8a[fM+]3mu_F&u=TL>s.EQ"?ZT1rMB17C<3;c`edN.X!=7E@b=VBl>R+flAY2,tV-q%1B\FlPsMa6$e0N4G0ulog-:gsG'of;Z$R&adILn9l,9W*DtP0Pm9!+4fANA+h3dFQIC0<=1U=+Ff5crXes%mNX5\ip8#;Dd<n*C>%fsjJ9>j?B7O,@!Y/sm%qqumgOZ5h;E'LC4)n`HJI@/G6#VSpW=)NjciT0/Z83'\AL]AEH@J+&F#7g./M9+dkR(e6&Qc)9ZkfTK'F%GFdksq@6WEb:Z:=_[NBu;WE@jf/:.AERaB=RG1W7f^8nLkgm#q$5`g.:m&2f&%sB>8Ur3.Fa^r*ZP`ipm<HltSG)_5:Jo5QD<[38%GHV?!]8mXFn9^&2\0r,>/QXO55;4:J1.jB+[.3Xe"%.u-9B.'sT2km[kULV!0glcm]qlOb>\91rIY!d(3Q+L2^Z"ZT'HS6m2k#%o%^kXV7\5@s%eK?Wdg<Q^&;62-adj6+;//"+,(Q!sbFVF\0.SUNNkTe%fc9)7FOFo^%ShsNYINL3PXc?W78Wr'V+j4jUQ5hi8hXcL0%:@3e_"*3^ZE6_EpXE1q[R@O/A6FkR/pbqV9Z+TrCo@70G]Cpid[JinYcG#P<,"$\H.GJ!m:#^W$Gu\`N=%5L8);-L)o&r94+d$+T%=\+;h2+4A6Adt7WW\%5>@U?a',9b]]2ca+^h1[KESXR>0S/jDA6Tp_=8.(Z"UCh#m^pPnM)$Nn*oCQH&;p?uJW^^_16fnp1&O;GS%#"<D>O%1Z1HVsCA;KB&On<R3MS1[KYe]GYaCaD&5LUtc7@S$:Lc83,JQ#uS\EajX_iF5HbK.Z-]?pA%h5/1H]?@<]h[8Y;DJ>oX#%m7s-V)c?Tlo=*"=^2C2,1M<8XJB[5WqLU!8,B_IFYeHJ:+8de/p*F4JB`,qR.]*X-;asEjk&k!fPY`KZCebailbM*(Wd'@YUWIWP%2FH&kX;HS!.u"pS`UZ_`0r$XS9W"4B/&n9YJOQXr[)KWHQ3=>sCW7\c["XBAc<CERO"0Xg])`hX&nlcq--t>14af>RM#OIc6@c<d%#%`*)ihk&,<08+8#:('R(1>?l!\UiDEsqktoT@uW,8N^g`a3nD2K'UsPieo'*$4"EF"6T,lqds[;Nt+ZQ)HttVdp89h![^S:P9-S%I0pJu,NO+r_)8Rh:q!GZ@W#t;!d8)P&MGC804'tZk'Yea5cNA!F!7?W!n!=.$YBY6r'O(t[P7SLq(9kK%&(C$;40LMjPNrlF(0KL%>9gN9XBHZ"J&Dg*W`!_\F'GEAjW:`@D_<V+ZHC_HQiE=>E$e4f&`_R5AlbnS$D]HrQSaGG,P=Ol)83gKm't??mEBL-Wg(LHjUgKB%@RQGQ<!mK0HHOK0PIZaU:$@_/:g5I-l?tg,Rc+?Whf@IAH=EjJIRN7X:S0f0<.\5Me(DY(q>EYNArX(&"g?o*@>fAePRlN;AaOh!%@P(+8gp_PKV$-r[%O"Vkok;0Pf/W(Ih=oW"]%VF6`--Ho'ctk=E_9R'NPrpVC2GXC)*r$X5fHS/Gq</hNY^TV`!Z?.(J<)f$lB:R%7NdDDR+5IhYe+"05?Hs3E+cO^&RdDTB-I9lU!dT1'g9&s#:\D-aTWs*.Y>W#(Zq#%*lc?K3&"P2Pd!SMr/<QfJ'Zof;db>[-6&lF%3H(KB8=RoO>9;9KIb#.j#NKKt$f/t&2hk$7K%jCF\O(-'@N71C?s2cj&jd1+rE'e[pd[.Nmb@FkJd1C]DDa4lj1?/.-KFp661nj*%mB$jI#&4Zm27TQKd\QYVO33q)I:oo*qT60=N_YEfnCgA8Jo6%7,'T-/C5p?14D[u,Y$mE3[^%`C#a*m>/?<_o-p*GW/nFfcm1DrJ%>819E[:+of3u2qt+`pS*iCOabl=hrshSScXLB_Zf]QHXGUt99=b_b'u2^p`MA#(1lLS$'jBk]"!ECc/W<5>\Bmn%+]11Cr3/.$!U%D$:JGQ&;XJ%e!C(pTP`/3g&'r_KEn^Bk>&[96>XsHoa$JOfMh6(Ig'<o\=I[CUhUqgiL!^Vj&F*k1m<l,t&e`.,3.D*i>dFbFk<M%R3`;AE,EQ[7M]sl5:*8'UTaTH<(nDJ_h<006Bcm=^#UKbg@5.I<G.b/;AN[kZE@\jUoH30ne*Yk/Rcpc+kut(ej:#d"^LC;3>/Cs%fi@fgFRf&-c]rE/+'j9V:Mjpec;aXREt8RQj<<U9hb/<M-)sK.7J+3eBK`XM(4tEr^?,?S*7U6e;50'J98$f8i-lnrl+75r^BJYp%M$^[b.Qm,<Xn4e"[o>*fGe%8cHVS)J)$'c'"@.X]Ncd=7>Bk%]F.5,!eQ2X]h*P:\dHJnKQ%\J*N<beQ%*L4ZU;h_B>O`)6V8q*\%iQ1ooPm-Bri\YQ_q>CS>iPgp'[b6ApaAeBliJakd[Zj=V=KSa]mPp(kN)*t-4_rQ`&ua7AQIPau@k>3*9.U,aV4:er?I,Y9<ShSp%OX8JZoT:"jgP@Ms/_f)&7KjLq1K"=PcQC%;k-Ir&d7HHqjN#bH/dnT?ka>$&=P%"R>Ts2h7VDEIRrSSt7JD(E73NeZ8kmVsjti;e%,=K.1;>5Jr(u(T'Fs'<NO4nMW?1i_oH=>Q5.4e1b=3[2(C4k_GY9aAuY;>2].s>YL\i!9!INBSU%s(sfC2i"8BEZY(boSRJHB+eT%&a3%@NF0k$:Sp&p;g;WF8<QD]Y?2\:p$_snI7],AChn]!<nOaEF,;AQZ'WD;BBY`R;;J&%nldleT'fLdY@/`u>t/8?H-=oihQiS<%P:8n=j&SDK9>q*,P^B3gbr*+[F>g6fPS%a8=JOtK(QdfF$<NMMYR&[%@V35?=FJ]]B$I^#-Ul98m+YY;Q;[^R<S/RLm68FtFoZ`Q%G';2H!<b"GPO2>GPZD)$pFmf5rb\)o9Mb4jT_#T0e_PKda.%3;apblQOa'!L./I7F<'"L!LKW$c@+i+2\dV#V%sKR8Qq(70(hcF=%fBn_>D7Wp1o5fM''2)jDVe%M9.F&]d=cU:-FjOBG$gQ$1%_:3*KtoUYH+$.&iY2paI]e(^3/VhIfS^&@g16'77`rr\Ni]^;QB2^(%?;l_g4Jsp/3\B&6':'LoMW^nm.V1h9]6TZ@'qQe/k.59P"O34FD-O'[mZ?eYZ_#sC]k#b@`Z<_s,)*&dBruR_U%On9&j8(BjT(`^%$->c20?$nIPI2$6B2D##[\_p3(*0OF;iFqf;UQ31g/`fsAudcQ=&TCHpl+A%*XB;j:*2^PZNo&3*4:,uh\YrjK4FbtZ7+V_+\-Z^%Dk4r!mZO&c&$;iL6hd9sM,I[E@eMKDA;;27#bY/H+^aV>Q3<IEg1kSBYMePA`"MfJQ_g[1rlUi.q3L`*XW4a2TE!og?7J2>=@+3]%3;5LWNXVikKE"SZGuRY1@Fp;`7kG;`6%I5>G$3it38iK4!,3h;BREX$dIk1[AJX,o<5:&me'`.e\g8;Od/^leb]2/B3l4f$bj'@E%hFJ@m=#7pUDa#@FJG?V@I=EZs<OlK5G8UQ<h:?V(o]t&I2DY>b:,*a$K"en^hbW^qnP>oVnk4="7Sr7]Rln*@B=Q$p.:11P-os@5%-.KsOWYc6Sa[CR>]'Y\5(\U$MJZVRZ'(*oA/UEAag>qT<r5S`m^D)80s/U.LIf+EA?iSlmf73TmHJQsi2p/9e\/VK=Tdg4./F`Y;%3ccP[8M'^7Y'MT*Jh@I8h!_IRM49f0M9dND'2+(br>C`iF6uOlaJnd=[X&3K\,`:s3X[ZWp;YOW++.3pjkj?Ns50'6OF`c3."`Ek%+/1fsr5pS8:Y?TIG[oEm6u@4"0["iq5aj<:=t4"4WXUk=#W@$N-T*R4DqTt)A>J!.Hc)bb][u?=jXk;%R3_*qB[;.B2jhAifM<bm%HO2'>/ltP^>EWWKh"JikFPXE@FVpUB>3#enZmjsX7T3Bq&++.p_IH;ch"U%`YEd`=.uU0'J6[Jta-7CD2Dmm$W#+tnUn_Ip^j<&'%g_FsKb(&1KA*'9,kd!VgKOcEYcIW1a:taVu8fEuL,e6m`j4=7gbW%+%I-Z7rj3Qb>2PH3P:V]"&d<Yb+N3HC6[su'iLDe25r:c#@%OSE&S6n&BFAA,GY4FaPl=Dm7HlbI5Na7K145C`G]Dkrd28KXM996jp:m8TjUUU&DlH^GS??`3iANMmp_c(?-V5*glNKISb8p5gGD%$6%S)$q;153C9\DAuFl"1-C'JC&E_!Y6/ZJbB@'L2Tqkb[803\`oshUh.YK?N[uJk#gP%Fs5!;E'j.sZ>NhJ&0,BCH3FlZS!V@qg%hKhTX?IaelZ?''bloa@;J,_KtM]u%r)si$LHXGXrbJn5Ded=I`U1orAMp!AIP_GICk4pNgo1O%`V'3U_=GdH'Bt)!%6n`Y&Nct3L%L+hHAqKtHqFj+H]",FP._dA$=TJF'5L:kRq9[.K;O0ak'VYo<.bO]'Gi#A)rLO@C:6#INV:Zt3ji:C%<onc"k9<h]Cc:^bt7HtUj%ABN+OZY-":cX46Sfcdk*2@$]Ihu(h)PG0(Io/RPJ8)8S_7f<4u5-^4XHcS59<Q(3%m[FIT>A'063>n7JpUC"3LFgqL)aUC*_.gVi%q!*=E%2;V(h46dsoD]mRlg:9I(c&GWPVCPAB5cL;<]-gLm"qhb&a3t_/W;j]enL[U>sqFan=SFA/KC.JESNW?ff$rA&@)B7nN(@O%-V5c77ZQq0UKe3'W/):g^Br@*4;c6sEp/ULnD2-5;QK"f_uKZ?C?B2_e+YoY^M[nqV5P6a*f#9IT7,N!rR$\J-!`UZqWAt#ib-%'%mB;!;bE"map=m?0HMY[KTDmtshf8$&\!&-0FrU9oq5ocm"2AFHj,`nD,UClrfa?[8iYb'&I8o8JTms.N3spK>["*8K90O0'XL%-8%s&_L_igbTknfXjmGr\gcBr<Q;^XS?R4C4@=m)Pd72-GQIQN_]kJqpct(H8?YdVnMEr:d=.C1!4REshGIAdnZ@5K;,n[%KE"'e_V2%qHWZ\,X$XQ++(UfrJa]`/44Xs!h(,-A2.EMBc,ACH,'+]hu58F2A`a(*X#),,"e<R6:&c5+5LF+Fl#_@=_DnX$.qTO<As1uOW`M\%et&L`_RtJ=@Y*TP29Tr5"5.\:)fQ_kVi"Y$(_."$5nB<M90d9Ab3Y81"CDKa,C^*Oa]W/^n%\:SR*`#bY<dO?!@\Y\;]"e[M'rr%%Ntd,I6IC]T9^O,^%_!b4B02r=DltS(RQ"#g=RpOgp+W&VGl2fJF([Ynr7l.GN`BENERjB5hbX+-f)_9bZsiY(lR0G%eVf#1M4XJ?%0a*7F#_)a57*Gr>5-?Zu3o>>U)pA0iDbThuY7J3/k4RnD5PauKDVLWsY:%$\3^3B2[ibV907PbVmbe$?(SAJ>Vsf-4iudI!^]".u%^\Y@(a)74W-W5ERj5m+3F@$5Pc[YuR7pc%3qt#l@J,R^3=apA%TE"U4s80ido.ekrh/t<SQCk5d@@$4T?]$[Is82EFHX^/&T_LGV%[puD(\ZY_*qu$H`R^sU<a1qWKJ,_aVa'WfW:Z\N:3!ZboQu[]PnEo+?PPdr.5(E>!h`q*Y+91q^rRLANs7;;pj4j/)o7+Md3q1H;%Y9/6V%oT_UO$U2&a.L-EZ[_iFl(A")^NeA>f,qd+p5^8j@TICX%DQIB2s80";0dsa!/ij)OP$MrjZIB+"Z25?4D[0D0TZ=(](?i"%QJ8h:J1Z?,ZEG"5K/,:b0?RYC$-6q^"u/E/Y-9@&C$&g%1m&gp!]lF!!6q@9fo-W-46.=rKl8:!<"Z?e,XHu$ODkR?;DPM:T,e8`%DRZD9H5.,9ZM:#_3..Q.i>'qef%/I<PYX&+.L\W=SUc1e;M_5m(0n^bEfcfKXM^p-a>;)XYUTmf9t:h)i?f6?`rd,tf"MksYs31-%ClY:Xj,Z:O*>[.0s1H)?07NcrGL(d;h6iIGcg.lt5Pk#=5P_A;IeSb-IK/WjrQ"s/S):s@:Gk?8n50=^i+dbM:sH]7S?c6:4mR@*%SAi&_"RFcGrf\'5nhi7LRA1O(JZ(sAIb4jp"L\;0n^)qTiP!;f6'8Cu8:iKe4&a]X:&QGR"-!jhHFK"ZhF,2?'U\_dS+p>OnP'N-%_LpgF7Cd&%YdncmDhb]85eE4`>I02sq,c<P6kYehp<H&G+F9kJS(V[JH"QrpA35shZuO;qEO6!A/b=Ik(tWYmE)WjLV%UU(LSW%F%?C*5d)CE(!;J*`je+-)!76*W#m%)[YaaRd2R:3sD[]>G*CcC7<ftMSENaCH)9^[VRJa'lNaMBXX,LbHjiAL)):t))!E0^9VNE8I-%Nt7h'&eUc8[<C`6cO6T9,N)]#ob(1E1Q0t5/T:Ep3-7C?j#e9kB4$!)T&8WrhHt<)ie$rg6^mr,rQm7.)DGCHLgK+bo44ePbY,/X%mW+JQ`VnfU+0YPC:B^S9O6bIBs0*l#qp.KpmuA77S&bNE>Nj,Bpcj9"]:XQPoUFb;iqm*8eGhj>r/(7bGN7l$ppri`Q-O^=Rk/sP%SSA!W`dG0R]0<0B2K>It<>tdPq#fOpN_%gg2T?i#`QJt90!q$H_ltq5/;L=Tls/%T_Wi>I2$!0"kGd.kistEQ.--/iHLaQ5.%7/R%6rp`oAml<HcB"SC7NL!dE_'+$aLNri!4a5pNAcM$bHI-sc2/WM=0/9u\oA-k[^m^eU##"er+/Lp@$o0\1.'tI*L5]RlO9)uGRfKu%M7%=/i![c^9_q`*9MG\YBf3RL"(NKO\b1V].HZj`r:1$LNS2JSl4tV41&sK?/m\^uD(.>UK88Joo*,<=(LA.8JDe^@k65M)LT3&P%-6+\:>9&JUY`qV/J:H0_90DhSAuKY)\&7;=&/,;"a28^`a@7unTX3u@2_Q4j"CLT>fp_tae%'"j!X32N;(nC`G:-"o.5&A((>X)h%Vm)CY8$FU7\B\t_RACm7A=)crjN(piNE,hAJ$#9<Cl'#o13*]#_)r7ZKXn6JI-*K;@A^X,Nfo+Fk&!hs=;_6<,Y[mIT9qu%rPqm(%]ToH[J]kL6W1?L"p)V]kYVhj6#LX'oQ1JTD/\4]T3YN5(EoFUsf#5[(Df_o2:TXaU>ol=;`!)P6B"FWT.I<]kb).GLWBJ>ddR./r%bd?Bn>cY_sWBQIWrE%^NDo,mbkp`)mccdN#??DZsXPH$^=9QFRbj1Aj]GAWHb9J!9&=BX[5n()t#-IRX_@(T6cL]Y(FmJYrV`fP)%qnrW.<X<-(GEbqIldJtP8Jo+JoYd`o^?9]9iou-hW&"6`KQ"TEp+Ei<D/>7H_Ra>7*;NDi"F2=rV>&,rc/]6Ai'C,"T4M:,^sq!+%k1/>'/?qd,L27*=>4m=@KYNd(o.-^8?(\n&rm-&q>RQ2:H6Q6B!c_NLF1?:ZJt`2,f`4&EW4/XJ\(WoNN4!k*HMQiiR*U:@RcQLq%-of$.[Zp%P.hDOTcNLZTlp#mlbO>JkDnl2"oCp#unB6=Vmf37bj*/9;2'M,Ns2Xf!O2(V[p]'`phu*3FO8n]VJ+J"<f.HaYJ+dOT%p2Bqk&-!^`1C+E~>%AI9_PrivateDataEnd